/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "DMA_int.h"
#include "I2C_int.h"
#include "STM32F446xx.h"
#include "Utils.h"
#include "GPIO_int.h"
#include "RCC_int.h"
#include "NVIC_int.h"
#include "RTC.h"

DMA_HandleTypeDef_t DMA_I2C1_TX=
{
		.Init.Channel=channel_1,
		.Init.DMANumber=DMA_Number_1,
		.Init.Stream=Stream_7,
		.Init.Direction=memory_to_peripheral,
		.Init.MINC=memory_address_pointer_is_incremented_after_each_data_transfer,
		.Init.PINC=peripheral_address_pointer_is_fixed,
		.Init.CircularMode= circular_mode_enabled,
		.Init.PriorityLevel=high,
		.Init.DirectOrFIFOMode=direct_mode_enabled,
		.Init.MemoryBurst=single_transfer,
		.Init.PeripheralBurst=single_transfer,

		.Current_memory_target=current_target_memory_is_Memory_0,
		.double_buffer_mode=No_buffer_switching_at_the_end_of_transfer,
		.peripheral_increment_offset_size=The_offset_size_for_the_peripheral_address_calculation_is_linked_to_the_PSIZE,
		.MemorySIZE=byte,
		.PeripheralSIZE=byte,
		.peripheral_flow_controller=DMA_is_the_flow_controller,
		.transfer_complete_interrupt_enable=TC_interrupt_enabled,
		.half_transfer_interrupt_enable=HT_interrupt_disabled,
		.transfer_error_interrupt_enable=TE_interrupt_disabled,
		.transfer_error_interrupt_enable=TE_interrupt_disabled,
		.direct_mode_error_interrupt_enable=DME_interrupt_disabled,
		.FIFO_error_interrupt_enable=FE_interrupt_disabled

};
DMA_HandleTypeDef_t DMA_I2C1_RX=
{
		.Init.Channel=channel_1,
		.Init.DMANumber=DMA_Number_1,
		.Init.Stream=Stream_0,
		.Init.Direction=peripheral_to_memory,
		.Init.MINC=memory_address_pointer_is_incremented_after_each_data_transfer,
		.Init.PINC=peripheral_address_pointer_is_fixed,
		.Init.CircularMode= circular_mode_enabled,
		.Init.PriorityLevel=high,
		.Init.DirectOrFIFOMode=direct_mode_enabled,
		.Init.MemoryBurst=single_transfer,
		.Init.PeripheralBurst=single_transfer,

		.Current_memory_target=current_target_memory_is_Memory_0,
		.double_buffer_mode=No_buffer_switching_at_the_end_of_transfer,
		.peripheral_increment_offset_size=The_offset_size_for_the_peripheral_address_calculation_is_linked_to_the_PSIZE,
		.MemorySIZE=byte,
		.PeripheralSIZE=byte,
		.peripheral_flow_controller=DMA_is_the_flow_controller,
		.transfer_complete_interrupt_enable=TC_interrupt_enabled,
		.half_transfer_interrupt_enable=HT_interrupt_disabled,
		.transfer_error_interrupt_enable=TE_interrupt_disabled,
		.transfer_error_interrupt_enable=TE_interrupt_disabled,
		.direct_mode_error_interrupt_enable=DME_interrupt_disabled,
		.FIFO_error_interrupt_enable=FE_interrupt_disabled
};

I2C_HandleTypeDef_t ourI2C=
{
		.I2C_ID=I2C_Channel_1,
		.I2C_MasterMode=I2C_SM_MODE,
};


PinConfig_t PinSCK=
{
		.PIN_Port=PORTB,
		.PIN_Number=PIN8,
		.PIN_Type=ALTERNATE,
		.PIN_AF=AF4,
		.PIN_LCKSTS=UNLOCKED,

};
PinConfig_t PinSDA=
{
		.PIN_Port=PORTB,
		.PIN_Number=PIN9,
		.PIN_Type=ALTERNATE,
		.PIN_AF=AF4,
		.PIN_LCKSTS=UNLOCKED,

};

int main(void)
{

	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOBEN);
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);

	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
	RCC_APB1EnableCLK(RCC_APB1ENR_I2C1EN);
	//Enable DMA interrupts
	NVIC_vEnableInterrupt(NVIC_DMA1_Stream7);
	NVIC_vEnableInterrupt(NVIC_DMA1_Stream0);

	DMA_vInit(&DMA_I2C1_TX);
	DMA_vInit(&DMA_I2C1_RX);

	GPIO_u8PinInit(&PinSCK);
	GPIO_u8PinInit(&PinSDA);

	I2C_vInit(&ourI2C);
	/* Loop forever */
	uint8_t da[]={50,60,70,80,90};
//	I2C_SendDataToSlave_DMA(&ourI2C, &DMA_I2C1_TX,(uint8_t)0b01101000,5,da);
	RTC_Programming(&ourI2C,&DMA_I2C1_TX);
	for(;;)
	{

	}
}
