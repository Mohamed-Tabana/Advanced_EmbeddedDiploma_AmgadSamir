/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
#include <stdint.h>

__attribute__ ((naked)) void SVC_Handler(void)
{
	//Getting MSP base address stack frame base
	__asm volatile ("MRS R0,MSP");
	__asm volatile ("B SVCHandler_C");

}
void SVCHandler_C(uint32_t* cop_pu32StackFrameBase) // compiler will automatically pass MSP to R0
{
	uint8_t Local_u8SVCnumber;
	// +6 from MSP will get the PC
	uint8_t* local_pu8ReturnAddress = cop_pu32StackFrameBase[6];
	//the  ("MRS R0,MSP") will be in PC -2
	local_pu8ReturnAddress-=2;
	// dereference this add and get 1st byte
	Local_u8SVCnumber=*local_pu8ReturnAddress;
	//increment the value by 4
	Local_u8SVCnumber+=4;
	// put the result in R0 of the stack frame
	local_pu8ReturnAddress[0] = Local_u8SVCnumber;

}

int main(void)
{
	// first step
	__asm volatile ("SVC #5");

	// end step to take the R0 register value
	//	register uint32_t Local_u32Data __asm("r0"); // not recommended, register word is only request it is compiler dependent to make the request or not
	uint32_t Local_u32Data

	/* Loop forever */
	for(;;);
}
