/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#include <stdint.h>
#include "STM32F446xx.h"
#include "SPI_int.h"
#include "Utils.h"
#include "GPIO_int.h"
#include "RCC_int.h"
#include "DMA_Int.h"
#include "SysTick_int.h"

PinConfig_t PINSCK=
{
		.PIN_Port=PORTC,
		.PIN_Number=PIN10,
		.PIN_Type=ALTERNATE,
		.PIN_AF=AF5,
		.PIN_LCKSTS=UNLOCKED,

};
PinConfig_t PINMISO=
{
		.PIN_Port=PORTC,
		.PIN_Number=PIN11,
		.PIN_Type=ALTERNATE,
		.PIN_AF=AF5,
		.PIN_LCKSTS=UNLOCKED,

};
PinConfig_t PINMOSI=
{
		.PIN_Port=PORTC,
		.PIN_Number=PIN12,
		.PIN_Type=ALTERNATE,
		.PIN_AF=AF5,
		.PIN_LCKSTS=UNLOCKED,

};

SPI_HandleTypeDef_t ourSPI =
{
		.USART_ID=USART_2,
		.USARTEnable=USART_Enable,
		.TransmitterEnable=USART_Transmitter_Enable,
		.RecieverEnable=USART_Receiver_Enable,
		.DMAEnableTransmitter=DMA_enabled_for_transmission,
		.DMAEnableReciever=DMA_enabled_for_reception,
		.NumberOfStopBits=One_Stop_bit,
		.ParityEnable=USART_Disable_Parity,

		.WordLength=one_Start_bit_8_Data_bits,
		.OneSampleMethod=Three_sample_bit_method,
		.OverSamplingMode=oversampling_by_16,
		.u32BaudRate=9600,
		.RXNEInterruptEnable=USART_Interrupt_Enable,
		.PEInterruptEnable=USART_Interrupt_Disable,
		.TXEInterruptEnable=USART_Interrupt_Disable,
		.TransmissionCompleteInterruptEnable=USART_Interrupt_Disable,
		.IdleInterruptEnable=USART_Interrupt_Disable,
		.ErrorInterruptEnable=USART_Interrupt_Disable
};
uint8_t Mydata=0;
DMA_HandleTypeDef_t ourDMA=
{
		.Init.Channel=channel_4,
		.Init.DMANumber=DMA_Number_1,
		.Init.Stream=Stream_5,
		.Init.Direction=peripheral_to_memory,
		.Init.MINC=memory_address_pointer_is_incremented_after_each_data_transfer,
		.Init.PINC=peripheral_address_pointer_is_fixed,
		.Init.CircularMode= circular_mode_enabled,
		.Init.PriorityLevel=high,
		.Init.DirectOrFIFOMode=direct_mode_enabled,
		.Init.MemoryBurst=single_transfer,
		.Init.PeripheralBurst=single_transfer,
		.Current_memory_target=current_target_memory_is_Memory_0,
		.double_buffer_mode=No_buffer_switching_at_the_end_of_transfer,
		.MemorySIZE=byte,
		.PeripheralSIZE=byte,


};
uint8_t myarr[10];
//uint8_t myarr2[10]={1,2,3,4,5,6,7,8,9,10};

int main(void)
{
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOAEN);
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);

	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA2EN);

	RCC_APB1EnableCLK(RCC_APB1ENR_USART2EN);
	RCC_APB1EnableCLK(RCC_APB1ENR_SPI3EN);

	GPIO_u8PinInit(&PINSCK);
	GPIO_u8PinInit(&PINMISO);
	GPIO_u8PinInit(&PINMOSI);

	UART_vInit( &ourUsart);

	DMA_vInit( &ourDMA);
//	DMA_vStart(&ourDMA,(uint32_t)0x40004404, (uint32_t)myarr , 6);
//	DMA_vStart(&ourDMA,(uint32_t)myarr2, (uint32_t)myarr , 6);


	/* Loop forever */
	while(1)
	{
		SPI_vSendSynch( &ourSPI, "a");


	}
}
