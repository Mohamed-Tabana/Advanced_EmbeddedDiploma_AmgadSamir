#ifndef SPI_INTERFACE_H_
#define SPI_INTERFACE_H_

#include "DMA_int.h"
#include "SPI_prv.h"
#include "stdint.h"
#include "STM32F446xx.h"
#include "Utils.h"


typedef enum
{
	SPI_Channel1,
	SPI_Channel2,
	SPI_Channel3,
	SPI_Channel4
}SPI_Channel_t;

typedef enum
{
	Two_line_unidirectional_data_mode,
	One_line_bidirectional_data_mode
}SPI_BidirectionalMode_t;
typedef enum
{
	Output_disabled,
	Output_enabled
}SPI_OutputEnableInBidirectional_t;
typedef enum
{
	SPI_CRC_Disabled,
	SPI_CRC_Enabled
}SPI_HWCRCEnable_t;

typedef enum
{
	_8_BitData,
	_16_BitData
}SPI_DataFrameFormat_t;


typedef enum
{
	SPI_full_duplex,
	SPI_Output_disabled
}SPI_ReceiveOnlyModeEnable_t;


typedef enum
{
	SPI_SW_Mng_Disabled,
	SPI_SW_Mng_Enabled
}SPI_SWSlaveMng_t;

typedef enum
{
	SPI_SlaveSelected,
	SPI_SlaveNotSelected
}SPI_InternalSlaveSelect_t;

typedef enum
{
	MSB_transmitted_first,
	LSB_transmitted_first
}SPI_LSBFirst_t;


typedef enum
{
	SPI_Disable,
	SPI_Enable
}SPI_Enable_t;

typedef enum
{
	Fclk_over_2,
	Fclk_over_4,
	Fclk_over_8,
	Fclk_over_16,
	Fclk_over_32,
	Fclk_over_64,
	Fclk_over_128,
	Fclk_over_256,

}SPI_BaudRate_t;

typedef enum
{
	SPI_Slave,
	SPI_Master,
}SPI_MasterSlave_t;

typedef enum
{
	Zero_Idle,
	One_Idle,
}SPI_ClockPolarity_t;

typedef enum
{
	The_first_clock_transition_is_the_first_data_capture_edge,
	The_second_clock_transition_is_the_first_data_capture_edge,
}SPI_ClockPhase_t;




typedef enum
{
	The_first_clock_transition_is_the_first_data_capture_edge,
	The_second_clock_transition_is_the_first_data_capture_edge,
}SPI_InterruptEnable_t;

typedef enum
{
	SPIMotorolaMode,
	SPITIMode,
}SPI_FrameFormat_t;

typedef enum
{
	SPI_SSOutputDisable,
	SPI_SSOutputEnable,
}SPI_SSOutputEnable_t;


typedef enum
{
	SPI_DMATxDisable,
	SPI_DMATxEnable,
}SPI_DMATxEnable_t;


typedef enum
{
	SPI_DMARxDisable,
	SPI_DMARxEnable,
}SPI_DMARxEnable_t;

typedef enum
{
	SPI_RXBufferFull,
	SPI_TXBufferEmpty,
	SPI_UnderrunFlag=3,
	SPI_CRCErrorFlag,
	SPI_ModeFault,
	SPI_OverrunFlag,
	SPI_BusyFlag,
	SPI_FrameError,
}SPI_Flags_t;

typedef struct
{
	SPI_Channel_t SPI_ID ;
	SPI_HWCRCEnable_t HWCRC_Enable;
	SPI_DataFrameFormat_t DataFrameFormat;
	SPI_Enable_t SPI_Enable;
	SPI_BaudRate_t SPI_BaudRate;
	SPI_MasterSlave_t MasterSlaveSelection;
	SPI_DMARxEnable_t SPI_DMARxEnable;
	SPI_DMATxEnable_t SPI_DMATxEnable;
	SPI_InterruptEnable_t TxBufferEmptyIE;
	SPI_InterruptEnable_t RxBufferNotEmptyIE;
	SPI_InterruptEnable_t ErrorIE;
}SPI_HandleTypeDef_t;

void SPI_vInit(SPI_HandleTypeDef_t* hspi);
void SPI_vSendSynch(SPI_HandleTypeDef_t* hspi, uint8_t copy_u8Data);
void SPI_vReceiveSynch(SPI_HandleTypeDef_t* hspi, uint8_t *copy_u8Data);
void SPI_vSendReceive(SPI_HandleTypeDef_t* hspi,uint8_t *copy_pu8RecData, uint8_t copy_pu8SendData);
void SPI_vSendAsynch(SPI_HandleTypeDef_t* hspi);
void SPI_vReceiveAsynch(SPI_HandleTypeDef_t* hspi);
void SPI_vReceive_DMA(DMA_HandleTypeDef_t* hdma,SPI_HandleTypeDef_t* hspi, uint32_t copy_u32DstAddress, uint8_t copy_u32DataLength);
void SPI_vSend_DMA(DMA_HandleTypeDef_t* hdma, SPI_HandleTypeDef_t* hspi,uint32_t copy_u32SrcAddress, uint8_t copy_u32DataLength);







#endif
