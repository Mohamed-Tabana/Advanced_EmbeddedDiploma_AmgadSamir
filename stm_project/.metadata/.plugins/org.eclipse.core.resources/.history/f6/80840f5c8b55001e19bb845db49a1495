#ifndef SPI_INTERFACE_H_
#define SPI_INTERFACE_H_

#include "DMA_int.h"
#include "SPI_prv.h"
#include "stdint.h"
#include "STM32F446xx.h"
#include "Utils.h"

typedef enum
{
	Two_line_unidirectional_data_mode,
	One_line_bidirectional_data_mode
}SPI_BidirectionalMode_t;
typedef enum
{
	Output_disabled,
	Output_enabled
}SPI_OutputEnableInBidirectional_t;
typedef enum
{
	SPI_CRC_Disabled,
	SPI_CRC_Enabled
}SPI_HWCRCEnable_t;
void SPI_vInit(SPI_HandleTypeDef_t* hspi);
void SPI_vSendSynch(SPI_HandleTypeDef_t* hspi, uint8_t copy_u8Data);
void SPI_vReceiveSynch(SPI_HandleTypeDef_t* hspi, uint8_t *copy_u8Data);
void SPI_vSendAsynch(SPI_HandleTypeDef_t* hspi);
void SPI_vReceiveAsynch(SPI_HandleTypeDef_t* hspi);
void SPI_vReceive_DMA(DMA_HandleTypeDef_t* hdma, uint32_t copy_u32DstAddress, uint8_t copy_u32DataLength);
void SPI_vSend_DMA(DMA_HandleTypeDef_t* hdma, uint32_t copy_u32SrcAddress, uint8_t copy_u32DataLength);

static void SPI_SetBidirectionalMode(SPI_HandleTypeDef_t* hspi,SPI_BidirectionalMode_t copy_eSPI_BidirectionalMode)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_BIDIMODE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_BidirectionalMode<<SPI_CR1_BIDIMODE);
}

static void SPI_SetBidirectionalMode(SPI_HandleTypeDef_t* hspi,SPI_OutputEnableInBidirectional_t copy_eOutputEnableInBidirectional)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_BIDIOE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eOutputEnableInBidirectional<<SPI_CR1_BIDIOE);
}
static void SPI_SetBidirectionalMode(SPI_HandleTypeDef_t* hspi,SPI_HWCRCEnable_t copy_eHWCRCEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CRCEN);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eHWCRCEnable<<SPI_CR1_CRCEN);
}
static void SPI_SetHWCRCEnable(SPI_HandleTypeDef_t* hspi,SPI_HWCRCEnable_t copy_eHWCRCEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CRCEN);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eHWCRCEnable<<SPI_CR1_CRCEN);
}





typedef enum
{
	_8_BitData,
	_16_BitData
}SPI_DataFrameFormat_t;

static void SPI_SetDataFrameForamt(SPI_HandleTypeDef_t* hspi,SPI_DataFrameFormat_t copy_eDataFrameFormat)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_DFF);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eDataFrameFormat<<SPI_CR1_DFF);
}
typedef enum
{
	SPI_full_duplex,
	SPI_Output_disabled
}SPI_ReceiveOnlyModeEnable_t;

static void SPI_SetReceiveOnlyEnable(SPI_HandleTypeDef_t* hspi,SPI_ReceiveOnlyModeEnable_t copy_eReceiveOnlyModeEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_RXONLY);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eReceiveOnlyModeEnable<<SPI_CR1_RXONLY);
}

typedef enum
{
	SPI_SW_Mng_Disabled,
	SPI_SW_Mng_Enabled
}SPI_SWSlaveMng_t;

static void SPI_SetSlavengBySW(SPI_HandleTypeDef_t* hspi,SPI_SWSlaveMng_t copy_eSWSlaveMng)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSM);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSWSlaveMng<<SPI_CR1_SSM);
}

typedef enum
{
	SPI_SlaveSelected,
	SPI_SlaveNotSelected
}SPI_InternalSlaveSelect_t;

static void SPI_SetSlaveSelectBySW(SPI_HandleTypeDef_t* hspi,SPI_InternalSlaveSelect_t copy_eInternalSlaveSelect)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSI);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eInternalSlaveSelect<<SPI_CR1_SSI);
}

typedef enum
{
	MSB_transmitted_first,
	LSB_transmitted_first
}SPI_LSBFirst_t;

static void SPI_SetLSB_MSB_First(SPI_HandleTypeDef_t* hspi,SPI_LSBFirst_t copy_eSPI_LSBFirst)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_LSBFIRST);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_LSBFirst<<SPI_CR1_LSBFIRST);
}
typedef enum
{
	SPI_Disable,
	SPI_Enable
}SPI_Enable_t;

static void SPI_Enable(SPI_HandleTypeDef_t* hspi,SPI_Enable_t copy_eSPI_Enable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SPE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_Enable<<SPI_CR1_SPE);
}

typedef enum
{
	Fclk_over_2,
	Fclk_over_4,
	Fclk_over_8,
	Fclk_over_16,
	Fclk_over_32,
	Fclk_over_64,
	Fclk_over_128,
	Fclk_over_256,

}SPI_BaudRate_t;

static void SPI_SetBaudRate(SPI_HandleTypeDef_t* hspi,SPI_BaudRate_t copy_eSPI_BaudRate)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b111<<SPI_CR1_BR);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_BaudRate<<SPI_CR1_BR);
}

typedef enum
{
	SPI_Slave,
	SPI_Master,
}SPI_MasterSlave_t;

static void SPI_SetMasterSlave(SPI_HandleTypeDef_t* hspi,SPI_MasterSlave_t copy_eMasterSlave)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_MSTR);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eMasterSlave<<SPI_CR1_MSTR);
}

typedef enum
{
	Zero_Idle,
	One_Idle,
}SPI_ClockPolarity_t;
static void SPI_SetClockPolarity(SPI_HandleTypeDef_t* hspi,SPI_ClockPolarity_t copy_eClockPolarity)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CPOL);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eClockPolarity<<SPI_CR1_CPOL);
}
typedef enum
{
	The_first_clock_transition_is_the_first_data_capture_edge,
	The_second_clock_transition_is_the_first_data_capture_edge,
}SPI_ClockPhase_t;

static void SPI_SetClockPolarity(SPI_HandleTypeDef_t* hspi,SPI_ClockPhase_t copy_eClockPhase)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CPHA);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eClockPhase<<SPI_CR1_CPHA);
}


typedef enum
{
	The_first_clock_transition_is_the_first_data_capture_edge,
	The_second_clock_transition_is_the_first_data_capture_edge,
}SPI_InterruptEnable_t;

static void SPI_EnableTxBufferEmptyInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXEIE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_TXEIE);
}
static void SPI_EnableRxBufferFullInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXNEIE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_RXNEIE);
}
static void SPI_EnableErrorInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_ERRIE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_ERRIE);
}

typedef enum
{
	SPIMotorolaMode,
	SPITIMode,
}SPI_FrameFormat_t;

static void SPI_SetFrameFormat(SPI_HandleTypeDef_t* hspi,SPI_FrameFormat_t copy_eFrameFormat)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_FRF);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eFrameFormat<<SPI_CR2_FRF);
}
typedef enum
{
	SPI_SSOutputDisable,
	SPI_SSOutputEnable,
}SPI_SSOutputEnable_t;

static void SPI_SetFrameFormat(SPI_HandleTypeDef_t* hspi,SPI_SSOutputEnable_t copy_eSSOutputEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_SSOE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eSSOutputEnable<<SPI_CR2_SSOE);
}


typedef enum
{
	SPI_DMATxDisable,
	SPI_DMATxEnable,
}SPI_DMATxEnable_t;

static void SPI_DMATxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMATxEnable_t copy_eDMATxEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXDMAEN);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMATxEnable<<SPI_CR2_TXDMAEN);
}

typedef enum
{
	SPI_DMARxDisable,
	SPI_DMARxEnable,
}SPI_DMARxEnable_t;

static void SPI_DMARxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMARxEnable_t copy_eDMARxEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXDMAEN);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMARxEnable<<SPI_CR2_RXDMAEN);
}

typedef enum
{
	SPI_FrameError,
	SPI_BusyFlag,
	SPI_OverrunFlag,
	SPI_ModeFault,
	SPI_DMARxEnable,
	SPI_DMARxEnable,
	SPI_DMARxEnable,
	SPI_DMARxEnable,
}SPI_Flags_t;

static void SPI_ReadFlag(SPI_HandleTypeDef_t* hspi,SPI_DMARxEnable_t copy_eDMARxEnable)
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXDMAEN);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMARxEnable<<SPI_CR2_RXDMAEN);
}





#endif
