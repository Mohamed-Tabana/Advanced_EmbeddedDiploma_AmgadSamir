/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>


#include <stdint.h>
#include "STM32F103.h"
#include "SPI_int.h"
#include "Utils.h"
#include "GPIO_int.h"
#include "RCC_int.h"
#include "SysTick_int.h"

//PinConfig_t pinty=
//{
//		.PIN_Port=PORTB,
//		.PIN_Number=PIN15,
//		.PIN_Mode=Output_mode_max_speed_10_MHz,
//		.PIN_OutputType=General_purpose_output_push_pull,
//		.PIN_LCKSTS=UNLOCKED,
//
//};

PinConfig_t PinMOSI=
{
		.PIN_Port=PORTB,
		.PIN_Number=PIN15,
		.PIN_Mode=Output_mode_max_speed_50_MHz,
		.PIN_OutputType=Alternate_function_output_Push_pull,
		.PIN_LCKSTS=UNLOCKED,

};
PinConfig_t PinMISO=
{
		.PIN_Port=PORTB,
		.PIN_Number=PIN14,
		.PIN_Mode=INPUT,
		.PIN_OutputType=Floating_input,
		.PIN_LCKSTS=UNLOCKED,
//		.PIN_Mode=Output_mode_max_speed_10_MHz,
//		.PIN_OutputType=General_purpose_output_push_pull,
//		.PIN_LCKSTS=UNLOCKED,

};
PinConfig_t PinSCK=
{
		.PIN_Port=PORTB,
		.PIN_Number=PIN13,
		.PIN_Mode=Output_mode_max_speed_50_MHz,
		.PIN_InputType=Alternate_function_output_Push_pull,
		.PIN_LCKSTS=UNLOCKED,

};
PinConfig_t PinCS=
{
		.PIN_Port=PORTB,
		.PIN_Number=PIN12,
		.PIN_Mode=Output_mode_max_speed_50_MHz,
		.PIN_InputType=Alternate_function_output_Open_drain,
		.PIN_LCKSTS=UNLOCKED,

};


SPI_HandleTypeDef_t ourSPI =
{
		.SPI_ID=SPI_Channel2,
		.HWCRC_Enable=SPI_CRC_Disabled,
		.DataFrameFormat=_8_BitData,
		.SPI_Enable=SPI_Enable,
		.SPI_BaudRate=Fclk_over_2,
		.MasterSlaveSelection=SPI_Master,
		.SPI_DMARecEnable=eSPI_DMA_Rx_Disable,
		.SPI_DMATransEnable=SPI_Disable_Interrupt,

		.SwMngSlaveEnable=SPI_SW_Mng_Enabled,
		.SwSlaveSelect=SPI_SlaveNotSelected,

		.TxBufferEmptyIE=SPI_Disable_Interrupt,
		.ErrorIE=SPI_Disable_Interrupt,
		.RxBufferNotEmptyIE=SPI_Disable_Interrupt,
};
uint8_t Mydata=0;
//DMA_HandleTypeDef_t ourDMA=
//{
//		.Init.Channel=channel_4,
//		.Init.DMANumber=DMA_Number_1,
//		.Init.Stream=Stream_5,
//		.Init.Direction=peripheral_to_memory,
//		.Init.MINC=memory_address_pointer_is_incremented_after_each_data_transfer,
//		.Init.PINC=peripheral_address_pointer_is_fixed,
//		.Init.CircularMode= circular_mode_enabled,
//		.Init.PriorityLevel=high,
//		.Init.DirectOrFIFOMode=direct_mode_enabled,
//		.Init.MemoryBurst=single_transfer,
//		.Init.PeripheralBurst=single_transfer,
//		.Current_memory_target=current_target_memory_is_Memory_0,
//		.double_buffer_mode=No_buffer_switching_at_the_end_of_transfer,
//		.MemorySIZE=byte,
//		.PeripheralSIZE=byte,
//
//
//};
uint8_t myarr[10];
//uint8_t myarr2[10]={1,2,3,4,5,6,7,8,9,10};
uint8_t senData=0;
uint8_t recData=0;

int main(void)
{
	 RCC_APB1EnableCLK(SPI2EN);
//	 RCC_APB1EnableCLK(SPI3EN);

//	 RCC_APB2EnableCLK(AFIOEN);
	 RCC_APB2EnableCLK(IOPAEN);
	 RCC_APB2EnableCLK(IOPBEN);
	 RCC_APB2EnableCLK(IOPCEN);
//	 RCC_APB2EnableCLK(SPI1EN);








	GPIO_u8PinInit(&PinSCK);
	GPIO_u8PinInit(&PinMISO);
	GPIO_u8PinInit(&PinMOSI);
	GPIO_u8PinInit(&PinCS);
//	GPIO_u8PinInit(&pinty);

//	UART_vInit( &ourUsart);
	SPI_vInit(&ourSPI);
//	DMA_vInit( &ourDMA);
//	DMA_vStart(&ourDMA,(uint32_t)0x40004404, (uint32_t)myarr , 6);
//	DMA_vStart(&ourDMA,(uint32_t)myarr2, (uint32_t)myarr , 6);


	/* Loop forever */
	while(1)
	{
//		SPI_vReceiveSynch( &ourSPI,&data );
//		recData^=1;
		SPI_vSendReceive( &ourSPI,&recData,senData++);
//		GPIO_vToggleOutputPinValue(PORTB, PIN12);
//		GPIO_vToggleOutputPinValue(PORTB, PIN13);
//		GPIO_vToggleOutputPinValue(PORTB, PIN14);
//		GPIO_vToggleOutputPinValue(PORTB, PIN15);

		 STK_vSetBusyWait(2000000);

	}
}
