
F446RE_Alarm_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004018  08004018  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004018  08004018  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004018  08004018  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08004020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001e0  08004200  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08004200  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3e4  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001429  00000000  00000000  0002b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000042b9  00000000  00000000  0002d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000892d  00000000  00000000  00031c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000e13a  00000000  00000000  0003a586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000486c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb4  00000000  00000000  00048710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001e0 	.word	0x200001e0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003db8 	.word	0x08003db8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001e4 	.word	0x200001e4
 8000200:	08003db8 	.word	0x08003db8

08000204 <bcdToDecimal>:
		{RTC_YEAR_REGISER_ADDRESS   ,        00         }, //RTC_YEAR;
		{RTC_YEAR_REGISER_ADDRESS   ,        00         } //RTC_YEAR;

};

static uint8_t bcdToDecimal(uint8_t bcd) {
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  uint8_t tens = (bcd >> 4) & 0x0F;
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	091b      	lsrs	r3, r3, #4
 8000212:	73fb      	strb	r3, [r7, #15]
  uint8_t units = bcd & 0x0F;
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	f003 030f 	and.w	r3, r3, #15
 800021a:	73bb      	strb	r3, [r7, #14]
  uint8_t decimal = (tens * 10) + units;
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	461a      	mov	r2, r3
 8000220:	0092      	lsls	r2, r2, #2
 8000222:	4413      	add	r3, r2
 8000224:	005b      	lsls	r3, r3, #1
 8000226:	b2da      	uxtb	r2, r3
 8000228:	7bbb      	ldrb	r3, [r7, #14]
 800022a:	4413      	add	r3, r2
 800022c:	737b      	strb	r3, [r7, #13]
  return decimal;
 800022e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000230:	4618      	mov	r0, r3
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr

0800023c <decimalToBcd>:
static uint8_t decimalToBcd(uint8_t decimal) {
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  uint8_t tens = decimal / 10;
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <decimalToBcd+0x4c>)
 800024a:	fba2 2303 	umull	r2, r3, r2, r3
 800024e:	08db      	lsrs	r3, r3, #3
 8000250:	73fb      	strb	r3, [r7, #15]
  uint8_t units = decimal % 10;
 8000252:	79fa      	ldrb	r2, [r7, #7]
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <decimalToBcd+0x4c>)
 8000256:	fba3 1302 	umull	r1, r3, r3, r2
 800025a:	08d9      	lsrs	r1, r3, #3
 800025c:	460b      	mov	r3, r1
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	440b      	add	r3, r1
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	1ad3      	subs	r3, r2, r3
 8000266:	73bb      	strb	r3, [r7, #14]
  uint8_t bcd = (tens << 4) | units;
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	011b      	lsls	r3, r3, #4
 800026c:	b25a      	sxtb	r2, r3
 800026e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000272:	4313      	orrs	r3, r2
 8000274:	b25b      	sxtb	r3, r3
 8000276:	737b      	strb	r3, [r7, #13]
  return bcd;
 8000278:	7b7b      	ldrb	r3, [r7, #13]
}
 800027a:	4618      	mov	r0, r3
 800027c:	3714      	adds	r7, #20
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	cccccccd 	.word	0xcccccccd

0800028c <RTC_ProgrammingArr>:
void RTC_Programming(I2C_HandleTypeDef_t* hi2c,DMA_HandleTypeDef_t* copy_eDMAConfig)
{
	I2C_SendDataToSlave_DMA(hi2c, copy_eDMAConfig,RTC_ADDRESS,(uint32_t) RTC_TOTAL_NUMBER_REGISERS_ADDRESS+1,(uint8_t*)cfg_RTC_prg_Array);
}
void RTC_ProgrammingArr(I2C_HandleTypeDef_t* hi2c,DMA_HandleTypeDef_t* copy_eDMAConfig,uint8_t* copy_pu8Data)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b089      	sub	sp, #36	; 0x24
 8000290:	af02      	add	r7, sp, #8
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]
	for (int i=0 ; i<RTC_TOTAL_NUMBER_REGISERS_ADDRESS ;i++)
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
 800029c:	e00f      	b.n	80002be <RTC_ProgrammingArr+0x32>
	{
		cfg_RTC_prg_Array[i+1]=decimalToBcd(copy_pu8Data[i]);
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	4413      	add	r3, r2
 80002a4:	781a      	ldrb	r2, [r3, #0]
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	1c5c      	adds	r4, r3, #1
 80002aa:	4610      	mov	r0, r2
 80002ac:	f7ff ffc6 	bl	800023c <decimalToBcd>
 80002b0:	4603      	mov	r3, r0
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <RTC_ProgrammingArr+0x50>)
 80002b6:	551a      	strb	r2, [r3, r4]
	for (int i=0 ; i<RTC_TOTAL_NUMBER_REGISERS_ADDRESS ;i++)
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	3301      	adds	r3, #1
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	2b06      	cmp	r3, #6
 80002c2:	ddec      	ble.n	800029e <RTC_ProgrammingArr+0x12>
	}

	I2C_SendDataToSlave_DMA(hi2c, copy_eDMAConfig,RTC_ADDRESS,(uint32_t) RTC_TOTAL_NUMBER_REGISERS_ADDRESS+1,(uint8_t*)cfg_RTC_prg_Array);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <RTC_ProgrammingArr+0x50>)
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2308      	movs	r3, #8
 80002ca:	2268      	movs	r2, #104	; 0x68
 80002cc:	68b9      	ldr	r1, [r7, #8]
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	f001 fbb2 	bl	8001a38 <I2C_SendDataToSlave_DMA>
}
 80002d4:	bf00      	nop
 80002d6:	371c      	adds	r7, #28
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd90      	pop	{r4, r7, pc}
 80002dc:	20000000 	.word	0x20000000

080002e0 <RTC_Get_CurrentTime>:
{
	I2C_SendDataToSlave_DMA(hi2c, copy_eDMAConfig,RTC_ADDRESS,(uint32_t)2,(uint8_t*)&cfg_RTC_prg_Array[copy_eReg+1]);
}

void RTC_Get_CurrentTime(I2C_HandleTypeDef_t* hi2c,DMA_HandleTypeDef_t* copy_eDMAConfigTX,DMA_HandleTypeDef_t* copy_eDMAConfigRX,uint8_t* copy_pu8Data)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b089      	sub	sp, #36	; 0x24
 80002e4:	af02      	add	r7, sp, #8
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
 80002ec:	603b      	str	r3, [r7, #0]
	// +1 is workaround because the last data is not transferred y DMA if we did not increment another one
	for (int i=0 ; i<RTC_TOTAL_NUMBER_REGISERS_ADDRESS+1 ;i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e019      	b.n	8000328 <RTC_Get_CurrentTime+0x48>
	{
		//Give X Address Reg
		I2C_SendDataToSlave_DMA(hi2c, copy_eDMAConfigTX,RTC_ADDRESS,(uint32_t) 1,Getter_RTC_prg_Array[i]);
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <RTC_Get_CurrentTime+0x84>)
 80002fa:	4413      	add	r3, r2
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	2301      	movs	r3, #1
 8000300:	2268      	movs	r2, #104	; 0x68
 8000302:	68b9      	ldr	r1, [r7, #8]
 8000304:	68f8      	ldr	r0, [r7, #12]
 8000306:	f001 fb97 	bl	8001a38 <I2C_SendDataToSlave_DMA>
		//Get X Data
		I2C_ReceiveDataFromSlave_DMA(hi2c, copy_eDMAConfigRX,RTC_ADDRESS,(uint32_t) 1,(uint8_t*)(Getter_RTC_prg_Array[i]+1));
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	4a15      	ldr	r2, [pc, #84]	; (8000364 <RTC_Get_CurrentTime+0x84>)
 8000310:	4413      	add	r3, r2
 8000312:	3301      	adds	r3, #1
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2301      	movs	r3, #1
 8000318:	2268      	movs	r2, #104	; 0x68
 800031a:	6879      	ldr	r1, [r7, #4]
 800031c:	68f8      	ldr	r0, [r7, #12]
 800031e:	f001 fbe1 	bl	8001ae4 <I2C_ReceiveDataFromSlave_DMA>
	for (int i=0 ; i<RTC_TOTAL_NUMBER_REGISERS_ADDRESS+1 ;i++)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	2b07      	cmp	r3, #7
 800032c:	dde2      	ble.n	80002f4 <RTC_Get_CurrentTime+0x14>
	}
	for (int i=0 ; i<RTC_TOTAL_NUMBER_REGISERS_ADDRESS ;i++)
 800032e:	2300      	movs	r3, #0
 8000330:	613b      	str	r3, [r7, #16]
 8000332:	e00f      	b.n	8000354 <RTC_Get_CurrentTime+0x74>
	{
		//Give X Address Reg
		copy_pu8Data[i]=bcdToDecimal(Getter_RTC_prg_Array[i][1]);
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <RTC_Get_CurrentTime+0x84>)
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	4413      	add	r3, r2
 800033c:	7859      	ldrb	r1, [r3, #1]
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	18d4      	adds	r4, r2, r3
 8000344:	4608      	mov	r0, r1
 8000346:	f7ff ff5d 	bl	8000204 <bcdToDecimal>
 800034a:	4603      	mov	r3, r0
 800034c:	7023      	strb	r3, [r4, #0]
	for (int i=0 ; i<RTC_TOTAL_NUMBER_REGISERS_ADDRESS ;i++)
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	3301      	adds	r3, #1
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	2b06      	cmp	r3, #6
 8000358:	ddec      	ble.n	8000334 <RTC_Get_CurrentTime+0x54>
	}

}
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	371c      	adds	r7, #28
 8000360:	46bd      	mov	sp, r7
 8000362:	bd90      	pop	{r4, r7, pc}
 8000364:	20000008 	.word	0x20000008

08000368 <DMA_vInit>:

static void (*arrDMA1_PtrToFunction[8][Total_Number_Of_Interrupts])(void) = {NULL};
static void (*arrDMA2_PtrToFunction[8][Total_Number_Of_Interrupts])(void) = {NULL};

void DMA_vInit(DMA_HandleTypeDef_t* copy_eDMAConfig)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	DMA_vSetDMAStreamChannelSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.Channel);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	7858      	ldrb	r0, [r3, #1]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7899      	ldrb	r1, [r3, #2]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	f000 f8b9 	bl	80004f4 <DMA_vSetDMAStreamChannelSelection>
	DMA_vSetDMAStreamDataTransferDirection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.Direction);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	7858      	ldrb	r0, [r3, #1]
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	7899      	ldrb	r1, [r3, #2]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	78db      	ldrb	r3, [r3, #3]
 800038e:	461a      	mov	r2, r3
 8000390:	f000 fc10 	bl	8000bb4 <DMA_vSetDMAStreamDataTransferDirection>
	DMA_vSetDMAMemoryIncrementMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.MINC);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	7858      	ldrb	r0, [r3, #1]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	7899      	ldrb	r1, [r3, #2]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	461a      	mov	r2, r3
 80003a2:	f000 fb2f 	bl	8000a04 <DMA_vSetDMAMemoryIncrementMode>
	DMA_vSetDMAPeripheralIncrementMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PINC);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	7858      	ldrb	r0, [r3, #1]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	7899      	ldrb	r1, [r3, #2]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	795b      	ldrb	r3, [r3, #5]
 80003b2:	461a      	mov	r2, r3
 80003b4:	f000 fb6e 	bl	8000a94 <DMA_vSetDMAPeripheralIncrementMode>
	DMA_vSetDMACircularMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.CircularMode);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	7858      	ldrb	r0, [r3, #1]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	7899      	ldrb	r1, [r3, #2]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	799b      	ldrb	r3, [r3, #6]
 80003c4:	461a      	mov	r2, r3
 80003c6:	f000 fbad 	bl	8000b24 <DMA_vSetDMACircularMode>
	DMA_vSetDMAStreamPriorityLevel(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PriorityLevel);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	7858      	ldrb	r0, [r3, #1]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	7899      	ldrb	r1, [r3, #2]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	79db      	ldrb	r3, [r3, #7]
 80003d6:	461a      	mov	r2, r3
 80003d8:	f000 f9f4 	bl	80007c4 <DMA_vSetDMAStreamPriorityLevel>
	DMA_vSetDirectModeStatus(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.DirectOrFIFOMode);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	7858      	ldrb	r0, [r3, #1]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	7899      	ldrb	r1, [r3, #2]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7a1b      	ldrb	r3, [r3, #8]
 80003e8:	461a      	mov	r2, r3
 80003ea:	f000 fe7b 	bl	80010e4 <DMA_vSetDirectModeStatus>
	DMA_vSetFIFOThresholdSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.FIFOThreshold);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	7858      	ldrb	r0, [r3, #1]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	7899      	ldrb	r1, [r3, #2]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	7a5b      	ldrb	r3, [r3, #9]
 80003fa:	461a      	mov	r2, r3
 80003fc:	f000 feba 	bl	8001174 <DMA_vSetFIFOThresholdSelection>
	DMA_vSetDMAStreamMemoryBurstTransferSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.MemoryBurst);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	7858      	ldrb	r0, [r3, #1]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	7899      	ldrb	r1, [r3, #2]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7a9b      	ldrb	r3, [r3, #10]
 800040c:	461a      	mov	r2, r3
 800040e:	f000 f8b9 	bl	8000584 <DMA_vSetDMAStreamMemoryBurstTransferSelection>
	DMA_vSetDMAStreamPeripheralBurstTransferSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PeripheralBurst);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	7858      	ldrb	r0, [r3, #1]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	7899      	ldrb	r1, [r3, #2]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	7adb      	ldrb	r3, [r3, #11]
 800041e:	461a      	mov	r2, r3
 8000420:	f000 f8f8 	bl	8000614 <DMA_vSetDMAStreamPeripheralBurstTransferSelection>
	DMA_vSetTransferCompleteInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->transfer_complete_interrupt_enable);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7858      	ldrb	r0, [r3, #1]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	7899      	ldrb	r1, [r3, #2]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7c9b      	ldrb	r3, [r3, #18]
 8000430:	461a      	mov	r2, r3
 8000432:	f000 fc4f 	bl	8000cd4 <DMA_vSetTransferCompleteInterrupt>
	DMA_vSetTransferErrorInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->transfer_error_interrupt_enable);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	7858      	ldrb	r0, [r3, #1]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	7899      	ldrb	r1, [r3, #2]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	7d1b      	ldrb	r3, [r3, #20]
 8000442:	461a      	mov	r2, r3
 8000444:	f000 fcd6 	bl	8000df4 <DMA_vSetTransferErrorInterrupt>
	DMA_vSetFIFOErrorInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->FIFO_error_interrupt_enable);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	7858      	ldrb	r0, [r3, #1]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	7899      	ldrb	r1, [r3, #2]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7d9b      	ldrb	r3, [r3, #22]
 8000454:	461a      	mov	r2, r3
 8000456:	f000 fdfd 	bl	8001054 <DMA_vSetFIFOErrorInterrupt>
	DMA_vSetHalfTransferCompleteInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->half_transfer_interrupt_enable);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	7858      	ldrb	r0, [r3, #1]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	7899      	ldrb	r1, [r3, #2]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	7cdb      	ldrb	r3, [r3, #19]
 8000466:	461a      	mov	r2, r3
 8000468:	f000 fc7c 	bl	8000d64 <DMA_vSetHalfTransferCompleteInterrupt>
	DMA_vSetDirectModeErrorInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->direct_mode_error_interrupt_enable);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	7858      	ldrb	r0, [r3, #1]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7899      	ldrb	r1, [r3, #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7d5b      	ldrb	r3, [r3, #21]
 8000478:	461a      	mov	r2, r3
 800047a:	f000 fd03 	bl	8000e84 <DMA_vSetDirectModeErrorInterrupt>
	DMA_vSetDMAStreamCurrentMemoryTarget(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Current_memory_target);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	7858      	ldrb	r0, [r3, #1]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	7899      	ldrb	r1, [r3, #2]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	7b1b      	ldrb	r3, [r3, #12]
 800048a:	461a      	mov	r2, r3
 800048c:	f000 f90a 	bl	80006a4 <DMA_vSetDMAStreamCurrentMemoryTarget>
	DMA_vSetDMAStreamDoubleBufferMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->double_buffer_mode);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	7858      	ldrb	r0, [r3, #1]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7899      	ldrb	r1, [r3, #2]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	7b5b      	ldrb	r3, [r3, #13]
 800049c:	461a      	mov	r2, r3
 800049e:	f000 f949 	bl	8000734 <DMA_vSetDMAStreamDoubleBufferMode>
	DMA_vSetDMAStreamIncreamentalOffset(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->peripheral_increment_offset_size);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	7858      	ldrb	r0, [r3, #1]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	7899      	ldrb	r1, [r3, #2]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	7b9b      	ldrb	r3, [r3, #14]
 80004ae:	461a      	mov	r2, r3
 80004b0:	f000 f9d0 	bl	8000854 <DMA_vSetDMAStreamIncreamentalOffset>
	DMA_vSetDMAStreamMemorySize(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->MemorySIZE);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	7858      	ldrb	r0, [r3, #1]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	7899      	ldrb	r1, [r3, #2]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	7c1b      	ldrb	r3, [r3, #16]
 80004c0:	461a      	mov	r2, r3
 80004c2:	f000 fa0f 	bl	80008e4 <DMA_vSetDMAStreamMemorySize>
	DMA_vSetDMAStreamPeripheralSize(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->PeripheralSIZE);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7858      	ldrb	r0, [r3, #1]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	7899      	ldrb	r1, [r3, #2]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7bdb      	ldrb	r3, [r3, #15]
 80004d2:	461a      	mov	r2, r3
 80004d4:	f000 fa4e 	bl	8000974 <DMA_vSetDMAStreamPeripheralSize>
	DMA_vSetDMAStreamPeripheralFlowController(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->peripheral_flow_controller);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	7858      	ldrb	r0, [r3, #1]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7899      	ldrb	r1, [r3, #2]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7c5b      	ldrb	r3, [r3, #17]
 80004e4:	461a      	mov	r2, r3
 80004e6:	f000 fbad 	bl	8000c44 <DMA_vSetDMAStreamPeripheralFlowController>

}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <DMA_vSetDMAStreamChannelSelection>:
void DMA_vSetDMAStreamChannelSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Channel_Selection_t copy_eChannel_Selection)
{
 80004f4:	b490      	push	{r4, r7}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	460b      	mov	r3, r1
 8000500:	71bb      	strb	r3, [r7, #6]
 8000502:	4613      	mov	r3, r2
 8000504:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b111<<DMA_SxCR_CHSEL);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 800050a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800050e:	79ba      	ldrb	r2, [r7, #6]
 8000510:	4613      	mov	r3, r2
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4413      	add	r3, r2
 8000516:	00db      	lsls	r3, r3, #3
 8000518:	440b      	add	r3, r1
 800051a:	3310      	adds	r3, #16
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	79fa      	ldrb	r2, [r7, #7]
 8000520:	4917      	ldr	r1, [pc, #92]	; (8000580 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 8000522:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000526:	79ba      	ldrb	r2, [r7, #6]
 8000528:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800052c:	4613      	mov	r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	4413      	add	r3, r2
 8000532:	00db      	lsls	r3, r3, #3
 8000534:	4403      	add	r3, r0
 8000536:	3310      	adds	r3, #16
 8000538:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eChannel_Selection<<DMA_SxCR_CHSEL);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 800053e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000542:	79ba      	ldrb	r2, [r7, #6]
 8000544:	4613      	mov	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	4413      	add	r3, r2
 800054a:	00db      	lsls	r3, r3, #3
 800054c:	440b      	add	r3, r1
 800054e:	3310      	adds	r3, #16
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	797a      	ldrb	r2, [r7, #5]
 8000554:	0652      	lsls	r2, r2, #25
 8000556:	4614      	mov	r4, r2
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	4909      	ldr	r1, [pc, #36]	; (8000580 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 800055c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	ea43 0104 	orr.w	r1, r3, r4
 8000566:	4613      	mov	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	4413      	add	r3, r2
 800056c:	00db      	lsls	r3, r3, #3
 800056e:	4403      	add	r3, r0
 8000570:	3310      	adds	r3, #16
 8000572:	6019      	str	r1, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bc90      	pop	{r4, r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000018 	.word	0x20000018

08000584 <DMA_vSetDMAStreamMemoryBurstTransferSelection>:
void DMA_vSetDMAStreamMemoryBurstTransferSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,M_P_Burst_Transfer_Configuration_t copy_eM_P_Burst_Transfer_Configuration)
{
 8000584:	b490      	push	{r4, r7}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	460b      	mov	r3, r1
 8000590:	71bb      	strb	r3, [r7, #6]
 8000592:	4613      	mov	r3, r2
 8000594:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_MBURST);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 800059a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800059e:	79ba      	ldrb	r2, [r7, #6]
 80005a0:	4613      	mov	r3, r2
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	4413      	add	r3, r2
 80005a6:	00db      	lsls	r3, r3, #3
 80005a8:	440b      	add	r3, r1
 80005aa:	3310      	adds	r3, #16
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	79fa      	ldrb	r2, [r7, #7]
 80005b0:	4917      	ldr	r1, [pc, #92]	; (8000610 <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 80005b2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80005b6:	79ba      	ldrb	r2, [r7, #6]
 80005b8:	f023 71c0 	bic.w	r1, r3, #25165824	; 0x1800000
 80005bc:	4613      	mov	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	4413      	add	r3, r2
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	4403      	add	r3, r0
 80005c6:	3310      	adds	r3, #16
 80005c8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eM_P_Burst_Transfer_Configuration<<DMA_SxCR_MBURST);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 80005ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	4613      	mov	r3, r2
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	4413      	add	r3, r2
 80005da:	00db      	lsls	r3, r3, #3
 80005dc:	440b      	add	r3, r1
 80005de:	3310      	adds	r3, #16
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	797a      	ldrb	r2, [r7, #5]
 80005e4:	05d2      	lsls	r2, r2, #23
 80005e6:	4614      	mov	r4, r2
 80005e8:	79fa      	ldrb	r2, [r7, #7]
 80005ea:	4909      	ldr	r1, [pc, #36]	; (8000610 <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 80005ec:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80005f0:	79ba      	ldrb	r2, [r7, #6]
 80005f2:	ea43 0104 	orr.w	r1, r3, r4
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4403      	add	r3, r0
 8000600:	3310      	adds	r3, #16
 8000602:	6019      	str	r1, [r3, #0]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bc90      	pop	{r4, r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000018 	.word	0x20000018

08000614 <DMA_vSetDMAStreamPeripheralBurstTransferSelection>:
void DMA_vSetDMAStreamPeripheralBurstTransferSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,M_P_Burst_Transfer_Configuration_t copy_eM_P_Burst_Transfer_Configuration)
{
 8000614:	b490      	push	{r4, r7}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	460b      	mov	r3, r1
 8000620:	71bb      	strb	r3, [r7, #6]
 8000622:	4613      	mov	r3, r2
 8000624:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_PBURST);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 800062a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	440b      	add	r3, r1
 800063a:	3310      	adds	r3, #16
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	4917      	ldr	r1, [pc, #92]	; (80006a0 <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 8000642:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000646:	79ba      	ldrb	r2, [r7, #6]
 8000648:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800064c:	4613      	mov	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	4413      	add	r3, r2
 8000652:	00db      	lsls	r3, r3, #3
 8000654:	4403      	add	r3, r0
 8000656:	3310      	adds	r3, #16
 8000658:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eM_P_Burst_Transfer_Configuration<<DMA_SxCR_PBURST);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 800065e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000662:	79ba      	ldrb	r2, [r7, #6]
 8000664:	4613      	mov	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	4413      	add	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	440b      	add	r3, r1
 800066e:	3310      	adds	r3, #16
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	797a      	ldrb	r2, [r7, #5]
 8000674:	0552      	lsls	r2, r2, #21
 8000676:	4614      	mov	r4, r2
 8000678:	79fa      	ldrb	r2, [r7, #7]
 800067a:	4909      	ldr	r1, [pc, #36]	; (80006a0 <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 800067c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000680:	79ba      	ldrb	r2, [r7, #6]
 8000682:	ea43 0104 	orr.w	r1, r3, r4
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	00db      	lsls	r3, r3, #3
 800068e:	4403      	add	r3, r0
 8000690:	3310      	adds	r3, #16
 8000692:	6019      	str	r1, [r3, #0]

}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bc90      	pop	{r4, r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000018 	.word	0x20000018

080006a4 <DMA_vSetDMAStreamCurrentMemoryTarget>:
void DMA_vSetDMAStreamCurrentMemoryTarget(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Current_memory_target_t copy_Current_memory_target)
{
 80006a4:	b490      	push	{r4, r7}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
 80006ae:	460b      	mov	r3, r1
 80006b0:	71bb      	strb	r3, [r7, #6]
 80006b2:	4613      	mov	r3, r2
 80006b4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_CT);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 80006ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	440b      	add	r3, r1
 80006ca:	3310      	adds	r3, #16
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4917      	ldr	r1, [pc, #92]	; (8000730 <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 80006d2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80006d6:	79ba      	ldrb	r2, [r7, #6]
 80006d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80006dc:	4613      	mov	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4403      	add	r3, r0
 80006e6:	3310      	adds	r3, #16
 80006e8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_Current_memory_target<<DMA_SxCR_CT);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 80006ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	440b      	add	r3, r1
 80006fe:	3310      	adds	r3, #16
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	797a      	ldrb	r2, [r7, #5]
 8000704:	04d2      	lsls	r2, r2, #19
 8000706:	4614      	mov	r4, r2
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	4909      	ldr	r1, [pc, #36]	; (8000730 <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 800070c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	ea43 0104 	orr.w	r1, r3, r4
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	4403      	add	r3, r0
 8000720:	3310      	adds	r3, #16
 8000722:	6019      	str	r1, [r3, #0]

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bc90      	pop	{r4, r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000018 	.word	0x20000018

08000734 <DMA_vSetDMAStreamDoubleBufferMode>:
void DMA_vSetDMAStreamDoubleBufferMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,double_buffer_mode_t copy_double_buffer_mode)
{
 8000734:	b490      	push	{r4, r7}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	460b      	mov	r3, r1
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	4613      	mov	r3, r2
 8000744:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_DBM);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 800074a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800074e:	79ba      	ldrb	r2, [r7, #6]
 8000750:	4613      	mov	r3, r2
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4413      	add	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	440b      	add	r3, r1
 800075a:	3310      	adds	r3, #16
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	79fa      	ldrb	r2, [r7, #7]
 8000760:	4917      	ldr	r1, [pc, #92]	; (80007c0 <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 8000762:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	4403      	add	r3, r0
 8000776:	3310      	adds	r3, #16
 8000778:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_double_buffer_mode<<DMA_SxCR_DBM);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 800077e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000782:	79ba      	ldrb	r2, [r7, #6]
 8000784:	4613      	mov	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4413      	add	r3, r2
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	440b      	add	r3, r1
 800078e:	3310      	adds	r3, #16
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	797a      	ldrb	r2, [r7, #5]
 8000794:	0492      	lsls	r2, r2, #18
 8000796:	4614      	mov	r4, r2
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	4909      	ldr	r1, [pc, #36]	; (80007c0 <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 800079c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80007a0:	79ba      	ldrb	r2, [r7, #6]
 80007a2:	ea43 0104 	orr.w	r1, r3, r4
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	4403      	add	r3, r0
 80007b0:	3310      	adds	r3, #16
 80007b2:	6019      	str	r1, [r3, #0]

}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc90      	pop	{r4, r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000018 	.word	0x20000018

080007c4 <DMA_vSetDMAStreamPriorityLevel>:
void DMA_vSetDMAStreamPriorityLevel(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,priority_level_t copy_epriority_level)
{
 80007c4:	b490      	push	{r4, r7}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	460b      	mov	r3, r1
 80007d0:	71bb      	strb	r3, [r7, #6]
 80007d2:	4613      	mov	r3, r2
 80007d4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_PL);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a1d      	ldr	r2, [pc, #116]	; (8000850 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 80007da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80007de:	79ba      	ldrb	r2, [r7, #6]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	440b      	add	r3, r1
 80007ea:	3310      	adds	r3, #16
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	4917      	ldr	r1, [pc, #92]	; (8000850 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 80007f2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80007f6:	79ba      	ldrb	r2, [r7, #6]
 80007f8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	4403      	add	r3, r0
 8000806:	3310      	adds	r3, #16
 8000808:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_epriority_level<<DMA_SxCR_PL);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 800080e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000812:	79ba      	ldrb	r2, [r7, #6]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	3310      	adds	r3, #16
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	797a      	ldrb	r2, [r7, #5]
 8000824:	0412      	lsls	r2, r2, #16
 8000826:	4614      	mov	r4, r2
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	4909      	ldr	r1, [pc, #36]	; (8000850 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 800082c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000830:	79ba      	ldrb	r2, [r7, #6]
 8000832:	ea43 0104 	orr.w	r1, r3, r4
 8000836:	4613      	mov	r3, r2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4413      	add	r3, r2
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4403      	add	r3, r0
 8000840:	3310      	adds	r3, #16
 8000842:	6019      	str	r1, [r3, #0]

}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bc90      	pop	{r4, r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000018 	.word	0x20000018

08000854 <DMA_vSetDMAStreamIncreamentalOffset>:
void DMA_vSetDMAStreamIncreamentalOffset(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,peripheral_increment_offset_size_t copy_eperipheral_increment_offset_size)
{
 8000854:	b490      	push	{r4, r7}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
 800085e:	460b      	mov	r3, r1
 8000860:	71bb      	strb	r3, [r7, #6]
 8000862:	4613      	mov	r3, r2
 8000864:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_PINCOS);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4a1d      	ldr	r2, [pc, #116]	; (80008e0 <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 800086a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800086e:	79ba      	ldrb	r2, [r7, #6]
 8000870:	4613      	mov	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	4413      	add	r3, r2
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	440b      	add	r3, r1
 800087a:	3310      	adds	r3, #16
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	4917      	ldr	r1, [pc, #92]	; (80008e0 <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 8000882:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000886:	79ba      	ldrb	r2, [r7, #6]
 8000888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800088c:	4613      	mov	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	4413      	add	r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4403      	add	r3, r0
 8000896:	3310      	adds	r3, #16
 8000898:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eperipheral_increment_offset_size<<DMA_SxCR_PINCOS);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 800089e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008a2:	79ba      	ldrb	r2, [r7, #6]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	440b      	add	r3, r1
 80008ae:	3310      	adds	r3, #16
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	797a      	ldrb	r2, [r7, #5]
 80008b4:	03d2      	lsls	r2, r2, #15
 80008b6:	4614      	mov	r4, r2
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	4909      	ldr	r1, [pc, #36]	; (80008e0 <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 80008bc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	ea43 0104 	orr.w	r1, r3, r4
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4403      	add	r3, r0
 80008d0:	3310      	adds	r3, #16
 80008d2:	6019      	str	r1, [r3, #0]


}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc90      	pop	{r4, r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000018 	.word	0x20000018

080008e4 <DMA_vSetDMAStreamMemorySize>:
void DMA_vSetDMAStreamMemorySize(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,P_M_SIZE_t copy_eP_M_SIZE)
{
 80008e4:	b490      	push	{r4, r7}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	460b      	mov	r3, r1
 80008f0:	71bb      	strb	r3, [r7, #6]
 80008f2:	4613      	mov	r3, r2
 80008f4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_MSIZE);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <DMA_vSetDMAStreamMemorySize+0x8c>)
 80008fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008fe:	79ba      	ldrb	r2, [r7, #6]
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	440b      	add	r3, r1
 800090a:	3310      	adds	r3, #16
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	79fa      	ldrb	r2, [r7, #7]
 8000910:	4917      	ldr	r1, [pc, #92]	; (8000970 <DMA_vSetDMAStreamMemorySize+0x8c>)
 8000912:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	f423 41c0 	bic.w	r1, r3, #24576	; 0x6000
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4403      	add	r3, r0
 8000926:	3310      	adds	r3, #16
 8000928:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eP_M_SIZE<<DMA_SxCR_MSIZE);
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <DMA_vSetDMAStreamMemorySize+0x8c>)
 800092e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000932:	79ba      	ldrb	r2, [r7, #6]
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	440b      	add	r3, r1
 800093e:	3310      	adds	r3, #16
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	797a      	ldrb	r2, [r7, #5]
 8000944:	0352      	lsls	r2, r2, #13
 8000946:	4614      	mov	r4, r2
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	4909      	ldr	r1, [pc, #36]	; (8000970 <DMA_vSetDMAStreamMemorySize+0x8c>)
 800094c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	ea43 0104 	orr.w	r1, r3, r4
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	4403      	add	r3, r0
 8000960:	3310      	adds	r3, #16
 8000962:	6019      	str	r1, [r3, #0]

}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bc90      	pop	{r4, r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000018 	.word	0x20000018

08000974 <DMA_vSetDMAStreamPeripheralSize>:
void DMA_vSetDMAStreamPeripheralSize(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,P_M_SIZE_t copy_eP_M_SIZE)
{
 8000974:	b490      	push	{r4, r7}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	460b      	mov	r3, r1
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	4613      	mov	r3, r2
 8000984:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_PSIZE);
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 800098a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800098e:	79ba      	ldrb	r2, [r7, #6]
 8000990:	4613      	mov	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4413      	add	r3, r2
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	440b      	add	r3, r1
 800099a:	3310      	adds	r3, #16
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	4917      	ldr	r1, [pc, #92]	; (8000a00 <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 80009a2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80009a6:	79ba      	ldrb	r2, [r7, #6]
 80009a8:	f423 51c0 	bic.w	r1, r3, #6144	; 0x1800
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	4403      	add	r3, r0
 80009b6:	3310      	adds	r3, #16
 80009b8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eP_M_SIZE<<DMA_SxCR_PSIZE);
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 80009be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	440b      	add	r3, r1
 80009ce:	3310      	adds	r3, #16
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	797a      	ldrb	r2, [r7, #5]
 80009d4:	02d2      	lsls	r2, r2, #11
 80009d6:	4614      	mov	r4, r2
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	4909      	ldr	r1, [pc, #36]	; (8000a00 <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 80009dc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80009e0:	79ba      	ldrb	r2, [r7, #6]
 80009e2:	ea43 0104 	orr.w	r1, r3, r4
 80009e6:	4613      	mov	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	4403      	add	r3, r0
 80009f0:	3310      	adds	r3, #16
 80009f2:	6019      	str	r1, [r3, #0]


}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc90      	pop	{r4, r7}
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000018 	.word	0x20000018

08000a04 <DMA_vSetDMAMemoryIncrementMode>:
void DMA_vSetDMAMemoryIncrementMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Memory_Increment_Mode_t copy_eMemory_Increment_Mode)
{
 8000a04:	b490      	push	{r4, r7}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	71bb      	strb	r3, [r7, #6]
 8000a12:	4613      	mov	r3, r2
 8000a14:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_MINC);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 8000a1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a1e:	79ba      	ldrb	r2, [r7, #6]
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	440b      	add	r3, r1
 8000a2a:	3310      	adds	r3, #16
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	4917      	ldr	r1, [pc, #92]	; (8000a90 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 8000a32:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000a36:	79ba      	ldrb	r2, [r7, #6]
 8000a38:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4403      	add	r3, r0
 8000a46:	3310      	adds	r3, #16
 8000a48:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eMemory_Increment_Mode<<DMA_SxCR_MINC);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 8000a4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a52:	79ba      	ldrb	r2, [r7, #6]
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3310      	adds	r3, #16
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	797a      	ldrb	r2, [r7, #5]
 8000a64:	0292      	lsls	r2, r2, #10
 8000a66:	4614      	mov	r4, r2
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4909      	ldr	r1, [pc, #36]	; (8000a90 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 8000a6c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000a70:	79ba      	ldrb	r2, [r7, #6]
 8000a72:	ea43 0104 	orr.w	r1, r3, r4
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	4403      	add	r3, r0
 8000a80:	3310      	adds	r3, #16
 8000a82:	6019      	str	r1, [r3, #0]

}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc90      	pop	{r4, r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000018 	.word	0x20000018

08000a94 <DMA_vSetDMAPeripheralIncrementMode>:
void DMA_vSetDMAPeripheralIncrementMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,peripheral_Increment_Mode_t copy_peripheral_Increment_Mode)
{
 8000a94:	b490      	push	{r4, r7}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	71bb      	strb	r3, [r7, #6]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_PINC);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 8000aaa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	440b      	add	r3, r1
 8000aba:	3310      	adds	r3, #16
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	4917      	ldr	r1, [pc, #92]	; (8000b20 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 8000ac2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8000acc:	4613      	mov	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4403      	add	r3, r0
 8000ad6:	3310      	adds	r3, #16
 8000ad8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_peripheral_Increment_Mode<<DMA_SxCR_PINC);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 8000ade:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ae2:	79ba      	ldrb	r2, [r7, #6]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	4413      	add	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	440b      	add	r3, r1
 8000aee:	3310      	adds	r3, #16
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	797a      	ldrb	r2, [r7, #5]
 8000af4:	0252      	lsls	r2, r2, #9
 8000af6:	4614      	mov	r4, r2
 8000af8:	79fa      	ldrb	r2, [r7, #7]
 8000afa:	4909      	ldr	r1, [pc, #36]	; (8000b20 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 8000afc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000b00:	79ba      	ldrb	r2, [r7, #6]
 8000b02:	ea43 0104 	orr.w	r1, r3, r4
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4403      	add	r3, r0
 8000b10:	3310      	adds	r3, #16
 8000b12:	6019      	str	r1, [r3, #0]

}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc90      	pop	{r4, r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000018 	.word	0x20000018

08000b24 <DMA_vSetDMACircularMode>:
void DMA_vSetDMACircularMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,circular_mode_t copy_eCircular_mode)
{
 8000b24:	b490      	push	{r4, r7}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	71bb      	strb	r3, [r7, #6]
 8000b32:	4613      	mov	r3, r2
 8000b34:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_CIRC);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <DMA_vSetDMACircularMode+0x8c>)
 8000b3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000b3e:	79ba      	ldrb	r2, [r7, #6]
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	4917      	ldr	r1, [pc, #92]	; (8000bb0 <DMA_vSetDMACircularMode+0x8c>)
 8000b52:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4413      	add	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4403      	add	r3, r0
 8000b66:	3310      	adds	r3, #16
 8000b68:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eCircular_mode<<DMA_SxCR_CIRC);
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <DMA_vSetDMACircularMode+0x8c>)
 8000b6e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000b72:	79ba      	ldrb	r2, [r7, #6]
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3310      	adds	r3, #16
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	797a      	ldrb	r2, [r7, #5]
 8000b84:	0212      	lsls	r2, r2, #8
 8000b86:	4614      	mov	r4, r2
 8000b88:	79fa      	ldrb	r2, [r7, #7]
 8000b8a:	4909      	ldr	r1, [pc, #36]	; (8000bb0 <DMA_vSetDMACircularMode+0x8c>)
 8000b8c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000b90:	79ba      	ldrb	r2, [r7, #6]
 8000b92:	ea43 0104 	orr.w	r1, r3, r4
 8000b96:	4613      	mov	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	4403      	add	r3, r0
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	6019      	str	r1, [r3, #0]

}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc90      	pop	{r4, r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000018 	.word	0x20000018

08000bb4 <DMA_vSetDMAStreamDataTransferDirection>:
void DMA_vSetDMAStreamDataTransferDirection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,data_transfer_direction_t copy_edata_transfer_direction)
{
 8000bb4:	b490      	push	{r4, r7}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	71bb      	strb	r3, [r7, #6]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_DIR);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000bca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000bce:	79ba      	ldrb	r2, [r7, #6]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	3310      	adds	r3, #16
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	4917      	ldr	r1, [pc, #92]	; (8000c40 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000be2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000be6:	79ba      	ldrb	r2, [r7, #6]
 8000be8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000bec:	4613      	mov	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3310      	adds	r3, #16
 8000bf8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_edata_transfer_direction<<DMA_SxCR_DIR);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000bfe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c02:	79ba      	ldrb	r2, [r7, #6]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3310      	adds	r3, #16
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	797a      	ldrb	r2, [r7, #5]
 8000c14:	0192      	lsls	r2, r2, #6
 8000c16:	4614      	mov	r4, r2
 8000c18:	79fa      	ldrb	r2, [r7, #7]
 8000c1a:	4909      	ldr	r1, [pc, #36]	; (8000c40 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000c1c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	ea43 0104 	orr.w	r1, r3, r4
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	4403      	add	r3, r0
 8000c30:	3310      	adds	r3, #16
 8000c32:	6019      	str	r1, [r3, #0]


}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc90      	pop	{r4, r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000018 	.word	0x20000018

08000c44 <DMA_vSetDMAStreamPeripheralFlowController>:
void DMA_vSetDMAStreamPeripheralFlowController(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,peripheral_flow_controller_t copy_eperipheral_flow_controller)
{
 8000c44:	b490      	push	{r4, r7}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	71bb      	strb	r3, [r7, #6]
 8000c52:	4613      	mov	r3, r2
 8000c54:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_PFCTRL);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000c5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c5e:	79ba      	ldrb	r2, [r7, #6]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	440b      	add	r3, r1
 8000c6a:	3310      	adds	r3, #16
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	4917      	ldr	r1, [pc, #92]	; (8000cd0 <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000c72:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	f023 0120 	bic.w	r1, r3, #32
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4403      	add	r3, r0
 8000c86:	3310      	adds	r3, #16
 8000c88:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eperipheral_flow_controller<<DMA_SxCR_PFCTRL);
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000c8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c92:	79ba      	ldrb	r2, [r7, #6]
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3310      	adds	r3, #16
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	797a      	ldrb	r2, [r7, #5]
 8000ca4:	0152      	lsls	r2, r2, #5
 8000ca6:	4614      	mov	r4, r2
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000cac:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000cb0:	79ba      	ldrb	r2, [r7, #6]
 8000cb2:	ea43 0104 	orr.w	r1, r3, r4
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4403      	add	r3, r0
 8000cc0:	3310      	adds	r3, #16
 8000cc2:	6019      	str	r1, [r3, #0]

}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc90      	pop	{r4, r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000018 	.word	0x20000018

08000cd4 <DMA_vSetTransferCompleteInterrupt>:
void DMA_vSetTransferCompleteInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,transfer_complete_interrupt_enable_t copy_etransfer_complete_interrupt_enable)
{
 8000cd4:	b490      	push	{r4, r7}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	71bb      	strb	r3, [r7, #6]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_TCIE);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000cea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000cee:	79ba      	ldrb	r2, [r7, #6]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3310      	adds	r3, #16
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	4917      	ldr	r1, [pc, #92]	; (8000d60 <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000d02:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	f023 0110 	bic.w	r1, r3, #16
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4403      	add	r3, r0
 8000d16:	3310      	adds	r3, #16
 8000d18:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_etransfer_complete_interrupt_enable<<DMA_SxCR_TCIE);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000d1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d22:	79ba      	ldrb	r2, [r7, #6]
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3310      	adds	r3, #16
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	797a      	ldrb	r2, [r7, #5]
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	4614      	mov	r4, r2
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	4909      	ldr	r1, [pc, #36]	; (8000d60 <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000d3c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	ea43 0104 	orr.w	r1, r3, r4
 8000d46:	4613      	mov	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4403      	add	r3, r0
 8000d50:	3310      	adds	r3, #16
 8000d52:	6019      	str	r1, [r3, #0]


}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc90      	pop	{r4, r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000018 	.word	0x20000018

08000d64 <DMA_vSetHalfTransferCompleteInterrupt>:
void DMA_vSetHalfTransferCompleteInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,half_transfer_interrupt_enable_t half_transfer_interrupt_enable)
{
 8000d64:	b490      	push	{r4, r7}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	71bb      	strb	r3, [r7, #6]
 8000d72:	4613      	mov	r3, r2
 8000d74:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_HTIE);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000d7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d7e:	79ba      	ldrb	r2, [r7, #6]
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	3310      	adds	r3, #16
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	79fa      	ldrb	r2, [r7, #7]
 8000d90:	4917      	ldr	r1, [pc, #92]	; (8000df0 <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000d92:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	f023 0108 	bic.w	r1, r3, #8
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4403      	add	r3, r0
 8000da6:	3310      	adds	r3, #16
 8000da8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (half_transfer_interrupt_enable<<DMA_SxCR_HTIE);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000dae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000db2:	79ba      	ldrb	r2, [r7, #6]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3310      	adds	r3, #16
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	797a      	ldrb	r2, [r7, #5]
 8000dc4:	00d2      	lsls	r2, r2, #3
 8000dc6:	4614      	mov	r4, r2
 8000dc8:	79fa      	ldrb	r2, [r7, #7]
 8000dca:	4909      	ldr	r1, [pc, #36]	; (8000df0 <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000dcc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000dd0:	79ba      	ldrb	r2, [r7, #6]
 8000dd2:	ea43 0104 	orr.w	r1, r3, r4
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4403      	add	r3, r0
 8000de0:	3310      	adds	r3, #16
 8000de2:	6019      	str	r1, [r3, #0]

}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc90      	pop	{r4, r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000018 	.word	0x20000018

08000df4 <DMA_vSetTransferErrorInterrupt>:
void DMA_vSetTransferErrorInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,transfer_error_interrupt_enable_T copy_etransfer_error_interrupt_enable)
{
 8000df4:	b490      	push	{r4, r7}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	71bb      	strb	r3, [r7, #6]
 8000e02:	4613      	mov	r3, r2
 8000e04:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_TEIE);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000e0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3310      	adds	r3, #16
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	4917      	ldr	r1, [pc, #92]	; (8000e80 <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000e22:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000e26:	79ba      	ldrb	r2, [r7, #6]
 8000e28:	f023 0104 	bic.w	r1, r3, #4
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4403      	add	r3, r0
 8000e36:	3310      	adds	r3, #16
 8000e38:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_etransfer_error_interrupt_enable<<DMA_SxCR_TEIE);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000e3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e42:	79ba      	ldrb	r2, [r7, #6]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	3310      	adds	r3, #16
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	797a      	ldrb	r2, [r7, #5]
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	4614      	mov	r4, r2
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	4909      	ldr	r1, [pc, #36]	; (8000e80 <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000e5c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000e60:	79ba      	ldrb	r2, [r7, #6]
 8000e62:	ea43 0104 	orr.w	r1, r3, r4
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4403      	add	r3, r0
 8000e70:	3310      	adds	r3, #16
 8000e72:	6019      	str	r1, [r3, #0]

}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc90      	pop	{r4, r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000018 	.word	0x20000018

08000e84 <DMA_vSetDirectModeErrorInterrupt>:
void DMA_vSetDirectModeErrorInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,direct_mode_error_interrupt_enable_t copy_edirect_mode_error_interrupt_enable)
{
 8000e84:	b490      	push	{r4, r7}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	4613      	mov	r3, r2
 8000e94:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_DMEIE);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000e9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e9e:	79ba      	ldrb	r2, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3310      	adds	r3, #16
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	79fa      	ldrb	r2, [r7, #7]
 8000eb0:	4917      	ldr	r1, [pc, #92]	; (8000f10 <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000eb2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000eb6:	79ba      	ldrb	r2, [r7, #6]
 8000eb8:	f023 0102 	bic.w	r1, r3, #2
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4403      	add	r3, r0
 8000ec6:	3310      	adds	r3, #16
 8000ec8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_edirect_mode_error_interrupt_enable<<DMA_SxCR_DMEIE);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000ece:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ed2:	79ba      	ldrb	r2, [r7, #6]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3310      	adds	r3, #16
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	797a      	ldrb	r2, [r7, #5]
 8000ee4:	0052      	lsls	r2, r2, #1
 8000ee6:	4614      	mov	r4, r2
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	4909      	ldr	r1, [pc, #36]	; (8000f10 <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000eec:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000ef0:	79ba      	ldrb	r2, [r7, #6]
 8000ef2:	ea43 0104 	orr.w	r1, r3, r4
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4403      	add	r3, r0
 8000f00:	3310      	adds	r3, #16
 8000f02:	6019      	str	r1, [r3, #0]

}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc90      	pop	{r4, r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000018 	.word	0x20000018

08000f14 <DMA_vEnableStream>:
void DMA_vEnableStream(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection, stream_enable_t copy_estream_enable)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_EN);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <DMA_vEnableStream+0x88>)
 8000f2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	79fa      	ldrb	r2, [r7, #7]
 8000f40:	4916      	ldr	r1, [pc, #88]	; (8000f9c <DMA_vEnableStream+0x88>)
 8000f42:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000f46:	79ba      	ldrb	r2, [r7, #6]
 8000f48:	f023 0101 	bic.w	r1, r3, #1
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4403      	add	r3, r0
 8000f56:	3310      	adds	r3, #16
 8000f58:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_estream_enable<<DMA_SxCR_EN);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <DMA_vEnableStream+0x88>)
 8000f5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f62:	79ba      	ldrb	r2, [r7, #6]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3310      	adds	r3, #16
 8000f70:	6819      	ldr	r1, [r3, #0]
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	4809      	ldr	r0, [pc, #36]	; (8000f9c <DMA_vEnableStream+0x88>)
 8000f78:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8000f7c:	79ba      	ldrb	r2, [r7, #6]
 8000f7e:	4319      	orrs	r1, r3
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4403      	add	r3, r0
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	6019      	str	r1, [r3, #0]

}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000018 	.word	0x20000018

08000fa0 <DMA_vSetNumberOfDataToBeTransefered>:
void DMA_vSetNumberOfDataToBeTransefered(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,uint16_t copy_u16NumberOfData)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
 8000faa:	460b      	mov	r3, r1
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	80bb      	strh	r3, [r7, #4]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxNDTR = (copy_u16NumberOfData<<0);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <DMA_vSetNumberOfDataToBeTransefered+0x38>)
 8000fb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fba:	79ba      	ldrb	r2, [r7, #6]
 8000fbc:	88b9      	ldrh	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4403      	add	r3, r0
 8000fc8:	3314      	adds	r3, #20
 8000fca:	6019      	str	r1, [r3, #0]

}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	20000018 	.word	0x20000018

08000fdc <DMA_vSetAddressOfPeripheral>:
void DMA_vSetAddressOfPeripheral(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,uint32_t copy_u32AddressOfPeripheral)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	603a      	str	r2, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	71bb      	strb	r3, [r7, #6]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxPAR = (copy_u32AddressOfPeripheral<<0);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <DMA_vSetAddressOfPeripheral+0x38>)
 8000ff0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	440b      	add	r3, r1
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	601a      	str	r2, [r3, #0]

}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000018 	.word	0x20000018

08001018 <DMA_vSetAddressOfMemory0>:
void DMA_vSetAddressOfMemory0(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,uint32_t copy_u32AddressOfMemory0)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	603a      	str	r2, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	460b      	mov	r3, r1
 8001026:	71bb      	strb	r3, [r7, #6]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxM0AR = (copy_u32AddressOfMemory0<<0);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <DMA_vSetAddressOfMemory0+0x38>)
 800102c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3304      	adds	r3, #4
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	601a      	str	r2, [r3, #0]

}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000018 	.word	0x20000018

08001054 <DMA_vSetFIFOErrorInterrupt>:
{
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxM1AR = (copy_u32AddressOfMemory1<<0);

}
void DMA_vSetFIFOErrorInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,FIFO_error_interrupt_enable_t copy_eFIFO_error_interrupt_enable)
{
 8001054:	b490      	push	{r4, r7}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	460b      	mov	r3, r1
 8001060:	71bb      	strb	r3, [r7, #6]
 8001062:	4613      	mov	r3, r2
 8001064:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR &=~ (0b1<<DMA_SxFCR_FEIE);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <DMA_vSetFIFOErrorInterrupt+0x8c>)
 800106a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800106e:	79ba      	ldrb	r2, [r7, #6]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3324      	adds	r3, #36	; 0x24
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	4917      	ldr	r1, [pc, #92]	; (80010e0 <DMA_vSetFIFOErrorInterrupt+0x8c>)
 8001082:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8001086:	79ba      	ldrb	r2, [r7, #6]
 8001088:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4403      	add	r3, r0
 8001096:	3324      	adds	r3, #36	; 0x24
 8001098:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_eFIFO_error_interrupt_enable<<DMA_SxFCR_FEIE);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <DMA_vSetFIFOErrorInterrupt+0x8c>)
 800109e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80010a2:	79ba      	ldrb	r2, [r7, #6]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	440b      	add	r3, r1
 80010ae:	3324      	adds	r3, #36	; 0x24
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	797a      	ldrb	r2, [r7, #5]
 80010b4:	01d2      	lsls	r2, r2, #7
 80010b6:	4614      	mov	r4, r2
 80010b8:	79fa      	ldrb	r2, [r7, #7]
 80010ba:	4909      	ldr	r1, [pc, #36]	; (80010e0 <DMA_vSetFIFOErrorInterrupt+0x8c>)
 80010bc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80010c0:	79ba      	ldrb	r2, [r7, #6]
 80010c2:	ea43 0104 	orr.w	r1, r3, r4
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4403      	add	r3, r0
 80010d0:	3324      	adds	r3, #36	; 0x24
 80010d2:	6019      	str	r1, [r3, #0]

}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc90      	pop	{r4, r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000018 	.word	0x20000018

080010e4 <DMA_vSetDirectModeStatus>:
//uint8_t DMA_u8GetFIFOStatus();
void DMA_vSetDirectModeStatus(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,direct_mode_disable_t copy_edirect_mode_disable)
{
 80010e4:	b490      	push	{r4, r7}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	460b      	mov	r3, r1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	4613      	mov	r3, r2
 80010f4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR &=~ (0b1<<DMA_SxFCR_DMDIS);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <DMA_vSetDirectModeStatus+0x8c>)
 80010fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80010fe:	79ba      	ldrb	r2, [r7, #6]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	3324      	adds	r3, #36	; 0x24
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	4917      	ldr	r1, [pc, #92]	; (8001170 <DMA_vSetDirectModeStatus+0x8c>)
 8001112:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8001116:	79ba      	ldrb	r2, [r7, #6]
 8001118:	f023 0104 	bic.w	r1, r3, #4
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4403      	add	r3, r0
 8001126:	3324      	adds	r3, #36	; 0x24
 8001128:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_edirect_mode_disable<<DMA_SxFCR_DMDIS);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a10      	ldr	r2, [pc, #64]	; (8001170 <DMA_vSetDirectModeStatus+0x8c>)
 800112e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3324      	adds	r3, #36	; 0x24
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	797a      	ldrb	r2, [r7, #5]
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4614      	mov	r4, r2
 8001148:	79fa      	ldrb	r2, [r7, #7]
 800114a:	4909      	ldr	r1, [pc, #36]	; (8001170 <DMA_vSetDirectModeStatus+0x8c>)
 800114c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8001150:	79ba      	ldrb	r2, [r7, #6]
 8001152:	ea43 0104 	orr.w	r1, r3, r4
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4403      	add	r3, r0
 8001160:	3324      	adds	r3, #36	; 0x24
 8001162:	6019      	str	r1, [r3, #0]


}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bc90      	pop	{r4, r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000018 	.word	0x20000018

08001174 <DMA_vSetFIFOThresholdSelection>:
void DMA_vSetFIFOThresholdSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,FIFO_threshold_t copy_eFIFO_threshold)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	460b      	mov	r3, r1
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	4613      	mov	r3, r2
 8001184:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR &=~ (0b11<<DMA_SxFCR_FTH);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <DMA_vSetFIFOThresholdSelection+0x88>)
 800118a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800118e:	79ba      	ldrb	r2, [r7, #6]
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3324      	adds	r3, #36	; 0x24
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	79fa      	ldrb	r2, [r7, #7]
 80011a0:	4916      	ldr	r1, [pc, #88]	; (80011fc <DMA_vSetFIFOThresholdSelection+0x88>)
 80011a2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80011a6:	79ba      	ldrb	r2, [r7, #6]
 80011a8:	f023 0103 	bic.w	r1, r3, #3
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4403      	add	r3, r0
 80011b6:	3324      	adds	r3, #36	; 0x24
 80011b8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_eFIFO_threshold<<DMA_SxFCR_FTH);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <DMA_vSetFIFOThresholdSelection+0x88>)
 80011be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011c2:	79ba      	ldrb	r2, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	440b      	add	r3, r1
 80011ce:	3324      	adds	r3, #36	; 0x24
 80011d0:	6819      	ldr	r1, [r3, #0]
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <DMA_vSetFIFOThresholdSelection+0x88>)
 80011d8:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80011dc:	79ba      	ldrb	r2, [r7, #6]
 80011de:	4319      	orrs	r1, r3
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4403      	add	r3, r0
 80011ea:	3324      	adds	r3, #36	; 0x24
 80011ec:	6019      	str	r1, [r3, #0]

}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000018 	.word	0x20000018

08001200 <DMA_vStart>:


void DMA_vStart(DMA_HandleTypeDef_t* copy_eDMAConfig,uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
	if (copy_eDMAConfig->Init.Direction == memory_to_peripheral)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	78db      	ldrb	r3, [r3, #3]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d110      	bne.n	8001238 <DMA_vStart+0x38>
	{
		DMA_vSetAddressOfMemory0(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,SrcAddress);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	7858      	ldrb	r0, [r3, #1]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fef9 	bl	8001018 <DMA_vSetAddressOfMemory0>
		DMA_vSetAddressOfPeripheral(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DstAddress);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	7858      	ldrb	r0, [r3, #1]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	789b      	ldrb	r3, [r3, #2]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fed3 	bl	8000fdc <DMA_vSetAddressOfPeripheral>
 8001236:	e00f      	b.n	8001258 <DMA_vStart+0x58>

	}
	else
	{
		DMA_vSetAddressOfMemory0(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DstAddress);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	7858      	ldrb	r0, [r3, #1]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	789b      	ldrb	r3, [r3, #2]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fee8 	bl	8001018 <DMA_vSetAddressOfMemory0>
		DMA_vSetAddressOfPeripheral(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,SrcAddress);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	7858      	ldrb	r0, [r3, #1]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	789b      	ldrb	r3, [r3, #2]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fec2 	bl	8000fdc <DMA_vSetAddressOfPeripheral>

	}
	DMA_vSetNumberOfDataToBeTransefered(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DataLength);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	7858      	ldrb	r0, [r3, #1]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	789b      	ldrb	r3, [r3, #2]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b292      	uxth	r2, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fe9b 	bl	8000fa0 <DMA_vSetNumberOfDataToBeTransefered>
	DMA_vEnableStream(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,stream_enabled);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	7858      	ldrb	r0, [r3, #1]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	789b      	ldrb	r3, [r3, #2]
 8001272:	2201      	movs	r2, #1
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fe4d 	bl	8000f14 <DMA_vEnableStream>


}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <DMA_vStart_IT>:
void DMA_vStart_IT(DMA_HandleTypeDef_t* copy_eDMAConfig,uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	603b      	str	r3, [r7, #0]
	if (copy_eDMAConfig->Init.Direction == memory_to_peripheral)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d110      	bne.n	80012ba <DMA_vStart_IT+0x38>
	{
		DMA_vSetAddressOfMemory0(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,SrcAddress);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	7858      	ldrb	r0, [r3, #1]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	789b      	ldrb	r3, [r3, #2]
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff feb8 	bl	8001018 <DMA_vSetAddressOfMemory0>
		DMA_vSetAddressOfPeripheral(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DstAddress);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	7858      	ldrb	r0, [r3, #1]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	789b      	ldrb	r3, [r3, #2]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fe92 	bl	8000fdc <DMA_vSetAddressOfPeripheral>
 80012b8:	e00f      	b.n	80012da <DMA_vStart_IT+0x58>

	}
	else
	{
		DMA_vSetAddressOfMemory0(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DstAddress);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	7858      	ldrb	r0, [r3, #1]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fea7 	bl	8001018 <DMA_vSetAddressOfMemory0>
		DMA_vSetAddressOfPeripheral(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,SrcAddress);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	7858      	ldrb	r0, [r3, #1]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fe81 	bl	8000fdc <DMA_vSetAddressOfPeripheral>

	}
	DMA_vSetNumberOfDataToBeTransefered(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DataLength);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	7858      	ldrb	r0, [r3, #1]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	789b      	ldrb	r3, [r3, #2]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	b292      	uxth	r2, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fe5a 	bl	8000fa0 <DMA_vSetNumberOfDataToBeTransefered>
	DMA_vSetTransferCompleteInterrupt(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,TC_interrupt_enabled);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	7858      	ldrb	r0, [r3, #1]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fcec 	bl	8000cd4 <DMA_vSetTransferCompleteInterrupt>

	DMA_vEnableStream(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,stream_enabled);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	7858      	ldrb	r0, [r3, #1]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	2201      	movs	r2, #1
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fe04 	bl	8000f14 <DMA_vEnableStream>


}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <DMA_vReadFlagStatus>:
void DMA_vReadFlagStatus(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number,DMA_Interrupt_t copy_eDMA_Interrupt,uint8_t *interruptStatusFlag)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	4603      	mov	r3, r0
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	460b      	mov	r3, r1
 8001322:	71bb      	strb	r3, [r7, #6]
 8001324:	4613      	mov	r3, r2
 8001326:	717b      	strb	r3, [r7, #5]

	uint8_t flagShift=(uint8_t)copy_eDMA_Interrupt+6*(((uint8_t)Stream_Number%4))+(((((uint8_t)Stream_Number%4))/2)*4);
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	085b      	lsrs	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4413      	add	r3, r2
 800134c:	b2da      	uxtb	r2, r3
 800134e:	797b      	ldrb	r3, [r7, #5]
 8001350:	4413      	add	r3, r2
 8001352:	73fb      	strb	r3, [r7, #15]
	*interruptStatusFlag= READ_BIT(DMAPeripheral[DMA_Number]->DMA_LISR[Stream_Number/4],flagShift );
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <DMA_vReadFlagStatus+0x70>)
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	79ba      	ldrb	r2, [r7, #6]
 800135e:	0892      	lsrs	r2, r2, #2
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	701a      	strb	r2, [r3, #0]

}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20000018 	.word	0x20000018

08001388 <DMA_vClearFlagStatus>:
void DMA_vClearFlagStatus(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number,DMA_Interrupt_t copy_eDMA_Interrupt)
{
 8001388:	b490      	push	{r4, r7}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	460b      	mov	r3, r1
 8001394:	71bb      	strb	r3, [r7, #6]
 8001396:	4613      	mov	r3, r2
 8001398:	717b      	strb	r3, [r7, #5]
	uint8_t flagShift=(uint8_t)copy_eDMA_Interrupt+6*(((uint8_t)Stream_Number%4))+(((((uint8_t)Stream_Number%4))/2)*4);
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	0052      	lsls	r2, r2, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	085b      	lsrs	r3, r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	797b      	ldrb	r3, [r7, #5]
 80013c2:	4413      	add	r3, r2
 80013c4:	73fb      	strb	r3, [r7, #15]
    SET_BIT(DMAPeripheral[DMA_Number]->DMA_LIFCR[Stream_Number/4],flagShift );
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <DMA_vClearFlagStatus+0x7c>)
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	79ba      	ldrb	r2, [r7, #6]
 80013d0:	0892      	lsrs	r2, r2, #2
 80013d2:	b2d0      	uxtb	r0, r2
 80013d4:	4602      	mov	r2, r0
 80013d6:	3202      	adds	r2, #2
 80013d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2101      	movs	r1, #1
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	461c      	mov	r4, r3
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	4906      	ldr	r1, [pc, #24]	; (8001404 <DMA_vClearFlagStatus+0x7c>)
 80013ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ee:	ea42 0104 	orr.w	r1, r2, r4
 80013f2:	1c82      	adds	r2, r0, #2
 80013f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc90      	pop	{r4, r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000018 	.word	0x20000018

08001408 <DMA_vIRQHandler>:

void DMA_vIRQHandler(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	460a      	mov	r2, r1
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	4613      	mov	r3, r2
 8001416:	71bb      	strb	r3, [r7, #6]

	uint8_t flagStatus=0;
 8001418:	2300      	movs	r3, #0
 800141a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i=0 ;i<Total_Number_Of_Interrupts ; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e051      	b.n	80014c6 <DMA_vIRQHandler+0xbe>
	{

		DMA_vReadFlagStatus(DMA_Number,Stream_Number, i, &flagStatus);
 8001422:	f107 030e 	add.w	r3, r7, #14
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79f8      	ldrb	r0, [r7, #7]
 800142c:	f7ff ff72 	bl	8001314 <DMA_vReadFlagStatus>
		if (flagStatus)
 8001430:	7bbb      	ldrb	r3, [r7, #14]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d044      	beq.n	80014c0 <DMA_vIRQHandler+0xb8>
		{
			switch (DMA_Number)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <DMA_vIRQHandler+0x3a>
 800143c:	2b01      	cmp	r3, #1
 800143e:	d01e      	beq.n	800147e <DMA_vIRQHandler+0x76>
					arrDMA2_PtrToFunction[Stream_Number][i]();
				}
				break;
			default:
				/* Do Nothing!*/
				break;
 8001440:	e03e      	b.n	80014c0 <DMA_vIRQHandler+0xb8>
				if (arrDMA1_PtrToFunction[Stream_Number][i] != NULL)
 8001442:	79ba      	ldrb	r2, [r7, #6]
 8001444:	7bf9      	ldrb	r1, [r7, #15]
 8001446:	4824      	ldr	r0, [pc, #144]	; (80014d8 <DMA_vIRQHandler+0xd0>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	440b      	add	r3, r1
 8001452:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d02f      	beq.n	80014ba <DMA_vIRQHandler+0xb2>
					DMA_vClearFlagStatus(DMA_Number,Stream_Number,i);
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	79b9      	ldrb	r1, [r7, #6]
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff91 	bl	8001388 <DMA_vClearFlagStatus>
					arrDMA1_PtrToFunction[Stream_Number][i]();
 8001466:	79ba      	ldrb	r2, [r7, #6]
 8001468:	7bf9      	ldrb	r1, [r7, #15]
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <DMA_vIRQHandler+0xd0>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	440b      	add	r3, r1
 8001476:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800147a:	4798      	blx	r3
				break;
 800147c:	e01d      	b.n	80014ba <DMA_vIRQHandler+0xb2>
				if (arrDMA2_PtrToFunction[Stream_Number][i] != NULL)
 800147e:	79ba      	ldrb	r2, [r7, #6]
 8001480:	7bf9      	ldrb	r1, [r7, #15]
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <DMA_vIRQHandler+0xd4>)
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	440b      	add	r3, r1
 800148e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d013      	beq.n	80014be <DMA_vIRQHandler+0xb6>
					DMA_vClearFlagStatus(DMA_Number,Stream_Number,i);
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	79b9      	ldrb	r1, [r7, #6]
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff73 	bl	8001388 <DMA_vClearFlagStatus>
					arrDMA2_PtrToFunction[Stream_Number][i]();
 80014a2:	79ba      	ldrb	r2, [r7, #6]
 80014a4:	7bf9      	ldrb	r1, [r7, #15]
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <DMA_vIRQHandler+0xd4>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	440b      	add	r3, r1
 80014b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014b6:	4798      	blx	r3
				break;
 80014b8:	e001      	b.n	80014be <DMA_vIRQHandler+0xb6>
				break;
 80014ba:	bf00      	nop
 80014bc:	e000      	b.n	80014c0 <DMA_vIRQHandler+0xb8>
				break;
 80014be:	bf00      	nop
	for (uint8_t i=0 ;i<Total_Number_Of_Interrupts ; i++)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3301      	adds	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d9aa      	bls.n	8001422 <DMA_vIRQHandler+0x1a>
		{
			/* Do Nothing!*/
		}
	}

}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001fc 	.word	0x200001fc
 80014dc:	200002bc 	.word	0x200002bc

080014e0 <DMA_vSetCallBack>:

void DMA_vSetCallBack(DMA_HandleTypeDef_t* copy_eDMAConfig,DMA_Interrupt_t copy_eDMA_Interrupt, void (*PtrToFunc)(void))
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	72fb      	strb	r3, [r7, #11]
	switch (copy_eDMAConfig->Init.DMANumber)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d002      	beq.n	80014fc <DMA_vSetCallBack+0x1c>
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d00e      	beq.n	8001518 <DMA_vSetCallBack+0x38>
		break;
	case DMA_Number_2:
		arrDMA2_PtrToFunction[copy_eDMAConfig->Init.Stream][copy_eDMA_Interrupt]=PtrToFunc;
		break;
	default :
		break;
 80014fa:	e01b      	b.n	8001534 <DMA_vSetCallBack+0x54>
		arrDMA1_PtrToFunction[copy_eDMAConfig->Init.Stream][copy_eDMA_Interrupt]=PtrToFunc;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	4618      	mov	r0, r3
 8001502:	7afa      	ldrb	r2, [r7, #11]
 8001504:	490e      	ldr	r1, [pc, #56]	; (8001540 <DMA_vSetCallBack+0x60>)
 8001506:	4603      	mov	r3, r0
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4403      	add	r3, r0
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001516:	e00d      	b.n	8001534 <DMA_vSetCallBack+0x54>
		arrDMA2_PtrToFunction[copy_eDMAConfig->Init.Stream][copy_eDMA_Interrupt]=PtrToFunc;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	789b      	ldrb	r3, [r3, #2]
 800151c:	4618      	mov	r0, r3
 800151e:	7afa      	ldrb	r2, [r7, #11]
 8001520:	4908      	ldr	r1, [pc, #32]	; (8001544 <DMA_vSetCallBack+0x64>)
 8001522:	4603      	mov	r3, r0
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4403      	add	r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001532:	bf00      	nop
	}

}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	200001fc 	.word	0x200001fc
 8001544:	200002bc 	.word	0x200002bc

08001548 <DMA1_Stream0_IRQHandler>:
/* ==========================
 *           DMA1
 * ========================== */

void DMA1_Stream0_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_0);
 800154c:	2100      	movs	r1, #0
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff ff5a 	bl	8001408 <DMA_vIRQHandler>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_1);
 800155c:	2101      	movs	r1, #1
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff ff52 	bl	8001408 <DMA_vIRQHandler>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_3);
 800156c:	2103      	movs	r1, #3
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ff4a 	bl	8001408 <DMA_vIRQHandler>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_4);
 800157c:	2104      	movs	r1, #4
 800157e:	2000      	movs	r0, #0
 8001580:	f7ff ff42 	bl	8001408 <DMA_vIRQHandler>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_5);
 800158c:	2105      	movs	r1, #5
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff ff3a 	bl	8001408 <DMA_vIRQHandler>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_6);
 800159c:	2106      	movs	r1, #6
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff ff32 	bl	8001408 <DMA_vIRQHandler>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_7);
 80015ac:	2107      	movs	r1, #7
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff ff2a 	bl	8001408 <DMA_vIRQHandler>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <DMA2_Stream0_IRQHandler>:
/* ==========================
 *           DMA2
 * ========================== */

void DMA2_Stream0_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff ff22 	bl	8001408 <DMA_vIRQHandler>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_1);
 80015cc:	2101      	movs	r1, #1
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff ff1a 	bl	8001408 <DMA_vIRQHandler>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_2);
 80015dc:	2102      	movs	r1, #2
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ff12 	bl	8001408 <DMA_vIRQHandler>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_3);
 80015ec:	2103      	movs	r1, #3
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ff0a 	bl	8001408 <DMA_vIRQHandler>
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_4);
 80015fc:	2104      	movs	r1, #4
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff ff02 	bl	8001408 <DMA_vIRQHandler>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_5);
 800160c:	2105      	movs	r1, #5
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fefa 	bl	8001408 <DMA_vIRQHandler>
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_6);
 800161c:	2106      	movs	r1, #6
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff fef2 	bl	8001408 <DMA_vIRQHandler>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_7);
 800162c:	2107      	movs	r1, #7
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff feea 	bl	8001408 <DMA_vIRQHandler>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <EXTI0_IRQHandler>:


IntCallBack_t Globalarr_EXTICallBack [22];

void EXTI0_IRQHandler()
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[0] != NULL)
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <EXTI0_IRQHandler+0x1c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <EXTI0_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[0]();
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <EXTI0_IRQHandler+0x1c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4798      	blx	r3
	}
	EXTI_ClearPendingFlag(EXTI_INT0);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f832 	bl	80016b4 <EXTI_ClearPendingFlag>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000037c 	.word	0x2000037c

08001658 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[0] != NULL)
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <EXTI1_IRQHandler+0x1c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <EXTI1_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[0]();
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <EXTI1_IRQHandler+0x1c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4798      	blx	r3
	}
	EXTI_ClearPendingFlag(EXTI_INT1);
 800166a:	2001      	movs	r0, #1
 800166c:	f000 f822 	bl	80016b4 <EXTI_ClearPendingFlag>

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000037c 	.word	0x2000037c

08001678 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[0] != NULL)
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <EXTI2_IRQHandler+0x1c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <EXTI2_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[0]();
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <EXTI2_IRQHandler+0x1c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4798      	blx	r3
	}
	EXTI_ClearPendingFlag(EXTI_INT2);
 800168a:	2002      	movs	r0, #2
 800168c:	f000 f812 	bl	80016b4 <EXTI_ClearPendingFlag>

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000037c 	.word	0x2000037c

08001698 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[0] != NULL)
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <EXTI3_IRQHandler+0x18>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d002      	beq.n	80016aa <EXTI3_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[0]();
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <EXTI3_IRQHandler+0x18>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4798      	blx	r3
	}
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000037c 	.word	0x2000037c

080016b4 <EXTI_ClearPendingFlag>:
	EXTI->EXTI_SWIER &= ~(0b1<<copy_eEXTI_Int);
	EXTI->EXTI_SWIER |=  (0b1<<copy_eEXTI_Int);

}
void EXTI_ClearPendingFlag(EXTI_Int_Type copy_eEXTI_Int)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
	EXTI->EXTI_PR &= ~(0b1<<copy_eEXTI_Int);
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <EXTI_ClearPendingFlag+0x40>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	43d2      	mvns	r2, r2
 80016cc:	4611      	mov	r1, r2
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <EXTI_ClearPendingFlag+0x40>)
 80016d0:	400b      	ands	r3, r1
 80016d2:	6153      	str	r3, [r2, #20]
	EXTI->EXTI_PR |=  (0b1<<copy_eEXTI_Int);
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <EXTI_ClearPendingFlag+0x40>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	79fa      	ldrb	r2, [r7, #7]
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	4611      	mov	r1, r2
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <EXTI_ClearPendingFlag+0x40>)
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6153      	str	r3, [r2, #20]

}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40013c00 	.word	0x40013c00

080016f8 <GPIO_u8PinInit>:
 * @param[in] copy_ePinConfig : the initialization values of the pin
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* copy_ePinConfig)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK ;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
	if (copy_ePinConfig != NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8120 	beq.w	800194c <GPIO_u8PinInit+0x254>
	{
		if ((copy_ePinConfig->PIN_Port < INVALID) && (copy_ePinConfig->PIN_Number <= PIN15))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b07      	cmp	r3, #7
 8001712:	f200 8118 	bhi.w	8001946 <GPIO_u8PinInit+0x24e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f200 8113 	bhi.w	8001946 <GPIO_u8PinInit+0x24e>
		{
			/* Select GPIO Mode: INPUT - OUTPUT - ANALOG - AF */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER &= ~(MODER_MASK				     << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS)); // clear mode bits
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	785b      	ldrb	r3, [r3, #1]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2103      	movs	r1, #3
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	4619      	mov	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	4b86      	ldr	r3, [pc, #536]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001746:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800174a:	400a      	ands	r2, r1
 800174c:	601a      	str	r2, [r3, #0]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER |=  ((copy_ePinConfig->PIN_Type) << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b82      	ldr	r3, [pc, #520]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	789b      	ldrb	r3, [r3, #2]
 8001760:	4619      	mov	r1, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	4619      	mov	r1, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	4b7a      	ldr	r3, [pc, #488]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001776:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]
			/* Select GPIO pull state: PULLUP - PULLDOWN - NOPULL */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR &= ~(PUPDR_MASK				    	    << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS)); // clear mode bits
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	4b76      	ldr	r3, [pc, #472]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2103      	movs	r1, #3
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <GPIO_u8PinInit+0x268>)
 80017a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80017a8:	400a      	ands	r2, r1
 80017aa:	60da      	str	r2, [r3, #12]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR |=  ((copy_ePinConfig->PIN_PullUpDown)  << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b6b      	ldr	r3, [pc, #428]	; (8001960 <GPIO_u8PinInit+0x268>)
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	799b      	ldrb	r3, [r3, #6]
 80017be:	4619      	mov	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	4b63      	ldr	r3, [pc, #396]	; (8001960 <GPIO_u8PinInit+0x268>)
 80017d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]
			/* Select output type and speed in case of OUTPUT / AF  */
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d004      	beq.n	80017ee <GPIO_u8PinInit+0xf6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	789b      	ldrb	r3, [r3, #2]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f040 80b2 	bne.w	8001952 <GPIO_u8PinInit+0x25a>
			{
				/* select output type PUSHPULL - OPEN DRAIN */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER &= ~(OTYPER_MASK				 << (copy_ePinConfig->PIN_Number)); // clear mode bits
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <GPIO_u8PinInit+0x268>)
 80017f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	4619      	mov	r1, r3
 8001802:	2301      	movs	r3, #1
 8001804:	408b      	lsls	r3, r1
 8001806:	43db      	mvns	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001812:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001816:	400a      	ands	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER |=  (copy_ePinConfig->PIN_OType << (copy_ePinConfig->PIN_Number));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	4619      	mov	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	4619      	mov	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	4b48      	ldr	r3, [pc, #288]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001840:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
				/* select speed type LOW_SPEED - MEDIUM_SPEED - FAST_SPEED - HIGH_SPEED */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR &= ~(OSPEEDR_MASK				   << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS)); // clear mode bits
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2103      	movs	r1, #3
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	4619      	mov	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	4b3c      	ldr	r3, [pc, #240]	; (8001960 <GPIO_u8PinInit+0x268>)
 800186e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001872:	400a      	ands	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR |=  (copy_ePinConfig->PIN_OSpeed << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b38      	ldr	r3, [pc, #224]	; (8001960 <GPIO_u8PinInit+0x268>)
 800187e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	795b      	ldrb	r3, [r3, #5]
 8001888:	4619      	mov	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4619      	mov	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	4b30      	ldr	r3, [pc, #192]	; (8001960 <GPIO_u8PinInit+0x268>)
 800189e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	609a      	str	r2, [r3, #8]
				/* o/p value */
				GPIO_vSetOutputPinValue(copy_ePinConfig->PIN_Port,copy_ePinConfig->PIN_Number,copy_ePinConfig->PIN_OValue);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7818      	ldrb	r0, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7859      	ldrb	r1, [r3, #1]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	78db      	ldrb	r3, [r3, #3]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f000 f856 	bl	8001964 <GPIO_vSetOutputPinValue>

				/* select AF PIN */
				if ((copy_ePinConfig->PIN_Type == ALTERNATE))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	789b      	ldrb	r3, [r3, #2]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d148      	bne.n	8001952 <GPIO_u8PinInit+0x25a>
				{
					uint8_t Local_u8RegNum = copy_ePinConfig->PIN_Number / 8U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	73bb      	strb	r3, [r7, #14]
					uint8_t Local_u8BitNum = copy_ePinConfig->PIN_Number % 8U;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	737b      	strb	r3, [r7, #13]

					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] &= ~(AFR_MASK			  << ( Local_u8BitNum*AFR_PIN_ACCESS)); // clear mode bits
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <GPIO_u8PinInit+0x268>)
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	7bba      	ldrb	r2, [r7, #14]
 80018e0:	3208      	adds	r2, #8
 80018e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018e6:	7b7b      	ldrb	r3, [r7, #13]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <GPIO_u8PinInit+0x268>)
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	7bba      	ldrb	r2, [r7, #14]
 8001902:	4001      	ands	r1, r0
 8001904:	3208      	adds	r2, #8
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] |=  (copy_ePinConfig->PIN_AF  << ( Local_u8BitNum*AFR_PIN_ACCESS));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001916:	7bba      	ldrb	r2, [r7, #14]
 8001918:	3208      	adds	r2, #8
 800191a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7a1b      	ldrb	r3, [r3, #8]
 8001922:	461a      	mov	r2, r3
 8001924:	7b7b      	ldrb	r3, [r7, #13]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	4618      	mov	r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <GPIO_u8PinInit+0x268>)
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	7bba      	ldrb	r2, [r7, #14]
 800193c:	4301      	orrs	r1, r0
 800193e:	3208      	adds	r2, #8
 8001940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 8001944:	e005      	b.n	8001952 <GPIO_u8PinInit+0x25a>
				}
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8001946:	2302      	movs	r3, #2
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e003      	b.n	8001954 <GPIO_u8PinInit+0x25c>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 800194c:	2303      	movs	r3, #3
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e000      	b.n	8001954 <GPIO_u8PinInit+0x25c>
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 8001952:	bf00      	nop
	}

	return Local_u8ErrorState;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000020 	.word	0x20000020

08001964 <GPIO_vSetOutputPinValue>:
 * @retval ErrorStatus
 *
 */

uint8_t GPIO_vSetOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_ODR_t copy_GPIO_ODR)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	460b      	mov	r3, r1
 8001970:	71bb      	strb	r3, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK ;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
	if ((copy_eGPIO_Port < INVALID) && (copy_eGPIO_Pin <= PIN15))
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b07      	cmp	r3, #7
 800197e:	d82d      	bhi.n	80019dc <GPIO_vSetOutputPinValue+0x78>
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	2b0f      	cmp	r3, #15
 8001984:	d82a      	bhi.n	80019dc <GPIO_vSetOutputPinValue+0x78>
	{
		if (copy_GPIO_ODR == OUTPUT_LOW || copy_GPIO_ODR == OUTPUT_HIGH)
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <GPIO_vSetOutputPinValue+0x2e>
 800198c:	797b      	ldrb	r3, [r7, #5]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d121      	bne.n	80019d6 <GPIO_vSetOutputPinValue+0x72>
		{
			GPIO_PORT[copy_eGPIO_Port]->ODR &= ~(ODR_MASK			 << (copy_eGPIO_Pin)); // clear mode bits
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <GPIO_vSetOutputPinValue+0x8c>)
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	695a      	ldr	r2, [r3, #20]
 800199c:	79bb      	ldrb	r3, [r7, #6]
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4911      	ldr	r1, [pc, #68]	; (80019f0 <GPIO_vSetOutputPinValue+0x8c>)
 80019ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019b0:	4002      	ands	r2, r0
 80019b2:	615a      	str	r2, [r3, #20]
			GPIO_PORT[copy_eGPIO_Port]->ODR |=  (copy_GPIO_ODR 	 	 << (copy_eGPIO_Pin));
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <GPIO_vSetOutputPinValue+0x8c>)
 80019b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	7979      	ldrb	r1, [r7, #5]
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4909      	ldr	r1, [pc, #36]	; (80019f0 <GPIO_vSetOutputPinValue+0x8c>)
 80019cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019d0:	4302      	orrs	r2, r0
 80019d2:	615a      	str	r2, [r3, #20]
		if (copy_GPIO_ODR == OUTPUT_LOW || copy_GPIO_ODR == OUTPUT_HIGH)
 80019d4:	e004      	b.n	80019e0 <GPIO_vSetOutputPinValue+0x7c>
		}
		else
		{
			Local_u8ErrorState = NOK;
 80019d6:	2302      	movs	r3, #2
 80019d8:	73fb      	strb	r3, [r7, #15]
		if (copy_GPIO_ODR == OUTPUT_LOW || copy_GPIO_ODR == OUTPUT_HIGH)
 80019da:	e001      	b.n	80019e0 <GPIO_vSetOutputPinValue+0x7c>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 80019dc:	2302      	movs	r3, #2
 80019de:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]

}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000020 	.word	0x20000020

080019f4 <I2C_vInit>:
I2C_RegDef_t* I2CPeripheral [] = {I2C1, I2C2,I2C3};



void I2C_vInit(I2C_HandleTypeDef_t* hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	//	Stretching Enable/Disable
	I2C_ClkStretchingEnable(hi2c,hi2c->I2C_StretchClk);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	789b      	ldrb	r3, [r3, #2]
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f96c 	bl	8001ce0 <I2C_ClkStretchingEnable>
	// set chip address
	I2C_SetAddress(hi2c,hi2c->I2C_InterfaceAddress);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	78db      	ldrb	r3, [r3, #3]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fb64 	bl	80020dc <I2C_SetAddress>


	//Set SM
	I2C_SetI2CMasterModer(hi2c,hi2c->I2C_MasterMode);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	785b      	ldrb	r3, [r3, #1]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 fabe 	bl	8001f9c <I2C_SetI2CMasterModer>
	//Set FREQ
	I2C_SetI2CFreq(hi2c,42); //Revise me
 8001a20:	212a      	movs	r1, #42	; 0x2a
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fa16 	bl	8001e54 <I2C_SetI2CFreq>
	//Set CCR for 100KHZ CLK I2C
	I2C_SetCCRRegister(hi2c,80);//80
 8001a28:	2150      	movs	r1, #80	; 0x50
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fae6 	bl	8001ffc <I2C_SetCCRRegister>
	/**
	 * Don't forget to Enable DMA transfer complete interrupt from peripheral and NVIC
	 *
	 * */

}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <I2C_SendDataToSlave_DMA>:
			I2C_SetStopCondition( hi2c->I2C_ID,I2C_STOP_Stop);
		}
	}
}
void I2C_SendDataToSlave_DMA(I2C_HandleTypeDef_t* hi2c, DMA_HandleTypeDef_t* copy_eDMAConfig,uint8_t copy_u8SlaveAdd,uint32_t copy_u32DataLength,uint8_t* copy_pu8Data)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	71fb      	strb	r3, [r7, #7]
	I2C_IntSrc=I2C_InterruptSource_TX;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <I2C_SendDataToSlave_DMA+0xa0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	/*Enable  Peripheral*/
	I2C_SetPeripheralEnable( hi2c,I2C_Peripheral_EN);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f917 	bl	8001c84 <I2C_SetPeripheralEnable>

	/*bus id free*/
	while(I2C_ReadStatusFlag(hi2c,I2C_FLAG_BUS_BUSY_BUSY));
 8001a56:	bf00      	nop
 8001a58:	2121      	movs	r1, #33	; 0x21
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 f8ac 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f8      	bne.n	8001a58 <I2C_SendDataToSlave_DMA+0x20>
	/*Enable  DMA*/
	I2C_I2cDMAEnable( hi2c,I2C_DMA_Enable);
 8001a66:	2101      	movs	r1, #1
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fa21 	bl	8001eb0 <I2C_I2cDMAEnable>

	/*Enable ACK*/
	//	I2C_AckEnable( hi2c,I2C_ACK_Enabled);

	/*1.Start Condition*/
	I2C_SetStartCondition(hi2c, I2C_START_Start);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 f965 	bl	8001d40 <I2C_SetStartCondition>
	/*2. loop until SB generated*/
	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_START_CONDITION_SB));
 8001a76:	bf00      	nop
 8001a78:	2100      	movs	r1, #0
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f89c 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f8      	beq.n	8001a78 <I2C_SendDataToSlave_DMA+0x40>

	/*3. Fill DR with Slave add*/
	I2C_SetDataRegister(hi2c,(copy_u8SlaveAdd<<1)|0);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fa6e 	bl	8001f70 <I2C_SetDataRegister>
	/*4. loop until ADDR generated (There is ACK from slave)*/
	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_ADDRESS_SENT_ADDR));
 8001a94:	bf00      	nop
 8001a96:	2101      	movs	r1, #1
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f88d 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f8      	beq.n	8001a96 <I2C_SendDataToSlave_DMA+0x5e>
	/*5. loop until TRA=Transmitter, We cleared Addr after sr1 and sr2 read*/
	//	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_TRANSMITTER_RECEIVER_TRA));
	I2C_ClearAddrBit(hi2c);
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 faf9 	bl	800209c <I2C_ClearAddrBit>
	DMA_vSetCallBack(copy_eDMAConfig,Transfer_complete_Interrupt, I2C_DMA_TxCRxC_CallBack);
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <I2C_SendDataToSlave_DMA+0xa4>)
 8001aac:	2105      	movs	r1, #5
 8001aae:	68b8      	ldr	r0, [r7, #8]
 8001ab0:	f7ff fd16 	bl	80014e0 <DMA_vSetCallBack>

	DMA_vStart_IT(copy_eDMAConfig,(uint32_t) copy_pu8Data,(uint32_t) &I2CPeripheral[hi2c->I2C_ID]->I2C_DR , copy_u32DataLength);
 8001ab4:	69b9      	ldr	r1, [r7, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <I2C_SendDataToSlave_DMA+0xa8>)
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	3310      	adds	r3, #16
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68b8      	ldr	r0, [r7, #8]
 8001aca:	f7ff fbda 	bl	8001282 <DMA_vStart_IT>



}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200000a9 	.word	0x200000a9
 8001adc:	08001c19 	.word	0x08001c19
 8001ae0:	200000ac 	.word	0x200000ac

08001ae4 <I2C_ReceiveDataFromSlave_DMA>:
void I2C_ReceiveDataFromSlave_DMA(I2C_HandleTypeDef_t* hi2c, DMA_HandleTypeDef_t* copy_eDMAConfig,uint8_t copy_u8SlaveAdd,uint32_t copy_u32DataLength,uint8_t* copy_pu8Data)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71fb      	strb	r3, [r7, #7]
	I2C_IntSrc=I2C_InterruptSource_RX;
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <I2C_ReceiveDataFromSlave_DMA+0xc8>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
	I2C_SetPeripheralEnable( hi2c,I2C_Peripheral_EN);
 8001afa:	2101      	movs	r1, #1
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f8c1 	bl	8001c84 <I2C_SetPeripheralEnable>

	/*bus id free*/
	while(I2C_ReadStatusFlag(hi2c,I2C_FLAG_BUS_BUSY_BUSY));
 8001b02:	bf00      	nop
 8001b04:	2121      	movs	r1, #33	; 0x21
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f856 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f8      	bne.n	8001b04 <I2C_ReceiveDataFromSlave_DMA+0x20>
	/*Enable ACK and automatically NACK for DMA*/
	I2C_DMANextTransferIsLast( hi2c,I2C_Next_Is_Last);
 8001b12:	2101      	movs	r1, #1
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f9fb 	bl	8001f10 <I2C_DMANextTransferIsLast>
	if (copy_u32DataLength == 1)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d104      	bne.n	8001b2a <I2C_ReceiveDataFromSlave_DMA+0x46>
	{
		I2C_AckEnable( hi2c,I2C_ACK_Disabled);
 8001b20:	2100      	movs	r1, #0
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 f966 	bl	8001df4 <I2C_AckEnable>
 8001b28:	e003      	b.n	8001b32 <I2C_ReceiveDataFromSlave_DMA+0x4e>
	}
	else
	{
		I2C_AckEnable( hi2c,I2C_ACK_Enabled);
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f961 	bl	8001df4 <I2C_AckEnable>
	}
	/*Enable I2C and DA*/
	I2C_I2cDMAEnable( hi2c,I2C_DMA_Enable);
 8001b32:	2101      	movs	r1, #1
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f9bb 	bl	8001eb0 <I2C_I2cDMAEnable>

	/*1.Start Condition*/
	I2C_SetStartCondition(hi2c, I2C_START_Start);
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f8ff 	bl	8001d40 <I2C_SetStartCondition>
	/*2. loop until SB generated*/
	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_START_CONDITION_SB));
 8001b42:	bf00      	nop
 8001b44:	2100      	movs	r1, #0
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f836 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f8      	beq.n	8001b44 <I2C_ReceiveDataFromSlave_DMA+0x60>

	/*3. Fill DR with Slave add*/
	I2C_SetDataRegister(hi2c,(copy_u8SlaveAdd<<1)|1);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	b25b      	sxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fa04 	bl	8001f70 <I2C_SetDataRegister>
	/*4. loop until ADDR generated (There is ACK from slave)*/
	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_ADDRESS_SENT_ADDR));
 8001b68:	bf00      	nop
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f823 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f8      	beq.n	8001b6a <I2C_ReceiveDataFromSlave_DMA+0x86>
	/*5. loop until TRA=Transmitter, We cleared Addr after sr1 and sr2 read*/
	//	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_TRANSMITTER_RECEIVER_TRA));
	I2C_ClearAddrBit(hi2c);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fa8f 	bl	800209c <I2C_ClearAddrBit>
	DMA_vSetCallBack(copy_eDMAConfig,Transfer_complete_Interrupt, I2C_DMA_TxCRxC_CallBack);
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <I2C_ReceiveDataFromSlave_DMA+0xcc>)
 8001b80:	2105      	movs	r1, #5
 8001b82:	68b8      	ldr	r0, [r7, #8]
 8001b84:	f7ff fcac 	bl	80014e0 <DMA_vSetCallBack>

	DMA_vStart(copy_eDMAConfig, (uint32_t) &I2CPeripheral[hi2c->I2C_ID]->I2C_DR,(uint32_t) copy_pu8Data , copy_u32DataLength);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <I2C_ReceiveDataFromSlave_DMA+0xd0>)
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	3310      	adds	r3, #16
 8001b96:	4619      	mov	r1, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68b8      	ldr	r0, [r7, #8]
 8001b9e:	f7ff fb2f 	bl	8001200 <DMA_vStart>


}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000a9 	.word	0x200000a9
 8001bb0:	08001c19 	.word	0x08001c19
 8001bb4:	200000ac 	.word	0x200000ac

08001bb8 <I2C_ReadStatusFlag>:
 *
 *
 *
 */
static uint8_t I2C_ReadStatusFlag(I2C_HandleTypeDef_t* hi2c,I2C_Status_Flags copy_eStatusFlag)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
	if (copy_eStatusFlag<32)
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	2b1f      	cmp	r3, #31
 8001bc8:	d80e      	bhi.n	8001be8 <I2C_ReadStatusFlag+0x30>
	{
		return (READ_BIT(I2CPeripheral[hi2c->I2C_ID]->I2C_SR1,copy_eStatusFlag));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <I2C_ReadStatusFlag+0x5c>)
 8001bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	e00e      	b.n	8001c06 <I2C_ReadStatusFlag+0x4e>
	}
	// here i made the flags for SR2 starts from 32 to differentiate between them and SR1
	else
	{
		return (READ_BIT(I2CPeripheral[hi2c->I2C_ID]->I2C_SR2,(copy_eStatusFlag-32)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <I2C_ReadStatusFlag+0x5c>)
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	3b20      	subs	r3, #32
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	b2db      	uxtb	r3, r3

	}
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	200000ac 	.word	0x200000ac

08001c18 <I2C_DMA_TxCRxC_CallBack>:

static void I2C_DMA_TxCRxC_CallBack()
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0

	if(I2C_IntSrc==I2C_InterruptSource_TX)
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <I2C_DMA_TxCRxC_CallBack+0x68>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d114      	bne.n	8001c50 <I2C_DMA_TxCRxC_CallBack+0x38>
	{
		//Disable DMA
		I2C_I2cDMAEnable( I2C_Channel_1,I2C_DMA_Disable);
 8001c26:	2100      	movs	r1, #0
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f000 f941 	bl	8001eb0 <I2C_I2cDMAEnable>

		// if transmission
		uint8_t cc=0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
		while(!I2C_ReadStatusFlag(I2C_Channel_1,I2C_FLAG_DATA_REG_EMPTY_TxE) && cc<50)			//FIXME
 8001c32:	e002      	b.n	8001c3a <I2C_DMA_TxCRxC_CallBack+0x22>
		{
			cc++;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	3301      	adds	r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]
		while(!I2C_ReadStatusFlag(I2C_Channel_1,I2C_FLAG_DATA_REG_EMPTY_TxE) && cc<50)			//FIXME
 8001c3a:	2107      	movs	r1, #7
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ffbb 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d113      	bne.n	8001c70 <I2C_DMA_TxCRxC_CallBack+0x58>
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b31      	cmp	r3, #49	; 0x31
 8001c4c:	d9f2      	bls.n	8001c34 <I2C_DMA_TxCRxC_CallBack+0x1c>
 8001c4e:	e00f      	b.n	8001c70 <I2C_DMA_TxCRxC_CallBack+0x58>
		}

	}
	else if (I2C_IntSrc== I2C_InterruptSource_RX)
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <I2C_DMA_TxCRxC_CallBack+0x68>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d10b      	bne.n	8001c70 <I2C_DMA_TxCRxC_CallBack+0x58>
	{
		//Disable DMA
		I2C_I2cDMAEnable( I2C_Channel_1,I2C_DMA_Disable);
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 f928 	bl	8001eb0 <I2C_I2cDMAEnable>

		while(I2C_ReadStatusFlag(I2C_Channel_1,I2C_FLAG_DATA_REG_FULL_RxNE)); //FIXME
 8001c60:	bf00      	nop
 8001c62:	2106      	movs	r1, #6
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff ffa7 	bl	8001bb8 <I2C_ReadStatusFlag>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f8      	bne.n	8001c62 <I2C_DMA_TxCRxC_CallBack+0x4a>

	}

	// configure this
	I2C_SetStopCondition( I2C_Channel_1,I2C_STOP_Stop);
 8001c70:	2101      	movs	r1, #1
 8001c72:	2000      	movs	r0, #0
 8001c74:	f000 f894 	bl	8001da0 <I2C_SetStopCondition>

}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200000a9 	.word	0x200000a9

08001c84 <I2C_SetPeripheralEnable>:

static void I2C_SetPeripheralEnable(I2C_HandleTypeDef_t* hi2c,I2C_Peripheral_Enable copy_eI2CEnable)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_PE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <I2C_SetPeripheralEnable+0x58>)
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <I2C_SetPeripheralEnable+0x58>)
 8001ca6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eI2CEnable<<I2C_CR1_PE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <I2C_SetPeripheralEnable+0x58>)
 8001cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	78fa      	ldrb	r2, [r7, #3]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <I2C_SetPeripheralEnable+0x58>)
 8001cc8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200000ac 	.word	0x200000ac

08001ce0 <I2C_ClkStretchingEnable>:
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_ENGC);
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eGCEnable<<I2C_CR1_ENGC);
}

static void I2C_ClkStretchingEnable(I2C_HandleTypeDef_t* hi2c,I2C_STRETCH_Enable copy_eStretchEnable)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_NOSTRETCH);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <I2C_ClkStretchingEnable+0x5c>)
 8001cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <I2C_ClkStretchingEnable+0x5c>)
 8001d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0a:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eStretchEnable<<I2C_CR1_NOSTRETCH);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <I2C_ClkStretchingEnable+0x5c>)
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	01db      	lsls	r3, r3, #7
 8001d1e:	4619      	mov	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <I2C_ClkStretchingEnable+0x5c>)
 8001d28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	200000ac 	.word	0x200000ac

08001d40 <I2C_SetStartCondition>:

static void I2C_SetStartCondition(I2C_HandleTypeDef_t* hi2c,I2C_START_Generation copy_eStartCondition)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_START);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <I2C_SetStartCondition+0x5c>)
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <I2C_SetStartCondition+0x5c>)
 8001d62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d6a:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eStartCondition<<I2C_CR1_START);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <I2C_SetStartCondition+0x5c>)
 8001d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <I2C_SetStartCondition+0x5c>)
 8001d88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	200000ac 	.word	0x200000ac

08001da0 <I2C_SetStopCondition>:

static void I2C_SetStopCondition(I2C_Peripheral_Channel copy_eI2C_channel,I2C_STOP_Generation copy_eStopCondition)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	4613      	mov	r3, r2
 8001dae:	71bb      	strb	r3, [r7, #6]
	I2CPeripheral[copy_eI2C_channel]->I2C_CR1 &=~ (0b1<<I2C_CR1_STOP);
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <I2C_SetStopCondition+0x50>)
 8001db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <I2C_SetStopCondition+0x50>)
 8001dbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc6:	601a      	str	r2, [r3, #0]
	I2CPeripheral[copy_eI2C_channel]->I2C_CR1 |= (copy_eStopCondition<<I2C_CR1_STOP);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <I2C_SetStopCondition+0x50>)
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4905      	ldr	r1, [pc, #20]	; (8001df0 <I2C_SetStopCondition+0x50>)
 8001ddc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001de0:	4302      	orrs	r2, r0
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	200000ac 	.word	0x200000ac

08001df4 <I2C_AckEnable>:

static void I2C_AckEnable(I2C_HandleTypeDef_t* hi2c,I2C_ACK_Enable copy_eAckEnable)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_ACK);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <I2C_AckEnable+0x5c>)
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <I2C_AckEnable+0x5c>)
 8001e16:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e1e:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eAckEnable<<I2C_CR1_ACK);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <I2C_AckEnable+0x5c>)
 8001e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	4619      	mov	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <I2C_AckEnable+0x5c>)
 8001e3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	200000ac 	.word	0x200000ac

08001e54 <I2C_SetI2CFreq>:
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_SWRST);
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eSWReset<<I2C_CR1_SWRST);
}

static void I2C_SetI2CFreq(I2C_HandleTypeDef_t* hi2c,uint32_t copy_efreq)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 &=~ (0b111111<<I2C_CR2_Freq0_5);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <I2C_SetI2CFreq+0x58>)
 8001e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <I2C_SetI2CFreq+0x58>)
 8001e74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e78:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001e7c:	605a      	str	r2, [r3, #4]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 |= (copy_efreq<<I2C_CR2_Freq0_5);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <I2C_SetI2CFreq+0x58>)
 8001e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8a:	6859      	ldr	r1, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <I2C_SetI2CFreq+0x58>)
 8001e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200000ac 	.word	0x200000ac

08001eb0 <I2C_I2cDMAEnable>:
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 |= (copy_eInterruptEnable<<I2C_CR2_ITBUFEN);
}


static void I2C_I2cDMAEnable(I2C_HandleTypeDef_t* hi2c,I2C_DMAEnable copy_eInterruptEnable)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 &=~ (0b1<<I2C_CR2_DMAEN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <I2C_I2cDMAEnable+0x5c>)
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <I2C_I2cDMAEnable+0x5c>)
 8001ed2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eda:	605a      	str	r2, [r3, #4]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 |= (copy_eInterruptEnable<<I2C_CR2_DMAEN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <I2C_I2cDMAEnable+0x5c>)
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	02db      	lsls	r3, r3, #11
 8001eee:	4619      	mov	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <I2C_I2cDMAEnable+0x5c>)
 8001ef8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	200000ac 	.word	0x200000ac

08001f10 <I2C_DMANextTransferIsLast>:

static void I2C_DMANextTransferIsLast(I2C_HandleTypeDef_t* hi2c,I2C_DMALastTransfer copy_eLastTransfer)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 &=~ (0b1<<I2C_CR2_LAST);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <I2C_DMANextTransferIsLast+0x5c>)
 8001f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <I2C_DMANextTransferIsLast+0x5c>)
 8001f32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f3a:	605a      	str	r2, [r3, #4]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 |= (copy_eLastTransfer<<I2C_CR2_LAST);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <I2C_DMANextTransferIsLast+0x5c>)
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	031b      	lsls	r3, r3, #12
 8001f4e:	4619      	mov	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <I2C_DMANextTransferIsLast+0x5c>)
 8001f58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	605a      	str	r2, [r3, #4]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	200000ac 	.word	0x200000ac

08001f70 <I2C_SetDataRegister>:
{
	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 &=~ (0b1111111<<I2C_OAR1_ADD7_1);
	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 |= (copy_eInterfaceAdd<<I2C_OAR1_ADD7_1);
}
static void I2C_SetDataRegister(I2C_HandleTypeDef_t* hi2c,uint8_t copy_u8Data)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_DR = copy_u8Data;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <I2C_SetDataRegister+0x28>)
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	611a      	str	r2, [r3, #16]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	200000ac 	.word	0x200000ac

08001f9c <I2C_SetI2CMasterModer>:

	* copy_pu8Data=I2CPeripheral[hi2c->I2C_ID]->I2C_DR ;
}

static void I2C_SetI2CMasterModer(I2C_HandleTypeDef_t* hi2c,I2C_Select_Master_Mode copy_eMasterMode)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]

	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR &=~ (0b1<<I2C_CCR_MASTERMODE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <I2C_SetI2CMasterModer+0x5c>)
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <I2C_SetI2CMasterModer+0x5c>)
 8001fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc6:	61da      	str	r2, [r3, #28]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR |= (copy_eMasterMode<<I2C_CCR_MASTERMODE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <I2C_SetI2CMasterModer+0x5c>)
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	03db      	lsls	r3, r3, #15
 8001fda:	4619      	mov	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <I2C_SetI2CMasterModer+0x5c>)
 8001fe4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	200000ac 	.word	0x200000ac

08001ffc <I2C_SetCCRRegister>:
static void I2C_SetCCRRegister(I2C_HandleTypeDef_t* hi2c,uint32_t copy_u32Data)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]

	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR &=~ (0b111111111111<<0);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b22      	ldr	r3, [pc, #136]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 800200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	7812      	ldrb	r2, [r2, #0]
 8002018:	4611      	mov	r1, r2
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 800201c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002020:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002024:	f023 030f 	bic.w	r3, r3, #15
 8002028:	61d3      	str	r3, [r2, #28]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR |= (copy_u32Data<<0);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	69d9      	ldr	r1, [r3, #28]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	61da      	str	r2, [r3, #28]

	I2CPeripheral[hi2c->I2C_ID]->I2C_TRISE &=~ (0b111111<<0);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 8002052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 8002060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002064:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002068:	621a      	str	r2, [r3, #32]
	I2CPeripheral[hi2c->I2C_ID]->I2C_TRISE |= (0x2B<<0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 8002072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <I2C_SetCCRRegister+0x9c>)
 8002080:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002084:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8002088:	621a      	str	r2, [r3, #32]


}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200000ac 	.word	0x200000ac

0800209c <I2C_ClearAddrBit>:

static void I2C_ClearAddrBit(I2C_HandleTypeDef_t* hi2c)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	uint32_t temp1=0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
	uint32_t temp2=0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]

	temp1=I2CPeripheral[hi2c->I2C_ID]->I2C_SR1 ;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <I2C_ClearAddrBit+0x3c>)
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	60fb      	str	r3, [r7, #12]
	temp2=I2CPeripheral[hi2c->I2C_ID]->I2C_SR2 ;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <I2C_ClearAddrBit+0x3c>)
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	60bb      	str	r3, [r7, #8]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	200000ac 	.word	0x200000ac

080020dc <I2C_SetAddress>:


static void I2C_SetAddress(I2C_HandleTypeDef_t* hi2c,uint8_t copy_u8Data)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	70fb      	strb	r3, [r7, #3]

	//	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 &=~ (0b11111111<<1);
	//	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 |= (copy_u8Data<<1);
	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 |= (0x4000);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <I2C_SetAddress+0x38>)
 80020f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <I2C_SetAddress+0x38>)
 80020fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002106:	609a      	str	r2, [r3, #8]

}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	200000ac 	.word	0x200000ac

08002118 <NVIC_vEnableInterrupt>:
#include "NVIC_int.h"

#include "Utils.h"

void NVIC_vEnableInterrupt(Interrupt_t copy_eInterrupt)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_eInterrupt/32]= 0b1 << copy_eInterrupt % 32 ;
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	425a      	negs	r2, r3
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	f002 021f 	and.w	r2, r2, #31
 8002130:	bf58      	it	pl
 8002132:	4253      	negpl	r3, r2
 8002134:	b25b      	sxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	2301      	movs	r3, #1
 800213a:	fa03 f102 	lsl.w	r1, r3, r2
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <NVIC_vEnableInterrupt+0x48>)
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da00      	bge.n	800214a <NVIC_vEnableInterrupt+0x32>
 8002148:	331f      	adds	r3, #31
 800214a:	115b      	asrs	r3, r3, #5
 800214c:	b25b      	sxtb	r3, r3
 800214e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <RCC_AHB1EnableCLK>:
#include "ErrType.h"
#include "Utils.h"
#include "stdio.h"

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->AHB1ENR,peripheral);
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <RCC_AHB1EnableCLK+0x2c>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	79fa      	ldrb	r2, [r7, #7]
 8002174:	2101      	movs	r1, #1
 8002176:	fa01 f202 	lsl.w	r2, r1, r2
 800217a:	4611      	mov	r1, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <RCC_AHB1EnableCLK+0x2c>)
 800217e:	430b      	orrs	r3, r1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <RCC_APB1EnableCLK>:
	CLEAR_BIT(RCC->AHB1ENR,peripheral);

}

void RCC_APB1EnableCLK(PeripheralAPB1_t peripheral)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB1ENR,peripheral);
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <RCC_APB1EnableCLK+0x2c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	79fa      	ldrb	r2, [r7, #7]
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f202 	lsl.w	r2, r1, r2
 80021aa:	4611      	mov	r1, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <RCC_APB1EnableCLK+0x2c>)
 80021ae:	430b      	orrs	r3, r1
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40

}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB2ENR,peripheral);
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <RCC_APB2EnableCLK+0x2c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	79fa      	ldrb	r2, [r7, #7]
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	4611      	mov	r1, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <RCC_APB2EnableCLK+0x2c>)
 80021de:	430b      	orrs	r3, r1
 80021e0:	6453      	str	r3, [r2, #68]	; 0x44

}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800

080021f4 <SPI_vInit>:




void SPI_vInit(SPI_HandleTypeDef_t* hspi)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	SPI_SetHWCRCEnable( hspi,hspi->HWCRC_Enable);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f84a 	bl	800229c <SPI_SetHWCRCEnable>
	SPI_SetDataFrameForamt( hspi,hspi->DataFrameFormat);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	789b      	ldrb	r3, [r3, #2]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f874 	bl	80022fc <SPI_SetDataFrameForamt>
	SPI_SetBaudRate( hspi,hspi->SPI_BaudRate);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	791b      	ldrb	r3, [r3, #4]
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f92e 	bl	800247c <SPI_SetBaudRate>
	SPI_SetMasterSlave( hspi,hspi->MasterSlaveSelection);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	795b      	ldrb	r3, [r3, #5]
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f958 	bl	80024dc <SPI_SetMasterSlave>

	SPI_DMATxEnable( hspi,hspi->SPI_DMATransEnable);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	7a5b      	ldrb	r3, [r3, #9]
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa06 	bl	8002644 <SPI_DMATxEnable>
	SPI_DMARxEnable( hspi,hspi->SPI_DMARecEnable);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7a1b      	ldrb	r3, [r3, #8]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa30 	bl	80026a4 <SPI_DMARxEnable>

	SPI_EnableTxBufferEmptyInterrupt( hspi->SPI_ID,hspi->TxBufferEmptyIE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7a9b      	ldrb	r3, [r3, #10]
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f000 f974 	bl	800253c <SPI_EnableTxBufferEmptyInterrupt>
	SPI_EnableRxBufferFullInterrupt( hspi->SPI_ID,hspi->RxBufferNotEmptyIE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7adb      	ldrb	r3, [r3, #11]
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f000 f996 	bl	8002590 <SPI_EnableRxBufferFullInterrupt>
	SPI_EnableErrorInterrupt( hspi,hspi->ErrorIE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7b1b      	ldrb	r3, [r3, #12]
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f9ba 	bl	80025e4 <SPI_EnableErrorInterrupt>


	SPI_SetSlavengBySW( hspi,hspi->SwMngSlaveEnable);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	799b      	ldrb	r3, [r3, #6]
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f870 	bl	800235c <SPI_SetSlavengBySW>
	SPI_SetSlaveSelectBySW( hspi,hspi->SwSlaveSelect);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	79db      	ldrb	r3, [r3, #7]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f89a 	bl	80023bc <SPI_SetSlaveSelectBySW>

	SPI_Enable_Peripheral( hspi,hspi->SPI_Enable);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	78db      	ldrb	r3, [r3, #3]
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8c4 	bl	800241c <SPI_Enable_Peripheral>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <SPI_SetHWCRCEnable>:
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_BIDIOE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eOutputEnableInBidirectional<<SPI_CR1_BIDIOE);
}
static void SPI_SetHWCRCEnable(SPI_HandleTypeDef_t* hspi,SPI_HWCRCEnable_t copy_eHWCRCEnable)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CRCEN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <SPI_SetHWCRCEnable+0x5c>)
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <SPI_SetHWCRCEnable+0x5c>)
 80022be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eHWCRCEnable<<SPI_CR1_CRCEN);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <SPI_SetHWCRCEnable+0x5c>)
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	035b      	lsls	r3, r3, #13
 80022da:	4619      	mov	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SPI_SetHWCRCEnable+0x5c>)
 80022e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	200000ec 	.word	0x200000ec

080022fc <SPI_SetDataFrameForamt>:

static void SPI_SetDataFrameForamt(SPI_HandleTypeDef_t* hspi,SPI_DataFrameFormat_t copy_eDataFrameFormat)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_DFF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <SPI_SetDataFrameForamt+0x5c>)
 8002310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <SPI_SetDataFrameForamt+0x5c>)
 800231e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eDataFrameFormat<<SPI_CR1_DFF);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <SPI_SetDataFrameForamt+0x5c>)
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	02db      	lsls	r3, r3, #11
 800233a:	4619      	mov	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SPI_SetDataFrameForamt+0x5c>)
 8002344:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	200000ec 	.word	0x200000ec

0800235c <SPI_SetSlavengBySW>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_RXONLY);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eReceiveOnlyModeEnable<<SPI_CR1_RXONLY);
}

static void SPI_SetSlavengBySW(SPI_HandleTypeDef_t* hspi,SPI_SWSlaveMng_t copy_eSWSlaveMng)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <SPI_SetSlavengBySW+0x5c>)
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4619      	mov	r1, r3
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <SPI_SetSlavengBySW+0x5c>)
 800237e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002382:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSWSlaveMng<<SPI_CR1_SSM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <SPI_SetSlavengBySW+0x5c>)
 8002390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	4619      	mov	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <SPI_SetSlavengBySW+0x5c>)
 80023a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	200000ec 	.word	0x200000ec

080023bc <SPI_SetSlaveSelectBySW>:

static void SPI_SetSlaveSelectBySW(SPI_HandleTypeDef_t* hspi,SPI_InternalSlaveSelect_t copy_eInternalSlaveSelect)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSI);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <SPI_SetSlaveSelectBySW+0x5c>)
 80023d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <SPI_SetSlaveSelectBySW+0x5c>)
 80023de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e6:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eInternalSlaveSelect<<SPI_CR1_SSI);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <SPI_SetSlaveSelectBySW+0x5c>)
 80023f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	4619      	mov	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SPI_SetSlaveSelectBySW+0x5c>)
 8002404:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002408:	430a      	orrs	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	200000ec 	.word	0x200000ec

0800241c <SPI_Enable_Peripheral>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_LSBFIRST);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_LSBFirst<<SPI_CR1_LSBFIRST);
}

static void SPI_Enable_Peripheral(SPI_HandleTypeDef_t* hspi,SPI_Enable_t copy_eSPI_Enable)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SPE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <SPI_Enable_Peripheral+0x5c>)
 8002430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <SPI_Enable_Peripheral+0x5c>)
 800243e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002442:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002446:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_Enable<<SPI_CR1_SPE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <SPI_Enable_Peripheral+0x5c>)
 8002450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	4619      	mov	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <SPI_Enable_Peripheral+0x5c>)
 8002464:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	200000ec 	.word	0x200000ec

0800247c <SPI_SetBaudRate>:

static void SPI_SetBaudRate(SPI_HandleTypeDef_t* hspi,SPI_BaudRate_t copy_eSPI_BaudRate)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b111<<SPI_CR1_BR);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <SPI_SetBaudRate+0x5c>)
 8002490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <SPI_SetBaudRate+0x5c>)
 800249e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80024a2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80024a6:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_BaudRate<<SPI_CR1_BR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <SPI_SetBaudRate+0x5c>)
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4619      	mov	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <SPI_SetBaudRate+0x5c>)
 80024c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	200000ec 	.word	0x200000ec

080024dc <SPI_SetMasterSlave>:

static void SPI_SetMasterSlave(SPI_HandleTypeDef_t* hspi,SPI_MasterSlave_t copy_eMasterSlave)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_MSTR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <SPI_SetMasterSlave+0x5c>)
 80024f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <SPI_SetMasterSlave+0x5c>)
 80024fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002502:	f022 0204 	bic.w	r2, r2, #4
 8002506:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eMasterSlave<<SPI_CR1_MSTR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <SPI_SetMasterSlave+0x5c>)
 8002510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4619      	mov	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <SPI_SetMasterSlave+0x5c>)
 8002524:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002528:	430a      	orrs	r2, r1
 800252a:	601a      	str	r2, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	200000ec 	.word	0x200000ec

0800253c <SPI_EnableTxBufferEmptyInterrupt>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eClockPhase<<SPI_CR1_CPHA);
}


void SPI_EnableTxBufferEmptyInterrupt(SPI_Channel_t SPI_channel,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	460a      	mov	r2, r1
 8002546:	71fb      	strb	r3, [r7, #7]
 8002548:	4613      	mov	r3, r2
 800254a:	71bb      	strb	r3, [r7, #6]
	SPIPeripheral[SPI_channel]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXEIE);
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4a0f      	ldr	r2, [pc, #60]	; (800258c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	490c      	ldr	r1, [pc, #48]	; (800258c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 800255a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800255e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002562:	605a      	str	r2, [r3, #4]
	SPIPeripheral[SPI_channel]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_TXEIE);
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	01db      	lsls	r3, r3, #7
 8002572:	4618      	mov	r0, r3
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	4905      	ldr	r1, [pc, #20]	; (800258c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 8002578:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800257c:	4302      	orrs	r2, r0
 800257e:	605a      	str	r2, [r3, #4]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	200000ec 	.word	0x200000ec

08002590 <SPI_EnableRxBufferFullInterrupt>:
void SPI_EnableRxBufferFullInterrupt(SPI_Channel_t SPI_channel,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	460a      	mov	r2, r1
 800259a:	71fb      	strb	r3, [r7, #7]
 800259c:	4613      	mov	r3, r2
 800259e:	71bb      	strb	r3, [r7, #6]
	SPIPeripheral[SPI_channel]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXNEIE);
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <SPI_EnableRxBufferFullInterrupt+0x50>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <SPI_EnableRxBufferFullInterrupt+0x50>)
 80025ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b6:	605a      	str	r2, [r3, #4]
	SPIPeripheral[SPI_channel]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_RXNEIE);
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <SPI_EnableRxBufferFullInterrupt+0x50>)
 80025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	4618      	mov	r0, r3
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	4905      	ldr	r1, [pc, #20]	; (80025e0 <SPI_EnableRxBufferFullInterrupt+0x50>)
 80025cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025d0:	4302      	orrs	r2, r0
 80025d2:	605a      	str	r2, [r3, #4]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	200000ec 	.word	0x200000ec

080025e4 <SPI_EnableErrorInterrupt>:
void SPI_EnableErrorInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_ERRIE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <SPI_EnableErrorInterrupt+0x5c>)
 80025f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <SPI_EnableErrorInterrupt+0x5c>)
 8002606:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800260a:	f022 0220 	bic.w	r2, r2, #32
 800260e:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_ERRIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <SPI_EnableErrorInterrupt+0x5c>)
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	015b      	lsls	r3, r3, #5
 8002622:	4619      	mov	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SPI_EnableErrorInterrupt+0x5c>)
 800262c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002630:	430a      	orrs	r2, r1
 8002632:	605a      	str	r2, [r3, #4]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	200000ec 	.word	0x200000ec

08002644 <SPI_DMATxEnable>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_SSOE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eSSOutputEnable<<SPI_CR2_SSOE);
}

static void SPI_DMATxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMATxEnable_t copy_eDMATxEnable)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXDMAEN);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <SPI_DMATxEnable+0x5c>)
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	4619      	mov	r1, r3
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <SPI_DMATxEnable+0x5c>)
 8002666:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800266a:	f022 0202 	bic.w	r2, r2, #2
 800266e:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMATxEnable<<SPI_CR2_TXDMAEN);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <SPI_DMATxEnable+0x5c>)
 8002678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4619      	mov	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SPI_DMATxEnable+0x5c>)
 800268c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	200000ec 	.word	0x200000ec

080026a4 <SPI_DMARxEnable>:

static void SPI_DMARxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMARxEnable_t copy_eDMARxEnable)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXDMAEN);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <SPI_DMARxEnable+0x58>)
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <SPI_DMARxEnable+0x58>)
 80026c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMARxEnable<<SPI_CR2_RXDMAEN);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <SPI_DMARxEnable+0x58>)
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	6859      	ldr	r1, [r3, #4]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SPI_DMARxEnable+0x58>)
 80026e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	605a      	str	r2, [r3, #4]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	200000ec 	.word	0x200000ec

08002700 <SPI_ReadFlag>:

uint8_t SPI_ReadFlag(SPI_HandleTypeDef_t* hspi,SPI_Flags_t copy_eFlag)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
	return READ_BIT(SPIPeripheral[hspi->SPI_ID]->SPI_SR,copy_eFlag);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <SPI_ReadFlag+0x34>)
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	b2db      	uxtb	r3, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	200000ec 	.word	0x200000ec

08002738 <SysTick_Handler>:

STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 800273c:	4b09      	ldr	r3, [pc, #36]	; (8002764 <SysTick_Handler+0x2c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(STK->STK_CTRL,ENABLE);
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <SysTick_Handler+0x30>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <SysTick_Handler+0x30>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <SysTick_Handler+0x34>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Handler+0x34>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4798      	blx	r3
	}
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200003d8 	.word	0x200003d8
 8002768:	e000e010 	.word	0xe000e010
 800276c:	200003d4 	.word	0x200003d4

08002770 <STK_vSetBusyWait>:
	CLEAR_BIT(STK->STK_CTRL,ENABLE);
}


void STK_vSetBusyWait(uint32_t copy_u32Ticks)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	STK->STK_VAL = 0 ;
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <STK_vSetBusyWait+0x48>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
	// load timer
	STK->STK_LOAD=copy_u32Ticks;
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <STK_vSetBusyWait+0x48>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <STK_vSetBusyWait+0x48>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <STK_vSetBusyWait+0x48>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(STK->STK_CTRL,COUNTFLAG) != 1);
 8002790:	bf00      	nop
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <STK_vSetBusyWait+0x48>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d1f8      	bne.n	8002792 <STK_vSetBusyWait+0x22>
	// stop timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <STK_vSetBusyWait+0x48>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <STK_vSetBusyWait+0x48>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6013      	str	r3, [r2, #0]

}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e010 	.word	0xe000e010

080027bc <UART_vInit>:
static void UART_vEnableErrorInterrupt(USART_HandleTypeDef_t* huart,USART_Interrupt_Enable_t copy_eInterrupt_Enable);
static void UART_vSetBaudRate(USART_HandleTypeDef_t* huart,uint32_t copy_u32BaudRate);


void UART_vInit(USART_HandleTypeDef_t* huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	UART_vEnale(huart,huart->USARTEnable);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fb26 	bl	8002e1c <UART_vEnale>
	UART_vReceiverEnable(huart,huart->RecieverEnable);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	78db      	ldrb	r3, [r3, #3]
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f940 	bl	8002a5c <UART_vReceiverEnable>
	UART_vTransmitterEnable(huart,huart->TransmitterEnable);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	789b      	ldrb	r3, [r3, #2]
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f96a 	bl	8002abc <UART_vTransmitterEnable>
	UART_vDMAEnablReceiver(huart,huart->DMAEnableReciever);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	791b      	ldrb	r3, [r3, #4]
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fbd4 	bl	8002f9c <UART_vDMAEnablReceiver>
	UART_vDMAEnableTransmitter(huart,huart->DMAEnableTransmitter);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	795b      	ldrb	r3, [r3, #5]
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fbfe 	bl	8002ffc <UART_vDMAEnableTransmitter>
	UART_vSetStopBits(huart,huart->NumberOfStopBits);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	799b      	ldrb	r3, [r3, #6]
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fb68 	bl	8002edc <UART_vSetStopBits>
	UART_vEnableParity(huart,huart->ParityEnable);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	79db      	ldrb	r3, [r3, #7]
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 faa2 	bl	8002d5c <UART_vEnableParity>
	if (huart->ParityEnable == USART_Enable_Parity)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	79db      	ldrb	r3, [r3, #7]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <UART_vInit+0x70>
	{
		UART_vSetParity(huart,huart->ParityType);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7a1b      	ldrb	r3, [r3, #8]
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fa68 	bl	8002cfc <UART_vSetParity>
	}
	UART_vSetWordLength(huart,huart->WordLength);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7a5b      	ldrb	r3, [r3, #9]
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fac2 	bl	8002dbc <UART_vSetWordLength>
	UART_vSetOversamplingMode( huart,huart->OverSamplingMode);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7adb      	ldrb	r3, [r3, #11]
 800283c:	4619      	mov	r1, r3
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fb1c 	bl	8002e7c <UART_vSetOversamplingMode>
	UART_vSetOneSampleBitMethod( huart,huart->OneSampleMethod);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7a9b      	ldrb	r3, [r3, #10]
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fb76 	bl	8002f3c <UART_vSetOneSampleBitMethod>
	UART_vSetBaudRate( huart,huart->u32BaudRate);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fc2e 	bl	80030b8 <UART_vSetBaudRate>



	UART_vEnableErrorInterrupt(huart,huart->ErrorInterruptEnable);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7c1b      	ldrb	r3, [r3, #16]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fbfa 	bl	800305c <UART_vEnableErrorInterrupt>
	UART_vIdleInterruptEnable(huart, huart->IdleInterruptEnable);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	7c5b      	ldrb	r3, [r3, #17]
 800286c:	4619      	mov	r1, r3
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f954 	bl	8002b1c <UART_vIdleInterruptEnable>
	UART_vRXNEInterruptEnable(huart, huart->RXNEInterruptEnable);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7c9b      	ldrb	r3, [r3, #18]
 8002878:	4619      	mov	r1, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f97e 	bl	8002b7c <UART_vRXNEInterruptEnable>
	UART_vTransmissionCompleteInterruptEnable(huart, huart->TransmissionCompleteInterruptEnable);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7cdb      	ldrb	r3, [r3, #19]
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9a8 	bl	8002bdc <UART_vTransmissionCompleteInterruptEnable>
	UART_vTXEInterruptEnable(huart, huart->TXEInterruptEnable);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7d1b      	ldrb	r3, [r3, #20]
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f9d2 	bl	8002c3c <UART_vTXEInterruptEnable>
	UART_vPEInterruptEnable(huart, huart->PEInterruptEnable);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7d5b      	ldrb	r3, [r3, #21]
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9fc 	bl	8002c9c <UART_vPEInterruptEnable>



}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <UART_vSendStringSynch>:

	UART_vSetDataRegister( huart,copy_u8Data );

}
void UART_vSendStringSynch(USART_HandleTypeDef_t* huart, uint8_t* copy_pu8Data)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
	for (uint8_t i=0;copy_pu8Data[i];i++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e012      	b.n	80028e2 <UART_vSendStringSynch+0x36>
	{
		while (	!UART_vReadFlag( huart,Transmit_Data_Register_Empty));
 80028bc:	bf00      	nop
 80028be:	2107      	movs	r1, #7
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f881 	bl	80029c8 <UART_vReadFlag>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f8      	beq.n	80028be <UART_vSendStringSynch+0x12>
		UART_vSetDataRegister( huart,copy_pu8Data[i] );
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f892 	bl	8002a00 <UART_vSetDataRegister>
	for (uint8_t i=0;copy_pu8Data[i];i++)
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	3301      	adds	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e6      	bne.n	80028bc <UART_vSendStringSynch+0x10>
	}

}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_vReceiveSynchSize>:
{
	while (!UART_vReadFlag( huart,Read_Data_Register_Not_Empty));
	UART_vReadDataRegister( huart,copy_u8Data );
}
void UART_vReceiveSynchSize(USART_HandleTypeDef_t* huart, uint8_t *copy_u8Data, uint8_t copy_u8Size)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RecData=0;
 8002906:	2300      	movs	r3, #0
 8002908:	75bb      	strb	r3, [r7, #22]
	*copy_u8Data=0;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i =0 ;i<copy_u8Size; i++)
 8002910:	2300      	movs	r3, #0
 8002912:	75fb      	strb	r3, [r7, #23]
 8002914:	e01e      	b.n	8002954 <UART_vReceiveSynchSize+0x5c>
	{

	while (!UART_vReadFlag( huart,Read_Data_Register_Not_Empty));
 8002916:	bf00      	nop
 8002918:	2105      	movs	r1, #5
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f854 	bl	80029c8 <UART_vReadFlag>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f8      	beq.n	8002918 <UART_vReceiveSynchSize+0x20>
	UART_vReadDataRegister( huart,&Temp_RecData );
 8002926:	f107 0316 	add.w	r3, r7, #22
 800292a:	4619      	mov	r1, r3
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f87d 	bl	8002a2c <UART_vReadDataRegister>

	*copy_u8Data=(*copy_u8Data)*10+(Temp_RecData- '0');
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	0092      	lsls	r2, r2, #2
 800293a:	4413      	add	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	7dbb      	ldrb	r3, [r7, #22]
 8002942:	4413      	add	r3, r2
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3b30      	subs	r3, #48	; 0x30
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i =0 ;i<copy_u8Size; i++)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	3301      	adds	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
 8002954:	7dfa      	ldrb	r2, [r7, #23]
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	429a      	cmp	r2, r3
 800295a:	d3dc      	bcc.n	8002916 <UART_vReceiveSynchSize+0x1e>
	}
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <UART_vReceiveSynchString>:

void UART_vReceiveSynchString(USART_HandleTypeDef_t* huart, uint8_t *copy_pu8Data)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
	while (!UART_vReadFlag( huart,Read_Data_Register_Not_Empty));
 8002970:	bf00      	nop
 8002972:	2105      	movs	r1, #5
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f827 	bl	80029c8 <UART_vReadFlag>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f8      	beq.n	8002972 <UART_vReceiveSynchString+0xc>
	UART_vReadDataRegister( huart,&copy_pu8Data[0] );
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f852 	bl	8002a2c <UART_vReadDataRegister>
	uint8_t i=0;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
	while (copy_pu8Data[i] != 13)
 800298c:	e011      	b.n	80029b2 <UART_vReceiveSynchString+0x4c>
	{
		i++;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	3301      	adds	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
		while (!UART_vReadFlag( huart,Read_Data_Register_Not_Empty));
 8002994:	bf00      	nop
 8002996:	2105      	movs	r1, #5
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f815 	bl	80029c8 <UART_vReadFlag>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f8      	beq.n	8002996 <UART_vReceiveSynchString+0x30>
		UART_vReadDataRegister( huart,&copy_pu8Data[i] );
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f83d 	bl	8002a2c <UART_vReadDataRegister>
	while (copy_pu8Data[i] != 13)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b0d      	cmp	r3, #13
 80029bc:	d1e7      	bne.n	800298e <UART_vReceiveSynchString+0x28>
	}
}
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <UART_vReadFlag>:
	DMA_vStart(hdma,(uint32_t)0x40004404, (uint32_t)copy_u32DstAddress , copy_u32DataLength);
}


static uint8_t UART_vReadFlag(USART_HandleTypeDef_t* huart,USART_Flag_t copy_eUSART_Flag )
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	70fb      	strb	r3, [r7, #3]
	return READ_BIT(USARTPeripheral[huart->USART_ID]->USART_SR,copy_eUSART_Flag);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <UART_vReadFlag+0x34>)
 80029dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	20000154 	.word	0x20000154

08002a00 <UART_vSetDataRegister>:
static void UART_vSetDataRegister(USART_HandleTypeDef_t* huart,uint8_t copy_u8Data )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_DR=copy_u8Data;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <UART_vSetDataRegister+0x28>)
 8002a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	605a      	str	r2, [r3, #4]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	20000154 	.word	0x20000154

08002a2c <UART_vReadDataRegister>:
static void UART_vReadDataRegister(USART_HandleTypeDef_t* huart,uint8_t* copy_pu8Data )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
	*copy_pu8Data=USARTPeripheral[huart->USART_ID]->USART_DR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <UART_vReadDataRegister+0x2c>)
 8002a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	701a      	strb	r2, [r3, #0]

}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000154 	.word	0x20000154

08002a5c <UART_vReceiverEnable>:
static void UART_vReceiverEnable(USART_HandleTypeDef_t* huart,USART_Receiver_Enable_t copy_eReceiver_Enable)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_RE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <UART_vReceiverEnable+0x5c>)
 8002a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <UART_vReceiverEnable+0x5c>)
 8002a7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a82:	f022 0204 	bic.w	r2, r2, #4
 8002a86:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eReceiver_Enable<<USART_CR1_RE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <UART_vReceiverEnable+0x5c>)
 8002a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <UART_vReceiverEnable+0x5c>)
 8002aa4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]

}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	20000154 	.word	0x20000154

08002abc <UART_vTransmitterEnable>:
static void UART_vTransmitterEnable(USART_HandleTypeDef_t* huart,USART_Transmitter_Enable_t copy_eTransmitter_Enable)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_TE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <UART_vTransmitterEnable+0x5c>)
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4619      	mov	r1, r3
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <UART_vTransmitterEnable+0x5c>)
 8002ade:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ae2:	f022 0208 	bic.w	r2, r2, #8
 8002ae6:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eTransmitter_Enable<<USART_CR1_TE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <UART_vTransmitterEnable+0x5c>)
 8002af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4619      	mov	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <UART_vTransmitterEnable+0x5c>)
 8002b04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	60da      	str	r2, [r3, #12]

}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	20000154 	.word	0x20000154

08002b1c <UART_vIdleInterruptEnable>:

static void UART_vIdleInterruptEnable(USART_HandleTypeDef_t* huart,USART_Interrupt_Enable_t copy_eInterrupt_Enable)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_IDLEIE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <UART_vIdleInterruptEnable+0x5c>)
 8002b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <UART_vIdleInterruptEnable+0x5c>)
 8002b3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b42:	f022 0210 	bic.w	r2, r2, #16
 8002b46:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eInterrupt_Enable<<USART_CR1_IDLEIE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <UART_vIdleInterruptEnable+0x5c>)
 8002b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <UART_vIdleInterruptEnable+0x5c>)
 8002b64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]

}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	20000154 	.word	0x20000154

08002b7c <UART_vRXNEInterruptEnable>:
static void UART_vRXNEInterruptEnable(USART_HandleTypeDef_t* huart,USART_Interrupt_Enable_t copy_eInterrupt_Enable)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_RXNEIE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <UART_vRXNEInterruptEnable+0x5c>)
 8002b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <UART_vRXNEInterruptEnable+0x5c>)
 8002b9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ba2:	f022 0220 	bic.w	r2, r2, #32
 8002ba6:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eInterrupt_Enable<<USART_CR1_RXNEIE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <UART_vRXNEInterruptEnable+0x5c>)
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	015b      	lsls	r3, r3, #5
 8002bba:	4619      	mov	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <UART_vRXNEInterruptEnable+0x5c>)
 8002bc4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	60da      	str	r2, [r3, #12]

}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	20000154 	.word	0x20000154

08002bdc <UART_vTransmissionCompleteInterruptEnable>:

static void UART_vTransmissionCompleteInterruptEnable(USART_HandleTypeDef_t* huart,USART_Interrupt_Enable_t copy_eInterrupt_Enable)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_TCIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <UART_vTransmissionCompleteInterruptEnable+0x5c>)
 8002bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <UART_vTransmissionCompleteInterruptEnable+0x5c>)
 8002bfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c06:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eInterrupt_Enable<<USART_CR1_TCIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <UART_vTransmissionCompleteInterruptEnable+0x5c>)
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	019b      	lsls	r3, r3, #6
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <UART_vTransmissionCompleteInterruptEnable+0x5c>)
 8002c24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	60da      	str	r2, [r3, #12]

}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	20000154 	.word	0x20000154

08002c3c <UART_vTXEInterruptEnable>:
static void UART_vTXEInterruptEnable(USART_HandleTypeDef_t* huart,USART_Interrupt_Enable_t copy_eInterrupt_Enable)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_TXEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <UART_vTXEInterruptEnable+0x5c>)
 8002c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <UART_vTXEInterruptEnable+0x5c>)
 8002c5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c66:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eInterrupt_Enable<<USART_CR1_TXEIE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <UART_vTXEInterruptEnable+0x5c>)
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <UART_vTXEInterruptEnable+0x5c>)
 8002c84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	60da      	str	r2, [r3, #12]

}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	20000154 	.word	0x20000154

08002c9c <UART_vPEInterruptEnable>:
static void UART_vPEInterruptEnable(USART_HandleTypeDef_t* huart,USART_Interrupt_Enable_t copy_eInterrupt_Enable)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_PEIE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <UART_vPEInterruptEnable+0x5c>)
 8002cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <UART_vPEInterruptEnable+0x5c>)
 8002cbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc6:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eInterrupt_Enable<<USART_CR1_PEIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <UART_vPEInterruptEnable+0x5c>)
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	4619      	mov	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <UART_vPEInterruptEnable+0x5c>)
 8002ce4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	60da      	str	r2, [r3, #12]

}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	20000154 	.word	0x20000154

08002cfc <UART_vSetParity>:

static void UART_vSetParity(USART_HandleTypeDef_t* huart,USART_Parity_t copy_eParity)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_PS);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <UART_vSetParity+0x5c>)
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <UART_vSetParity+0x5c>)
 8002d1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d26:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eParity<<USART_CR1_PS);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <UART_vSetParity+0x5c>)
 8002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	025b      	lsls	r3, r3, #9
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <UART_vSetParity+0x5c>)
 8002d44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	60da      	str	r2, [r3, #12]

}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	20000154 	.word	0x20000154

08002d5c <UART_vEnableParity>:
static void UART_vEnableParity(USART_HandleTypeDef_t* huart,USART_Parity_Enable_t copy_eParity_Enable)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_PCE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <UART_vEnableParity+0x5c>)
 8002d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <UART_vEnableParity+0x5c>)
 8002d7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d86:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eParity_Enable<<USART_CR1_PCE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <UART_vEnableParity+0x5c>)
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	029b      	lsls	r3, r3, #10
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <UART_vEnableParity+0x5c>)
 8002da4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	60da      	str	r2, [r3, #12]

}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	20000154 	.word	0x20000154

08002dbc <UART_vSetWordLength>:

static void UART_vSetWordLength(USART_HandleTypeDef_t* huart,USART_WordLength_t copy_eWordLength)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_M);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <UART_vSetWordLength+0x5c>)
 8002dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <UART_vSetWordLength+0x5c>)
 8002dde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de6:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eWordLength<<USART_CR1_M);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <UART_vSetWordLength+0x5c>)
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	031b      	lsls	r3, r3, #12
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <UART_vSetWordLength+0x5c>)
 8002e04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	20000154 	.word	0x20000154

08002e1c <UART_vEnale>:

static void UART_vEnale(USART_HandleTypeDef_t* huart,USART_Enable_t copy_eEnable)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_UE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <UART_vEnale+0x5c>)
 8002e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <UART_vEnale+0x5c>)
 8002e3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e46:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eEnable<<USART_CR1_UE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <UART_vEnale+0x5c>)
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	035b      	lsls	r3, r3, #13
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <UART_vEnale+0x5c>)
 8002e64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	20000154 	.word	0x20000154

08002e7c <UART_vSetOversamplingMode>:
static void UART_vSetOversamplingMode(USART_HandleTypeDef_t* huart,USART_Oversampling_Mode_t copy_eOversampling_Mode)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR1 &=~ (0b1<<USART_CR1_OVER8);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <UART_vSetOversamplingMode+0x5c>)
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <UART_vSetOversamplingMode+0x5c>)
 8002e9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea6:	60da      	str	r2, [r3, #12]
	USARTPeripheral[huart->USART_ID]->USART_CR1 |= (copy_eOversampling_Mode<<USART_CR1_OVER8);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <UART_vSetOversamplingMode+0x5c>)
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	03db      	lsls	r3, r3, #15
 8002eba:	4619      	mov	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <UART_vSetOversamplingMode+0x5c>)
 8002ec4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	60da      	str	r2, [r3, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20000154 	.word	0x20000154

08002edc <UART_vSetStopBits>:


static void UART_vSetStopBits(USART_HandleTypeDef_t* huart,USART_STOP_bits_t copy_eSTOP_bits)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR2 &=~ (0b11<<USART_CR2_STOP);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <UART_vSetStopBits+0x5c>)
 8002ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4619      	mov	r1, r3
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <UART_vSetStopBits+0x5c>)
 8002efe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f02:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002f06:	611a      	str	r2, [r3, #16]
	USARTPeripheral[huart->USART_ID]->USART_CR2 |= (copy_eSTOP_bits<<USART_CR2_STOP);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <UART_vSetStopBits+0x5c>)
 8002f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	031b      	lsls	r3, r3, #12
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <UART_vSetStopBits+0x5c>)
 8002f24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	611a      	str	r2, [r3, #16]

}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	20000154 	.word	0x20000154

08002f3c <UART_vSetOneSampleBitMethod>:
static void UART_vSetOneSampleBitMethod(USART_HandleTypeDef_t* huart,USART_One_sample_bit_method_t copy_eOne_sample_bit_method)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR3 &=~ (0b1<<USART_CR3_ONEBIT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <UART_vSetOneSampleBitMethod+0x5c>)
 8002f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <UART_vSetOneSampleBitMethod+0x5c>)
 8002f5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f66:	615a      	str	r2, [r3, #20]
	USARTPeripheral[huart->USART_ID]->USART_CR3 |= (copy_eOne_sample_bit_method<<USART_CR3_ONEBIT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <UART_vSetOneSampleBitMethod+0x5c>)
 8002f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	02db      	lsls	r3, r3, #11
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <UART_vSetOneSampleBitMethod+0x5c>)
 8002f84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	615a      	str	r2, [r3, #20]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	20000154 	.word	0x20000154

08002f9c <UART_vDMAEnablReceiver>:

static void UART_vDMAEnablReceiver(USART_HandleTypeDef_t* huart,USART_DMA_enable_receiver_t copy_eDMA_enable_receiver)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR3 &=~ (0b1<<USART_CR3_DMAR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <UART_vDMAEnablReceiver+0x5c>)
 8002fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <UART_vDMAEnablReceiver+0x5c>)
 8002fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fc6:	615a      	str	r2, [r3, #20]
	USARTPeripheral[huart->USART_ID]->USART_CR3 |= (copy_eDMA_enable_receiver<<USART_CR3_DMAR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <UART_vDMAEnablReceiver+0x5c>)
 8002fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	4619      	mov	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <UART_vDMAEnablReceiver+0x5c>)
 8002fe4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	615a      	str	r2, [r3, #20]

}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20000154 	.word	0x20000154

08002ffc <UART_vDMAEnableTransmitter>:

static void UART_vDMAEnableTransmitter(USART_HandleTypeDef_t* huart,USART_DMA_enable_transmitter_t copy_eDMA_enable_transmitter)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR3 &=~ (0b1<<USART_CR3_DMAT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <UART_vDMAEnableTransmitter+0x5c>)
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	4619      	mov	r1, r3
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <UART_vDMAEnableTransmitter+0x5c>)
 800301e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003026:	615a      	str	r2, [r3, #20]
	USARTPeripheral[huart->USART_ID]->USART_CR3 |= (copy_eDMA_enable_transmitter<<USART_CR3_DMAT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <UART_vDMAEnableTransmitter+0x5c>)
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	01db      	lsls	r3, r3, #7
 800303a:	4619      	mov	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <UART_vDMAEnableTransmitter+0x5c>)
 8003044:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8003048:	430a      	orrs	r2, r1
 800304a:	615a      	str	r2, [r3, #20]

}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	20000154 	.word	0x20000154

0800305c <UART_vEnableErrorInterrupt>:

static void UART_vEnableErrorInterrupt(USART_HandleTypeDef_t* huart,USART_Interrupt_Enable_t copy_eInterrupt_Enable)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
	USARTPeripheral[huart->USART_ID]->USART_CR3 &=~ (0b1<<USART_CR3_EIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <UART_vEnableErrorInterrupt+0x58>)
 8003070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <UART_vEnableErrorInterrupt+0x58>)
 800307e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	615a      	str	r2, [r3, #20]
	USARTPeripheral[huart->USART_ID]->USART_CR3 |= (copy_eInterrupt_Enable<<USART_CR3_EIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <UART_vEnableErrorInterrupt+0x58>)
 8003090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003094:	6959      	ldr	r1, [r3, #20]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <UART_vEnableErrorInterrupt+0x58>)
 80030a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	615a      	str	r2, [r3, #20]

}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	20000154 	.word	0x20000154

080030b8 <UART_vSetBaudRate>:

static void UART_vSetBaudRate(USART_HandleTypeDef_t* huart,uint32_t copy_u32BaudRate)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
	uint8_t sampling =0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
	if(huart->OverSamplingMode == oversampling_by_16)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7adb      	ldrb	r3, [r3, #11]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <UART_vSetBaudRate+0x1c>
	{
		sampling=16;
 80030ce:	2310      	movs	r3, #16
 80030d0:	75fb      	strb	r3, [r7, #23]
 80030d2:	e005      	b.n	80030e0 <UART_vSetBaudRate+0x28>
	}
	else if (huart->OverSamplingMode == oversampling_by_8)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7adb      	ldrb	r3, [r3, #11]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <UART_vSetBaudRate+0x28>
	{
		sampling=8;
 80030dc:	2308      	movs	r3, #8
 80030de:	75fb      	strb	r3, [r7, #23]

	}
	uint32_t Result= (((uint64_t)16000000/16)*1000)/copy_u32BaudRate;
 80030e0:	4a33      	ldr	r2, [pc, #204]	; (80031b0 <UART_vSetBaudRate+0xf8>)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	613b      	str	r3, [r7, #16]
	uint32_t Mantissa= Result/1000; //Result / 1000;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <UART_vSetBaudRate+0xfc>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	60fb      	str	r3, [r7, #12]
	uint32_t Fraction= (((Result%1000) *sampling )+500)/1000; //((Result % 1000)*16 +500)/1000;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <UART_vSetBaudRate+0xfc>)
 80030fa:	fba3 1302 	umull	r1, r3, r3, r2
 80030fe:	099b      	lsrs	r3, r3, #6
 8003100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	7dfa      	ldrb	r2, [r7, #23]
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003114:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <UART_vSetBaudRate+0xfc>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	099b      	lsrs	r3, r3, #6
 800311c:	60bb      	str	r3, [r7, #8]

	USARTPeripheral[huart->USART_ID]->USART_BRR &=~ (0b1111<<0);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <UART_vSetBaudRate+0x100>)
 8003126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4619      	mov	r1, r3
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <UART_vSetBaudRate+0x100>)
 8003134:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003138:	f022 020f 	bic.w	r2, r2, #15
 800313c:	609a      	str	r2, [r3, #8]
	USARTPeripheral[huart->USART_ID]->USART_BRR |= (Fraction<<0);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <UART_vSetBaudRate+0x100>)
 8003146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <UART_vSetBaudRate+0x100>)
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]

	USARTPeripheral[huart->USART_ID]->USART_BRR &=~ (0b111111111111<<4);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <UART_vSetBaudRate+0x100>)
 8003166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	7812      	ldrb	r2, [r2, #0]
 8003170:	4611      	mov	r1, r2
 8003172:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <UART_vSetBaudRate+0x100>)
 8003174:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003178:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003180:	6093      	str	r3, [r2, #8]
	USARTPeripheral[huart->USART_ID]->USART_BRR |= (Mantissa<<4);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <UART_vSetBaudRate+0x100>)
 800318a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	011a      	lsls	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <UART_vSetBaudRate+0x100>)
 800319c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]

}
 80031a4:	bf00      	nop
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	3b9aca00 	.word	0x3b9aca00
 80031b4:	10624dd3 	.word	0x10624dd3
 80031b8:	20000154 	.word	0x20000154

080031bc <APP_Services_Init>:

//====================================================================
//====================================================================

void APP_Services_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	 *  INITIALIZATION PART
	 **********************/


	// SPI
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOAEN);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe ffcf 	bl	8002164 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);
 80031c6:	2002      	movs	r0, #2
 80031c8:	f7fe ffcc 	bl	8002164 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOBEN);
 80031cc:	2001      	movs	r0, #1
 80031ce:	f7fe ffc9 	bl	8002164 <RCC_AHB1EnableCLK>

	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
 80031d2:	2015      	movs	r0, #21
 80031d4:	f7fe ffc6 	bl	8002164 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA2EN);
 80031d8:	2016      	movs	r0, #22
 80031da:	f7fe ffc3 	bl	8002164 <RCC_AHB1EnableCLK>

	RCC_APB1EnableCLK(RCC_APB1ENR_USART2EN);
 80031de:	2011      	movs	r0, #17
 80031e0:	f7fe ffd8 	bl	8002194 <RCC_APB1EnableCLK>
	RCC_APB1EnableCLK(RCC_APB1ENR_SPI3EN);
 80031e4:	200f      	movs	r0, #15
 80031e6:	f7fe ffd5 	bl	8002194 <RCC_APB1EnableCLK>
	RCC_APB1EnableCLK(RCC_APB1ENR_SPI2EN);
 80031ea:	200e      	movs	r0, #14
 80031ec:	f7fe ffd2 	bl	8002194 <RCC_APB1EnableCLK>

	RCC_APB2EnableCLK(RCC_APB2ENR_SPI1EN);
 80031f0:	200c      	movs	r0, #12
 80031f2:	f7fe ffe7 	bl	80021c4 <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(RCC_APB2ENR_SPI4EN);
 80031f6:	200d      	movs	r0, #13
 80031f8:	f7fe ffe4 	bl	80021c4 <RCC_APB2EnableCLK>

	GPIO_u8PinInit(&SPI_PinSCK);  // A5
 80031fc:	4827      	ldr	r0, [pc, #156]	; (800329c <APP_Services_Init+0xe0>)
 80031fe:	f7fe fa7b 	bl	80016f8 <GPIO_u8PinInit>
	GPIO_u8PinInit(&SPI_PinMISO); // A6
 8003202:	4827      	ldr	r0, [pc, #156]	; (80032a0 <APP_Services_Init+0xe4>)
 8003204:	f7fe fa78 	bl	80016f8 <GPIO_u8PinInit>
	GPIO_u8PinInit(&SPI_PinMOSI); // A7
 8003208:	4826      	ldr	r0, [pc, #152]	; (80032a4 <APP_Services_Init+0xe8>)
 800320a:	f7fe fa75 	bl	80016f8 <GPIO_u8PinInit>
	//	GPIO_u8PinInit(&SPI_PinCS);   // B6 useless

	SPI_vInit(&SPI_ourSPI);
 800320e:	4826      	ldr	r0, [pc, #152]	; (80032a8 <APP_Services_Init+0xec>)
 8003210:	f7fe fff0 	bl	80021f4 <SPI_vInit>
	//UART
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOAEN);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe ffa5 	bl	8002164 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);
 800321a:	2002      	movs	r0, #2
 800321c:	f7fe ffa2 	bl	8002164 <RCC_AHB1EnableCLK>

	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
 8003220:	2015      	movs	r0, #21
 8003222:	f7fe ff9f 	bl	8002164 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA2EN);
 8003226:	2016      	movs	r0, #22
 8003228:	f7fe ff9c 	bl	8002164 <RCC_AHB1EnableCLK>

	RCC_APB1EnableCLK(RCC_APB1ENR_USART2EN);
 800322c:	2011      	movs	r0, #17
 800322e:	f7fe ffb1 	bl	8002194 <RCC_APB1EnableCLK>
	RCC_APB1EnableCLK(RCC_APB1ENR_SPI3EN);
 8003232:	200f      	movs	r0, #15
 8003234:	f7fe ffae 	bl	8002194 <RCC_APB1EnableCLK>

	GPIO_u8PinInit(&UART_PINTX); // A2
 8003238:	481c      	ldr	r0, [pc, #112]	; (80032ac <APP_Services_Init+0xf0>)
 800323a:	f7fe fa5d 	bl	80016f8 <GPIO_u8PinInit>
	GPIO_u8PinInit(&UART_PINRX); // A3
 800323e:	481c      	ldr	r0, [pc, #112]	; (80032b0 <APP_Services_Init+0xf4>)
 8003240:	f7fe fa5a 	bl	80016f8 <GPIO_u8PinInit>
	UART_vInit( &UART_ourUsart);
 8003244:	481b      	ldr	r0, [pc, #108]	; (80032b4 <APP_Services_Init+0xf8>)
 8003246:	f7ff fab9 	bl	80027bc <UART_vInit>
	DMA_vInit( &UART_DMA_Uart);
 800324a:	481b      	ldr	r0, [pc, #108]	; (80032b8 <APP_Services_Init+0xfc>)
 800324c:	f7fd f88c 	bl	8000368 <DMA_vInit>

	// I2C
	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
 8003250:	2015      	movs	r0, #21
 8003252:	f7fe ff87 	bl	8002164 <RCC_AHB1EnableCLK>
	RCC_APB1EnableCLK(RCC_APB1ENR_I2C1EN);
 8003256:	2015      	movs	r0, #21
 8003258:	f7fe ff9c 	bl	8002194 <RCC_APB1EnableCLK>


	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOBEN);
 800325c:	2001      	movs	r0, #1
 800325e:	f7fe ff81 	bl	8002164 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);
 8003262:	2002      	movs	r0, #2
 8003264:	f7fe ff7e 	bl	8002164 <RCC_AHB1EnableCLK>

	//Enable DMA interrupts
	NVIC_vEnableInterrupt(NVIC_DMA1_Stream7);
 8003268:	202f      	movs	r0, #47	; 0x2f
 800326a:	f7fe ff55 	bl	8002118 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(NVIC_DMA1_Stream0);
 800326e:	200b      	movs	r0, #11
 8003270:	f7fe ff52 	bl	8002118 <NVIC_vEnableInterrupt>

	DMA_vInit(&I2C_DMA_I2C1_TX);
 8003274:	4811      	ldr	r0, [pc, #68]	; (80032bc <APP_Services_Init+0x100>)
 8003276:	f7fd f877 	bl	8000368 <DMA_vInit>
	DMA_vInit(&I2C_DMA_I2C1_RX);
 800327a:	4811      	ldr	r0, [pc, #68]	; (80032c0 <APP_Services_Init+0x104>)
 800327c:	f7fd f874 	bl	8000368 <DMA_vInit>

	GPIO_u8PinInit(&I2C_PinSCK); // B6
 8003280:	4810      	ldr	r0, [pc, #64]	; (80032c4 <APP_Services_Init+0x108>)
 8003282:	f7fe fa39 	bl	80016f8 <GPIO_u8PinInit>
	GPIO_u8PinInit(&I2C_PinSDA); // B7
 8003286:	4810      	ldr	r0, [pc, #64]	; (80032c8 <APP_Services_Init+0x10c>)
 8003288:	f7fe fa36 	bl	80016f8 <GPIO_u8PinInit>
	I2C_vInit(&I2C_ourI2C);
 800328c:	480f      	ldr	r0, [pc, #60]	; (80032cc <APP_Services_Init+0x110>)
 800328e:	f7fe fbb1 	bl	80019f4 <I2C_vInit>

	//to EXTI
	GPIO_u8PinInit(&Pin_To_EXTI); // A1
 8003292:	480f      	ldr	r0, [pc, #60]	; (80032d0 <APP_Services_Init+0x114>)
 8003294:	f7fe fa30 	bl	80016f8 <GPIO_u8PinInit>


	//===============================================================
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200000b8 	.word	0x200000b8
 80032a0:	200000c4 	.word	0x200000c4
 80032a4:	200000d0 	.word	0x200000d0
 80032a8:	200000dc 	.word	0x200000dc
 80032ac:	200000fc 	.word	0x200000fc
 80032b0:	20000108 	.word	0x20000108
 80032b4:	20000114 	.word	0x20000114
 80032b8:	2000012c 	.word	0x2000012c
 80032bc:	20000040 	.word	0x20000040
 80032c0:	20000068 	.word	0x20000068
 80032c4:	20000094 	.word	0x20000094
 80032c8:	200000a0 	.word	0x200000a0
 80032cc:	20000090 	.word	0x20000090
 80032d0:	2000016c 	.word	0x2000016c

080032d4 <APP_Services_Get_Time_Date_User>:




void APP_Services_Get_Time_Date_User(uint8_t* ArrToRec)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Please set the Date \n\r");
 80032dc:	4927      	ldr	r1, [pc, #156]	; (800337c <APP_Services_Get_Time_Date_User+0xa8>)
 80032de:	4828      	ldr	r0, [pc, #160]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 80032e0:	f7ff fae4 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"DD/MM/YY\r");
 80032e4:	4927      	ldr	r1, [pc, #156]	; (8003384 <APP_Services_Get_Time_Date_User+0xb0>)
 80032e6:	4826      	ldr	r0, [pc, #152]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 80032e8:	f7ff fae0 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, ArrToRec+RTC_DATE_REGISER_ADDRESS, GetCurrentDate_SIZE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	2202      	movs	r2, #2
 80032f2:	4619      	mov	r1, r3
 80032f4:	4822      	ldr	r0, [pc, #136]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 80032f6:	f7ff faff 	bl	80028f8 <UART_vReceiveSynchSize>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"/");
 80032fa:	4923      	ldr	r1, [pc, #140]	; (8003388 <APP_Services_Get_Time_Date_User+0xb4>)
 80032fc:	4820      	ldr	r0, [pc, #128]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 80032fe:	f7ff fad5 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, ArrToRec+RTC_MONTH_REGISER_ADDRESS, GetCurrentDate_SIZE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3305      	adds	r3, #5
 8003306:	2202      	movs	r2, #2
 8003308:	4619      	mov	r1, r3
 800330a:	481d      	ldr	r0, [pc, #116]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 800330c:	f7ff faf4 	bl	80028f8 <UART_vReceiveSynchSize>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"/");
 8003310:	491d      	ldr	r1, [pc, #116]	; (8003388 <APP_Services_Get_Time_Date_User+0xb4>)
 8003312:	481b      	ldr	r0, [pc, #108]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003314:	f7ff faca 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, ArrToRec+RTC_YEAR_REGISER_ADDRESS, GetCurrentDate_SIZE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3306      	adds	r3, #6
 800331c:	2202      	movs	r2, #2
 800331e:	4619      	mov	r1, r3
 8003320:	4817      	ldr	r0, [pc, #92]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003322:	f7ff fae9 	bl	80028f8 <UART_vReceiveSynchSize>

	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"\n\rPlease set the Time \n\r");
 8003326:	4919      	ldr	r1, [pc, #100]	; (800338c <APP_Services_Get_Time_Date_User+0xb8>)
 8003328:	4815      	ldr	r0, [pc, #84]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 800332a:	f7ff fabf 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"HH/MM/SS\r");
 800332e:	4918      	ldr	r1, [pc, #96]	; (8003390 <APP_Services_Get_Time_Date_User+0xbc>)
 8003330:	4813      	ldr	r0, [pc, #76]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003332:	f7ff fabb 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, ArrToRec+RTC_HOURS_REGISER_ADDRESS, GetCurrentDate_SIZE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3302      	adds	r3, #2
 800333a:	2202      	movs	r2, #2
 800333c:	4619      	mov	r1, r3
 800333e:	4810      	ldr	r0, [pc, #64]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003340:	f7ff fada 	bl	80028f8 <UART_vReceiveSynchSize>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"/");
 8003344:	4910      	ldr	r1, [pc, #64]	; (8003388 <APP_Services_Get_Time_Date_User+0xb4>)
 8003346:	480e      	ldr	r0, [pc, #56]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003348:	f7ff fab0 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, ArrToRec+RTC_MINUTES_REGISER_ADDRESS, GetCurrentDate_SIZE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	2202      	movs	r2, #2
 8003352:	4619      	mov	r1, r3
 8003354:	480a      	ldr	r0, [pc, #40]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003356:	f7ff facf 	bl	80028f8 <UART_vReceiveSynchSize>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"/");
 800335a:	490b      	ldr	r1, [pc, #44]	; (8003388 <APP_Services_Get_Time_Date_User+0xb4>)
 800335c:	4808      	ldr	r0, [pc, #32]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 800335e:	f7ff faa5 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, ArrToRec+RTC_SECONDS_REGISER_ADDRESS, GetCurrentDate_SIZE);
 8003362:	2202      	movs	r2, #2
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4806      	ldr	r0, [pc, #24]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003368:	f7ff fac6 	bl	80028f8 <UART_vReceiveSynchSize>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"\n\r");
 800336c:	4909      	ldr	r1, [pc, #36]	; (8003394 <APP_Services_Get_Time_Date_User+0xc0>)
 800336e:	4804      	ldr	r0, [pc, #16]	; (8003380 <APP_Services_Get_Time_Date_User+0xac>)
 8003370:	f7ff fa9c 	bl	80028ac <UART_vSendStringSynch>

}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08003de4 	.word	0x08003de4
 8003380:	20000114 	.word	0x20000114
 8003384:	08003dfc 	.word	0x08003dfc
 8003388:	08003e08 	.word	0x08003e08
 800338c:	08003e0c 	.word	0x08003e0c
 8003390:	08003e28 	.word	0x08003e28
 8003394:	08003e34 	.word	0x08003e34

08003398 <APP_Check_Password>:
uint8_t APP_Check_Password(uint8_t* APP_password)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	if (	APP_password[0] == 1 &&
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d110      	bne.n	80033ca <APP_Check_Password+0x32>
			APP_password[1] == 2 &&
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3301      	adds	r3, #1
 80033ac:	781b      	ldrb	r3, [r3, #0]
	if (	APP_password[0] == 1 &&
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d10b      	bne.n	80033ca <APP_Check_Password+0x32>
			APP_password[2] == 3 &&
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3302      	adds	r3, #2
 80033b6:	781b      	ldrb	r3, [r3, #0]
			APP_password[1] == 2 &&
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d106      	bne.n	80033ca <APP_Check_Password+0x32>
			APP_password[3] == 4)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3303      	adds	r3, #3
 80033c0:	781b      	ldrb	r3, [r3, #0]
			APP_password[2] == 3 &&
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d101      	bne.n	80033ca <APP_Check_Password+0x32>
	{
		return 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <APP_Check_Password+0x34>
	}
	return 0;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <APP_SignInScreen_Services>:
static void Set_RedLED();
static void Set_GreenLED();

void APP_SignInScreen_Services()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
	uint8_t APP_password [10]={0};
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	f107 0308 	add.w	r3, r7, #8
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	809a      	strh	r2, [r3, #4]
	uint8_t correct_password=0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
	uint8_t wrong_password_counter=0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73bb      	strb	r3, [r7, #14]

	while (correct_password==0)
 80033f4:	e03b      	b.n	800346e <APP_SignInScreen_Services+0x96>
	{
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Hello Please enter the password\n\r");
 80033f6:	4922      	ldr	r1, [pc, #136]	; (8003480 <APP_SignInScreen_Services+0xa8>)
 80033f8:	4822      	ldr	r0, [pc, #136]	; (8003484 <APP_SignInScreen_Services+0xac>)
 80033fa:	f7ff fa57 	bl	80028ac <UART_vSendStringSynch>
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"XXXX\r");
 80033fe:	4922      	ldr	r1, [pc, #136]	; (8003488 <APP_SignInScreen_Services+0xb0>)
 8003400:	4820      	ldr	r0, [pc, #128]	; (8003484 <APP_SignInScreen_Services+0xac>)
 8003402:	f7ff fa53 	bl	80028ac <UART_vSendStringSynch>
		UART_vReceiveSynchSize(&UART_ourUsart, APP_password+0, 1);
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	2201      	movs	r2, #1
 800340a:	4619      	mov	r1, r3
 800340c:	481d      	ldr	r0, [pc, #116]	; (8003484 <APP_SignInScreen_Services+0xac>)
 800340e:	f7ff fa73 	bl	80028f8 <UART_vReceiveSynchSize>
		UART_vReceiveSynchSize(&UART_ourUsart, APP_password+1, 1);
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	3301      	adds	r3, #1
 8003416:	2201      	movs	r2, #1
 8003418:	4619      	mov	r1, r3
 800341a:	481a      	ldr	r0, [pc, #104]	; (8003484 <APP_SignInScreen_Services+0xac>)
 800341c:	f7ff fa6c 	bl	80028f8 <UART_vReceiveSynchSize>
		UART_vReceiveSynchSize(&UART_ourUsart, APP_password+2, 1);
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	3302      	adds	r3, #2
 8003424:	2201      	movs	r2, #1
 8003426:	4619      	mov	r1, r3
 8003428:	4816      	ldr	r0, [pc, #88]	; (8003484 <APP_SignInScreen_Services+0xac>)
 800342a:	f7ff fa65 	bl	80028f8 <UART_vReceiveSynchSize>
		UART_vReceiveSynchSize(&UART_ourUsart, APP_password+3, 1);
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	3303      	adds	r3, #3
 8003432:	2201      	movs	r2, #1
 8003434:	4619      	mov	r1, r3
 8003436:	4813      	ldr	r0, [pc, #76]	; (8003484 <APP_SignInScreen_Services+0xac>)
 8003438:	f7ff fa5e 	bl	80028f8 <UART_vReceiveSynchSize>

		if (APP_Check_Password(APP_password))
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ffaa 	bl	8003398 <APP_Check_Password>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <APP_SignInScreen_Services+0x7c>
		{
			Set_GreenLED();
 800344a:	f000 fb0d 	bl	8003a68 <Set_GreenLED>
			correct_password=1;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
 8003452:	e00c      	b.n	800346e <APP_SignInScreen_Services+0x96>
		}
		else
		{
			Set_RedLED();
 8003454:	f000 faf8 	bl	8003a48 <Set_RedLED>
			wrong_password_counter++;
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	3301      	adds	r3, #1
 800345c:	73bb      	strb	r3, [r7, #14]
			if (wrong_password_counter == 3)
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d104      	bne.n	800346e <APP_SignInScreen_Services+0x96>
			{
				wrong_password_counter=0;
 8003464:	2300      	movs	r3, #0
 8003466:	73bb      	strb	r3, [r7, #14]
				STK_vSetBusyWait(6000000);//3 sec block
 8003468:	4808      	ldr	r0, [pc, #32]	; (800348c <APP_SignInScreen_Services+0xb4>)
 800346a:	f7ff f981 	bl	8002770 <STK_vSetBusyWait>
	while (correct_password==0)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0c0      	beq.n	80033f6 <APP_SignInScreen_Services+0x1e>
			}

		}
	}

}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	08003e38 	.word	0x08003e38
 8003484:	20000114 	.word	0x20000114
 8003488:	08003e5c 	.word	0x08003e5c
 800348c:	005b8d80 	.word	0x005b8d80

08003490 <APP_WelcomeScreen_Services_Welcome>:
void APP_WelcomeScreen_Services_Welcome()
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
	uint8_t APP_CurrentData [10]={0};
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	809a      	strh	r2, [r3, #4]

	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Hello Welcome to The Real Time Alarm\n\r");
 80034a4:	490b      	ldr	r1, [pc, #44]	; (80034d4 <APP_WelcomeScreen_Services_Welcome+0x44>)
 80034a6:	480c      	ldr	r0, [pc, #48]	; (80034d8 <APP_WelcomeScreen_Services_Welcome+0x48>)
 80034a8:	f7ff fa00 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Please Update the real date and time \n\r");
 80034ac:	490b      	ldr	r1, [pc, #44]	; (80034dc <APP_WelcomeScreen_Services_Welcome+0x4c>)
 80034ae:	480a      	ldr	r0, [pc, #40]	; (80034d8 <APP_WelcomeScreen_Services_Welcome+0x48>)
 80034b0:	f7ff f9fc 	bl	80028ac <UART_vSendStringSynch>
	APP_Services_Get_Time_Date_User(APP_CurrentData);
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff0c 	bl	80032d4 <APP_Services_Get_Time_Date_User>
	RTC_ProgrammingArr(&I2C_ourI2C,&I2C_DMA_I2C1_TX,APP_CurrentData);
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	461a      	mov	r2, r3
 80034c0:	4907      	ldr	r1, [pc, #28]	; (80034e0 <APP_WelcomeScreen_Services_Welcome+0x50>)
 80034c2:	4808      	ldr	r0, [pc, #32]	; (80034e4 <APP_WelcomeScreen_Services_Welcome+0x54>)
 80034c4:	f7fc fee2 	bl	800028c <RTC_ProgrammingArr>
	APP_HASH_ON_SCREEN();
 80034c8:	f000 fab2 	bl	8003a30 <APP_HASH_ON_SCREEN>

}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	08003e64 	.word	0x08003e64
 80034d8:	20000114 	.word	0x20000114
 80034dc:	08003e8c 	.word	0x08003e8c
 80034e0:	20000040 	.word	0x20000040
 80034e4:	20000090 	.word	0x20000090

080034e8 <APP_MainMenu>:
uint8_t APP_MainMenu()
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
	uint8_t Option_MainMenu;
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Please Select Which Option do you need\n\r");
 80034ee:	4912      	ldr	r1, [pc, #72]	; (8003538 <APP_MainMenu+0x50>)
 80034f0:	4812      	ldr	r0, [pc, #72]	; (800353c <APP_MainMenu+0x54>)
 80034f2:	f7ff f9db 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"1.Display Time and Date\n\r");
 80034f6:	4912      	ldr	r1, [pc, #72]	; (8003540 <APP_MainMenu+0x58>)
 80034f8:	4810      	ldr	r0, [pc, #64]	; (800353c <APP_MainMenu+0x54>)
 80034fa:	f7ff f9d7 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"2.Set Time and Date\n\r");
 80034fe:	4911      	ldr	r1, [pc, #68]	; (8003544 <APP_MainMenu+0x5c>)
 8003500:	480e      	ldr	r0, [pc, #56]	; (800353c <APP_MainMenu+0x54>)
 8003502:	f7ff f9d3 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"3.Set Alarm\n\r");
 8003506:	4910      	ldr	r1, [pc, #64]	; (8003548 <APP_MainMenu+0x60>)
 8003508:	480c      	ldr	r0, [pc, #48]	; (800353c <APP_MainMenu+0x54>)
 800350a:	f7ff f9cf 	bl	80028ac <UART_vSendStringSynch>

	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"X\r");
 800350e:	490f      	ldr	r1, [pc, #60]	; (800354c <APP_MainMenu+0x64>)
 8003510:	480a      	ldr	r0, [pc, #40]	; (800353c <APP_MainMenu+0x54>)
 8003512:	f7ff f9cb 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, &Option_MainMenu, 1);
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	2201      	movs	r2, #1
 800351a:	4619      	mov	r1, r3
 800351c:	4807      	ldr	r0, [pc, #28]	; (800353c <APP_MainMenu+0x54>)
 800351e:	f7ff f9eb 	bl	80028f8 <UART_vReceiveSynchSize>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"\n\r");
 8003522:	490b      	ldr	r1, [pc, #44]	; (8003550 <APP_MainMenu+0x68>)
 8003524:	4805      	ldr	r0, [pc, #20]	; (800353c <APP_MainMenu+0x54>)
 8003526:	f7ff f9c1 	bl	80028ac <UART_vSendStringSynch>
	APP_HASH_ON_SCREEN();
 800352a:	f000 fa81 	bl	8003a30 <APP_HASH_ON_SCREEN>

	return Option_MainMenu;
 800352e:	79fb      	ldrb	r3, [r7, #7]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	08003eb4 	.word	0x08003eb4
 800353c:	20000114 	.word	0x20000114
 8003540:	08003ee0 	.word	0x08003ee0
 8003544:	08003efc 	.word	0x08003efc
 8003548:	08003f14 	.word	0x08003f14
 800354c:	08003f24 	.word	0x08003f24
 8003550:	08003e34 	.word	0x08003e34

08003554 <APP_Option1_Services_Display_Time_Date>:

//DONE
void APP_Option1_Services_Display_Time_Date()
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
	uint8_t APP_DataFromRTC [20]={0};
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]

	APP_SPIFrame[SPI_FRAME_TYPE_ID]=SPI_FRAME_ID_DISPLAY_TIME_DATE;
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <APP_Option1_Services_Display_Time_Date+0x64>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
	RTC_Get_CurrentTime(&I2C_ourI2C,&I2C_DMA_I2C1_TX,&I2C_DMA_I2C1_RX,APP_DataFromRTC);
 8003570:	463b      	mov	r3, r7
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <APP_Option1_Services_Display_Time_Date+0x68>)
 8003574:	4912      	ldr	r1, [pc, #72]	; (80035c0 <APP_Option1_Services_Display_Time_Date+0x6c>)
 8003576:	4813      	ldr	r0, [pc, #76]	; (80035c4 <APP_Option1_Services_Display_Time_Date+0x70>)
 8003578:	f7fc feb2 	bl	80002e0 <RTC_Get_CurrentTime>
	for (uint8_t i=0;i<SPI_FRAME_DATA_DATE_TOTAL_SIZE;i++)
 800357c:	2300      	movs	r3, #0
 800357e:	75fb      	strb	r3, [r7, #23]
 8003580:	e00b      	b.n	800359a <APP_Option1_Services_Display_Time_Date+0x46>
	{
		APP_SPIFrame[i+1]=APP_DataFromRTC[i] ;
 8003582:	7dfa      	ldrb	r2, [r7, #23]
 8003584:	7dfb      	ldrb	r3, [r7, #23]
 8003586:	3301      	adds	r3, #1
 8003588:	3218      	adds	r2, #24
 800358a:	443a      	add	r2, r7
 800358c:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8003590:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <APP_Option1_Services_Display_Time_Date+0x64>)
 8003592:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0;i<SPI_FRAME_DATA_DATE_TOTAL_SIZE;i++)
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	3301      	adds	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	2b07      	cmp	r3, #7
 800359e:	d9f0      	bls.n	8003582 <APP_Option1_Services_Display_Time_Date+0x2e>
	}
	APP_HASH_ON_SCREEN();
 80035a0:	f000 fa46 	bl	8003a30 <APP_HASH_ON_SCREEN>
	SPI_vSendDataAsynch(&SPI_ourSPI, 10,APP_SPIFrame);
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <APP_Option1_Services_Display_Time_Date+0x64>)
 80035a6:	210a      	movs	r1, #10
 80035a8:	4807      	ldr	r0, [pc, #28]	; (80035c8 <APP_Option1_Services_Display_Time_Date+0x74>)
 80035aa:	f000 faf9 	bl	8003ba0 <SPI_vSendDataAsynch>
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000178 	.word	0x20000178
 80035bc:	20000068 	.word	0x20000068
 80035c0:	20000040 	.word	0x20000040
 80035c4:	20000090 	.word	0x20000090
 80035c8:	200000dc 	.word	0x200000dc

080035cc <APP_Oprion2_Services_Set_Time_Data>:
//DONE
void APP_Oprion2_Services_Set_Time_Data()
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
	uint8_t APP_CurrentData [10]={0};
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	809a      	strh	r2, [r3, #4]

	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Update The Current Time and Date\n\r");
 80035e0:	4909      	ldr	r1, [pc, #36]	; (8003608 <APP_Oprion2_Services_Set_Time_Data+0x3c>)
 80035e2:	480a      	ldr	r0, [pc, #40]	; (800360c <APP_Oprion2_Services_Set_Time_Data+0x40>)
 80035e4:	f7ff f962 	bl	80028ac <UART_vSendStringSynch>
	APP_Services_Get_Time_Date_User(APP_CurrentData);
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fe72 	bl	80032d4 <APP_Services_Get_Time_Date_User>
	RTC_ProgrammingArr(&I2C_ourI2C,&I2C_DMA_I2C1_TX,APP_CurrentData);
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	461a      	mov	r2, r3
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <APP_Oprion2_Services_Set_Time_Data+0x44>)
 80035f6:	4807      	ldr	r0, [pc, #28]	; (8003614 <APP_Oprion2_Services_Set_Time_Data+0x48>)
 80035f8:	f7fc fe48 	bl	800028c <RTC_ProgrammingArr>
	APP_HASH_ON_SCREEN();
 80035fc:	f000 fa18 	bl	8003a30 <APP_HASH_ON_SCREEN>

}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	08003f28 	.word	0x08003f28
 800360c:	20000114 	.word	0x20000114
 8003610:	20000040 	.word	0x20000040
 8003614:	20000090 	.word	0x20000090

08003618 <APP_Oprion3_Services_Set_Alarm_Display_Options>:

//DONE
void APP_Oprion3_Services_Set_Alarm_Display_Options()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
	uint8_t AlarmNumberData=10;
 800361e:	230a      	movs	r3, #10
 8003620:	73bb      	strb	r3, [r7, #14]
	// Display All Alarms
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Set Alarm Options\n\r");
 8003622:	495f      	ldr	r1, [pc, #380]	; (80037a0 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x188>)
 8003624:	485f      	ldr	r0, [pc, #380]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 8003626:	f7ff f941 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Please select Alarm Number\n\r");
 800362a:	495f      	ldr	r1, [pc, #380]	; (80037a8 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x190>)
 800362c:	485d      	ldr	r0, [pc, #372]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 800362e:	f7ff f93d 	bl	80028ac <UART_vSendStringSynch>
	for (uint8_t i=0 ;i<5;i++)
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	e019      	b.n	800366c <APP_Oprion3_Services_Set_Alarm_Display_Options+0x54>
	{
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*) (APP_Alarms[i].ALARM_ID));
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	4a5c      	ldr	r2, [pc, #368]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	4413      	add	r3, r2
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	4857      	ldr	r0, [pc, #348]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 8003646:	f7ff f931 	bl	80028ac <UART_vSendStringSynch>
		//		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"\n\r");
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*) (APP_Alarms[i].ALARM_NAME));
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	4a57      	ldr	r2, [pc, #348]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	3304      	adds	r3, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4619      	mov	r1, r3
 8003658:	4852      	ldr	r0, [pc, #328]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 800365a:	f7ff f927 	bl	80028ac <UART_vSendStringSynch>
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"\n\r");
 800365e:	4954      	ldr	r1, [pc, #336]	; (80037b0 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x198>)
 8003660:	4850      	ldr	r0, [pc, #320]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 8003662:	f7ff f923 	bl	80028ac <UART_vSendStringSynch>
	for (uint8_t i=0 ;i<5;i++)
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	3301      	adds	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d9e2      	bls.n	8003638 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x20>
	}
	//Receive Alarm Number
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Select Alarm: \n\r");
 8003672:	4950      	ldr	r1, [pc, #320]	; (80037b4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x19c>)
 8003674:	484b      	ldr	r0, [pc, #300]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 8003676:	f7ff f919 	bl	80028ac <UART_vSendStringSynch>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"X\r");
 800367a:	494f      	ldr	r1, [pc, #316]	; (80037b8 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x1a0>)
 800367c:	4849      	ldr	r0, [pc, #292]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 800367e:	f7ff f915 	bl	80028ac <UART_vSendStringSynch>
	UART_vReceiveSynchSize(&UART_ourUsart, &AlarmNumberData, 1);
 8003682:	f107 030e 	add.w	r3, r7, #14
 8003686:	2201      	movs	r2, #1
 8003688:	4619      	mov	r1, r3
 800368a:	4846      	ldr	r0, [pc, #280]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 800368c:	f7ff f934 	bl	80028f8 <UART_vReceiveSynchSize>
	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"\n\r");
 8003690:	4947      	ldr	r1, [pc, #284]	; (80037b0 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x198>)
 8003692:	4844      	ldr	r0, [pc, #272]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 8003694:	f7ff f90a 	bl	80028ac <UART_vSendStringSynch>
	APP_HASH_ON_SCREEN();
 8003698:	f000 f9ca 	bl	8003a30 <APP_HASH_ON_SCREEN>

	// Check if it is set before
	if (APP_Alarms[AlarmNumberData-1].ALARM_STATUS == ALARM_ALREADY_SET)
 800369c:	7bbb      	ldrb	r3, [r7, #14]
 800369e:	3b01      	subs	r3, #1
 80036a0:	4a42      	ldr	r2, [pc, #264]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	3308      	adds	r3, #8
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d106      	bne.n	80036bc <APP_Oprion3_Services_Set_Alarm_Display_Options+0xa4>
	{
		// Tell him it is set and did not come
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Alarm is SET\n\r");
 80036ae:	4943      	ldr	r1, [pc, #268]	; (80037bc <APP_Oprion3_Services_Set_Alarm_Display_Options+0x1a4>)
 80036b0:	483c      	ldr	r0, [pc, #240]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 80036b2:	f7ff f8fb 	bl	80028ac <UART_vSendStringSynch>
		APP_HASH_ON_SCREEN();
 80036b6:	f000 f9bb 	bl	8003a30 <APP_HASH_ON_SCREEN>

		APP_Alarms[AlarmNumberData-1].ALARM_STATUS=ALARM_ALREADY_SET;
		APP_HASH_ON_SCREEN();

	}
}
 80036ba:	e06d      	b.n	8003798 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x180>
		uint8_t APP_AlarmData [10]={0};
 80036bc:	2300      	movs	r3, #0
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	f107 0308 	add.w	r3, r7, #8
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	809a      	strh	r2, [r3, #4]
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Please Write Alarm Name\n\r");
 80036ca:	493d      	ldr	r1, [pc, #244]	; (80037c0 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x1a8>)
 80036cc:	4835      	ldr	r0, [pc, #212]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 80036ce:	f7ff f8ed 	bl	80028ac <UART_vSendStringSynch>
		UART_vReceiveSynchString(&UART_ourUsart, APP_AlarmName[AlarmNumberData-1]);
 80036d2:	7bbb      	ldrb	r3, [r7, #14]
 80036d4:	1e5a      	subs	r2, r3, #1
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4a39      	ldr	r2, [pc, #228]	; (80037c4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x1ac>)
 80036e0:	4413      	add	r3, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	482f      	ldr	r0, [pc, #188]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 80036e6:	f7ff f93e 	bl	8002966 <UART_vReceiveSynchString>
		APP_Alarms[AlarmNumberData-1].ALARM_NAME=APP_AlarmName[AlarmNumberData-1];
 80036ea:	7bbb      	ldrb	r3, [r7, #14]
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	7bbb      	ldrb	r3, [r7, #14]
 80036f0:	1e59      	subs	r1, r3, #1
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4a32      	ldr	r2, [pc, #200]	; (80037c4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x1ac>)
 80036fc:	441a      	add	r2, r3
 80036fe:	482b      	ldr	r0, [pc, #172]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 8003700:	010b      	lsls	r3, r1, #4
 8003702:	4403      	add	r3, r0
 8003704:	3304      	adds	r3, #4
 8003706:	601a      	str	r2, [r3, #0]
		UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"Please Set your Date and time Alarm\n\r");
 8003708:	492f      	ldr	r1, [pc, #188]	; (80037c8 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x1b0>)
 800370a:	4826      	ldr	r0, [pc, #152]	; (80037a4 <APP_Oprion3_Services_Set_Alarm_Display_Options+0x18c>)
 800370c:	f7ff f8ce 	bl	80028ac <UART_vSendStringSynch>
		APP_Services_Get_Time_Date_User(APP_AlarmData);
 8003710:	1d3b      	adds	r3, r7, #4
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fdde 	bl	80032d4 <APP_Services_Get_Time_Date_User>
		APP_Alarms[AlarmNumberData-1].ALARM_SEC=APP_AlarmData[RTC_SECONDS_REGISER_ADDRESS];
 8003718:	7bbb      	ldrb	r3, [r7, #14]
 800371a:	3b01      	subs	r3, #1
 800371c:	7939      	ldrb	r1, [r7, #4]
 800371e:	4a23      	ldr	r2, [pc, #140]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	4413      	add	r3, r2
 8003724:	3309      	adds	r3, #9
 8003726:	460a      	mov	r2, r1
 8003728:	701a      	strb	r2, [r3, #0]
		APP_Alarms[AlarmNumberData-1].ALARM_MIN=APP_AlarmData[RTC_MINUTES_REGISER_ADDRESS];
 800372a:	7bbb      	ldrb	r3, [r7, #14]
 800372c:	3b01      	subs	r3, #1
 800372e:	7979      	ldrb	r1, [r7, #5]
 8003730:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4413      	add	r3, r2
 8003736:	330a      	adds	r3, #10
 8003738:	460a      	mov	r2, r1
 800373a:	701a      	strb	r2, [r3, #0]
		APP_Alarms[AlarmNumberData-1].ALARM_HOUR=APP_AlarmData[RTC_HOURS_REGISER_ADDRESS];
 800373c:	7bbb      	ldrb	r3, [r7, #14]
 800373e:	3b01      	subs	r3, #1
 8003740:	79b9      	ldrb	r1, [r7, #6]
 8003742:	4a1a      	ldr	r2, [pc, #104]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	4413      	add	r3, r2
 8003748:	330b      	adds	r3, #11
 800374a:	460a      	mov	r2, r1
 800374c:	701a      	strb	r2, [r3, #0]
		APP_Alarms[AlarmNumberData-1].ALARM_DATE=APP_AlarmData[RTC_DATE_REGISER_ADDRESS];
 800374e:	7bbb      	ldrb	r3, [r7, #14]
 8003750:	3b01      	subs	r3, #1
 8003752:	7a39      	ldrb	r1, [r7, #8]
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	4413      	add	r3, r2
 800375a:	330d      	adds	r3, #13
 800375c:	460a      	mov	r2, r1
 800375e:	701a      	strb	r2, [r3, #0]
		APP_Alarms[AlarmNumberData-1].ALARM_MONTH=APP_AlarmData[RTC_MONTH_REGISER_ADDRESS];
 8003760:	7bbb      	ldrb	r3, [r7, #14]
 8003762:	3b01      	subs	r3, #1
 8003764:	7a79      	ldrb	r1, [r7, #9]
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	330e      	adds	r3, #14
 800376e:	460a      	mov	r2, r1
 8003770:	701a      	strb	r2, [r3, #0]
		APP_Alarms[AlarmNumberData-1].ALARM_YEAR=APP_AlarmData[RTC_YEAR_REGISER_ADDRESS];
 8003772:	7bbb      	ldrb	r3, [r7, #14]
 8003774:	3b01      	subs	r3, #1
 8003776:	7ab9      	ldrb	r1, [r7, #10]
 8003778:	4a0c      	ldr	r2, [pc, #48]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	4413      	add	r3, r2
 800377e:	330f      	adds	r3, #15
 8003780:	460a      	mov	r2, r1
 8003782:	701a      	strb	r2, [r3, #0]
		APP_Alarms[AlarmNumberData-1].ALARM_STATUS=ALARM_ALREADY_SET;
 8003784:	7bbb      	ldrb	r3, [r7, #14]
 8003786:	3b01      	subs	r3, #1
 8003788:	4a08      	ldr	r2, [pc, #32]	; (80037ac <APP_Oprion3_Services_Set_Alarm_Display_Options+0x194>)
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	4413      	add	r3, r2
 800378e:	3308      	adds	r3, #8
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
		APP_HASH_ON_SCREEN();
 8003794:	f000 f94c 	bl	8003a30 <APP_HASH_ON_SCREEN>
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	08003f4c 	.word	0x08003f4c
 80037a4:	20000114 	.word	0x20000114
 80037a8:	08003f60 	.word	0x08003f60
 80037ac:	2000018c 	.word	0x2000018c
 80037b0:	08003e34 	.word	0x08003e34
 80037b4:	08003f80 	.word	0x08003f80
 80037b8:	08003f24 	.word	0x08003f24
 80037bc:	08003f94 	.word	0x08003f94
 80037c0:	08003fa4 	.word	0x08003fa4
 80037c4:	200003dc 	.word	0x200003dc
 80037c8:	08003fc0 	.word	0x08003fc0

080037cc <APP_Periodically_Check_Alarms>:




void APP_Periodically_Check_Alarms()
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
	uint8_t APP_DataFromRTC [10]={0};
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	f107 0310 	add.w	r3, r7, #16
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	809a      	strh	r2, [r3, #4]
	RTC_Get_CurrentTime(&I2C_ourI2C,&I2C_DMA_I2C1_TX,&I2C_DMA_I2C1_RX,APP_DataFromRTC);
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	4a59      	ldr	r2, [pc, #356]	; (800394c <APP_Periodically_Check_Alarms+0x180>)
 80037e6:	495a      	ldr	r1, [pc, #360]	; (8003950 <APP_Periodically_Check_Alarms+0x184>)
 80037e8:	485a      	ldr	r0, [pc, #360]	; (8003954 <APP_Periodically_Check_Alarms+0x188>)
 80037ea:	f7fc fd79 	bl	80002e0 <RTC_Get_CurrentTime>
	uint8_t Flag_Time_Hit_Alarm[APP_TOTAL_NUMBER_OF_ALARMS]={0};
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	2300      	movs	r3, #0
 80037f4:	723b      	strb	r3, [r7, #8]
	for (uint8_t loc_AlarmNumber=0;loc_AlarmNumber<APP_TOTAL_NUMBER_OF_ALARMS;loc_AlarmNumber++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	75fb      	strb	r3, [r7, #23]
 80037fa:	e09e      	b.n	800393a <APP_Periodically_Check_Alarms+0x16e>
	{
		// compare only if alarm set and did not hit
		if (APP_Alarms[loc_AlarmNumber].ALARM_STATUS!=ALARM_ALREADY_SET)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	4a56      	ldr	r2, [pc, #344]	; (8003958 <APP_Periodically_Check_Alarms+0x18c>)
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	4413      	add	r3, r2
 8003804:	3308      	adds	r3, #8
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8092 	bne.w	8003932 <APP_Periodically_Check_Alarms+0x166>
		{
			continue;
		}
		// compare sec
		if(APP_Alarms[loc_AlarmNumber].ALARM_SEC<=APP_DataFromRTC[RTC_SECONDS_REGISER_ADDRESS])
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	4a51      	ldr	r2, [pc, #324]	; (8003958 <APP_Periodically_Check_Alarms+0x18c>)
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	4413      	add	r3, r2
 8003816:	3309      	adds	r3, #9
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	7b3b      	ldrb	r3, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d80c      	bhi.n	800383a <APP_Periodically_Check_Alarms+0x6e>
		{
			Flag_Time_Hit_Alarm[loc_AlarmNumber]|=1<<RTC_SECONDS_REGISER_ADDRESS;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	3318      	adds	r3, #24
 8003824:	443b      	add	r3, r7
 8003826:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	3318      	adds	r3, #24
 8003834:	443b      	add	r3, r7
 8003836:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
		//compare min
		if(APP_Alarms[loc_AlarmNumber].ALARM_MIN==APP_DataFromRTC[RTC_MINUTES_REGISER_ADDRESS])
 800383a:	7dfb      	ldrb	r3, [r7, #23]
 800383c:	4a46      	ldr	r2, [pc, #280]	; (8003958 <APP_Periodically_Check_Alarms+0x18c>)
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	4413      	add	r3, r2
 8003842:	330a      	adds	r3, #10
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	7b7b      	ldrb	r3, [r7, #13]
 8003848:	429a      	cmp	r2, r3
 800384a:	d10c      	bne.n	8003866 <APP_Periodically_Check_Alarms+0x9a>
		{
			Flag_Time_Hit_Alarm[loc_AlarmNumber]|=1<<RTC_MINUTES_REGISER_ADDRESS;
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	3318      	adds	r3, #24
 8003850:	443b      	add	r3, r7
 8003852:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	f042 0202 	orr.w	r2, r2, #2
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	3318      	adds	r3, #24
 8003860:	443b      	add	r3, r7
 8003862:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
		//compare hour
		if(APP_Alarms[loc_AlarmNumber].ALARM_HOUR==APP_DataFromRTC[RTC_HOURS_REGISER_ADDRESS])
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	4a3b      	ldr	r2, [pc, #236]	; (8003958 <APP_Periodically_Check_Alarms+0x18c>)
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	330b      	adds	r3, #11
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	429a      	cmp	r2, r3
 8003876:	d10c      	bne.n	8003892 <APP_Periodically_Check_Alarms+0xc6>
		{
			Flag_Time_Hit_Alarm[loc_AlarmNumber]|=1<<RTC_HOURS_REGISER_ADDRESS;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	3318      	adds	r3, #24
 800387c:	443b      	add	r3, r7
 800387e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	f042 0204 	orr.w	r2, r2, #4
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	3318      	adds	r3, #24
 800388c:	443b      	add	r3, r7
 800388e:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
		//compare date
		if(APP_Alarms[loc_AlarmNumber].ALARM_DATE==APP_DataFromRTC[RTC_DATE_REGISER_ADDRESS])
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	4a30      	ldr	r2, [pc, #192]	; (8003958 <APP_Periodically_Check_Alarms+0x18c>)
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4413      	add	r3, r2
 800389a:	330d      	adds	r3, #13
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	7c3b      	ldrb	r3, [r7, #16]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d10c      	bne.n	80038be <APP_Periodically_Check_Alarms+0xf2>
		{
			Flag_Time_Hit_Alarm[loc_AlarmNumber]|=1<<RTC_DATE_REGISER_ADDRESS;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	3318      	adds	r3, #24
 80038a8:	443b      	add	r3, r7
 80038aa:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	f042 0210 	orr.w	r2, r2, #16
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	3318      	adds	r3, #24
 80038b8:	443b      	add	r3, r7
 80038ba:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
		//compare month
		if(APP_Alarms[loc_AlarmNumber].ALARM_MONTH==APP_DataFromRTC[RTC_MONTH_REGISER_ADDRESS])
 80038be:	7dfb      	ldrb	r3, [r7, #23]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <APP_Periodically_Check_Alarms+0x18c>)
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	4413      	add	r3, r2
 80038c6:	330e      	adds	r3, #14
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	7c7b      	ldrb	r3, [r7, #17]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d10c      	bne.n	80038ea <APP_Periodically_Check_Alarms+0x11e>
		{
			Flag_Time_Hit_Alarm[loc_AlarmNumber]|=1<<RTC_MONTH_REGISER_ADDRESS;
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	3318      	adds	r3, #24
 80038d4:	443b      	add	r3, r7
 80038d6:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	f042 0220 	orr.w	r2, r2, #32
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	3318      	adds	r3, #24
 80038e4:	443b      	add	r3, r7
 80038e6:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
		//compare year
		if(APP_Alarms[loc_AlarmNumber].ALARM_YEAR==APP_DataFromRTC[RTC_YEAR_REGISER_ADDRESS])
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <APP_Periodically_Check_Alarms+0x18c>)
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	4413      	add	r3, r2
 80038f2:	330f      	adds	r3, #15
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	7cbb      	ldrb	r3, [r7, #18]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d10c      	bne.n	8003916 <APP_Periodically_Check_Alarms+0x14a>
		{
			Flag_Time_Hit_Alarm[loc_AlarmNumber]|=1<<RTC_YEAR_REGISER_ADDRESS;
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	3318      	adds	r3, #24
 8003900:	443b      	add	r3, r7
 8003902:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	3318      	adds	r3, #24
 8003910:	443b      	add	r3, r7
 8003912:	f803 2c14 	strb.w	r2, [r3, #-20]
		}
		//make interrupt Change Status if ALARM hit
		if ((Flag_Time_Hit_Alarm[loc_AlarmNumber] & APP_ALARM_HIT_MASK) == APP_ALARM_HIT_MASK )
 8003916:	7dfb      	ldrb	r3, [r7, #23]
 8003918:	3318      	adds	r3, #24
 800391a:	443b      	add	r3, r7
 800391c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8003920:	f003 0377 	and.w	r3, r3, #119	; 0x77
 8003924:	2b77      	cmp	r3, #119	; 0x77
 8003926:	d105      	bne.n	8003934 <APP_Periodically_Check_Alarms+0x168>
		{
			APP_Make_Interrupt_To_Slave_AND_Clear_ALARM(loc_AlarmNumber);
 8003928:	7dfb      	ldrb	r3, [r7, #23]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f816 	bl	800395c <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM>
 8003930:	e000      	b.n	8003934 <APP_Periodically_Check_Alarms+0x168>
			continue;
 8003932:	bf00      	nop
	for (uint8_t loc_AlarmNumber=0;loc_AlarmNumber<APP_TOTAL_NUMBER_OF_ALARMS;loc_AlarmNumber++)
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	3301      	adds	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b04      	cmp	r3, #4
 800393e:	f67f af5d 	bls.w	80037fc <APP_Periodically_Check_Alarms+0x30>
		}
	}


}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000068 	.word	0x20000068
 8003950:	20000040 	.word	0x20000040
 8003954:	20000090 	.word	0x20000090
 8003958:	2000018c 	.word	0x2000018c

0800395c <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM>:

void APP_Make_Interrupt_To_Slave_AND_Clear_ALARM(ALARM_NUMBER copy_alarmNumber)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
	// MAKE Interrupt only set pin for 100 mS//FIXME
	//TODO interrupt blue pill
	GPIO_vSetOutputPinValue(Pin_To_EXTI.PIN_Port,Pin_To_EXTI.PIN_Number,OUTPUT_LOW);
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc0>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	4a2c      	ldr	r2, [pc, #176]	; (8003a1c <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc0>)
 800396c:	7851      	ldrb	r1, [r2, #1]
 800396e:	2200      	movs	r2, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fff7 	bl	8001964 <GPIO_vSetOutputPinValue>
	STK_vSetBusyWait(4000); // 2ms
 8003976:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800397a:	f7fe fef9 	bl	8002770 <STK_vSetBusyWait>
	GPIO_vSetOutputPinValue(Pin_To_EXTI.PIN_Port,Pin_To_EXTI.PIN_Number,OUTPUT_HIGH);
 800397e:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc0>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc0>)
 8003984:	7851      	ldrb	r1, [r2, #1]
 8003986:	2201      	movs	r2, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f7fd ffeb 	bl	8001964 <GPIO_vSetOutputPinValue>


	// send to the slave the number of the alarm to display
	APP_SPIFrame[SPI_FRAME_TYPE_ID]=SPI_FRAME_ID_ALARM_HIT_NU;
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc4>)
 8003990:	2204      	movs	r2, #4
 8003992:	701a      	strb	r2, [r3, #0]
	APP_SPIFrame[1]=copy_alarmNumber;
 8003994:	4a22      	ldr	r2, [pc, #136]	; (8003a20 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc4>)
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	7053      	strb	r3, [r2, #1]

	SPI_vSendDataAsynch(&SPI_ourSPI, 10,APP_SPIFrame);
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc4>)
 800399c:	210a      	movs	r1, #10
 800399e:	4821      	ldr	r0, [pc, #132]	; (8003a24 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xc8>)
 80039a0:	f000 f8fe 	bl	8003ba0 <SPI_vSendDataAsynch>

	// CLEAR ALARM
	APP_Alarms[copy_alarmNumber].ALARM_SEC=0;
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	4413      	add	r3, r2
 80039ac:	3309      	adds	r3, #9
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
	APP_Alarms[copy_alarmNumber].ALARM_MIN=0;
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	330a      	adds	r3, #10
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
	APP_Alarms[copy_alarmNumber].ALARM_HOUR=0;
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	4413      	add	r3, r2
 80039c8:	330b      	adds	r3, #11
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
	APP_Alarms[copy_alarmNumber].ALARM_DATE=0;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	4a15      	ldr	r2, [pc, #84]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	4413      	add	r3, r2
 80039d6:	330d      	adds	r3, #13
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
	APP_Alarms[copy_alarmNumber].ALARM_MONTH=0;
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	4413      	add	r3, r2
 80039e4:	330e      	adds	r3, #14
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
	APP_Alarms[copy_alarmNumber].ALARM_YEAR=0;
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	4a0e      	ldr	r2, [pc, #56]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	4413      	add	r3, r2
 80039f2:	330f      	adds	r3, #15
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
	APP_Alarms[copy_alarmNumber].ALARM_NAME=APP_AlarmName[APP_ALARM_NAME_NULL];
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	4a0b      	ldr	r2, [pc, #44]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	4413      	add	r3, r2
 8003a00:	3304      	adds	r3, #4
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xd0>)
 8003a04:	601a      	str	r2, [r3, #0]
	APP_Alarms[copy_alarmNumber].ALARM_STATUS=ALARM_ALREADY_HIT;
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	4a07      	ldr	r2, [pc, #28]	; (8003a28 <APP_Make_Interrupt_To_Slave_AND_Clear_ALARM+0xcc>)
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3308      	adds	r3, #8
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]


}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	2000016c 	.word	0x2000016c
 8003a20:	20000178 	.word	0x20000178
 8003a24:	200000dc 	.word	0x200000dc
 8003a28:	2000018c 	.word	0x2000018c
 8003a2c:	20000418 	.word	0x20000418

08003a30 <APP_HASH_ON_SCREEN>:

void APP_HASH_ON_SCREEN()
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0

	UART_vSendStringSynch(&UART_ourUsart,(uint8_t*)"==========================================\n\r");
 8003a34:	4902      	ldr	r1, [pc, #8]	; (8003a40 <APP_HASH_ON_SCREEN+0x10>)
 8003a36:	4803      	ldr	r0, [pc, #12]	; (8003a44 <APP_HASH_ON_SCREEN+0x14>)
 8003a38:	f7fe ff38 	bl	80028ac <UART_vSendStringSynch>

}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	08003fe8 	.word	0x08003fe8
 8003a44:	20000114 	.word	0x20000114

08003a48 <Set_RedLED>:



void Set_RedLED()
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	APP_SPIFrame[SPI_FRAME_TYPE_ID]=SPI_FRAME_ID_WRONG_LOGIN;
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <Set_RedLED+0x18>)
 8003a4e:	2203      	movs	r2, #3
 8003a50:	701a      	strb	r2, [r3, #0]
	SPI_vSendDataAsynch(&SPI_ourSPI, 10,APP_SPIFrame);
 8003a52:	4a03      	ldr	r2, [pc, #12]	; (8003a60 <Set_RedLED+0x18>)
 8003a54:	210a      	movs	r1, #10
 8003a56:	4803      	ldr	r0, [pc, #12]	; (8003a64 <Set_RedLED+0x1c>)
 8003a58:	f000 f8a2 	bl	8003ba0 <SPI_vSendDataAsynch>
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20000178 	.word	0x20000178
 8003a64:	200000dc 	.word	0x200000dc

08003a68 <Set_GreenLED>:

void Set_GreenLED()
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	APP_SPIFrame[SPI_FRAME_TYPE_ID]=SPI_FRAME_ID_RIGHT_LOGIN;
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <Set_GreenLED+0x18>)
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
	SPI_vSendDataAsynch(&SPI_ourSPI, 10,APP_SPIFrame);
 8003a72:	4a03      	ldr	r2, [pc, #12]	; (8003a80 <Set_GreenLED+0x18>)
 8003a74:	210a      	movs	r1, #10
 8003a76:	4803      	ldr	r0, [pc, #12]	; (8003a84 <Set_GreenLED+0x1c>)
 8003a78:	f000 f892 	bl	8003ba0 <SPI_vSendDataAsynch>
}
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000178 	.word	0x20000178
 8003a84:	200000dc 	.word	0x200000dc

08003a88 <SPI_SendReceiveCallBack>:

volatile uint8_t GlobalSPI_u8SizeReceiveData[3]={0};
volatile uint8_t* GlobalSPI_pu8ReceiveData[3]={0};

void SPI_SendReceiveCallBack(SPI_Channel_t copy_eSPI)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	71fb      	strb	r3, [r7, #7]
	if (SPI_IRQ_Reason==SPI_IRQSend)
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <SPI_SendReceiveCallBack+0xec>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d12f      	bne.n	8003afc <SPI_SendReceiveCallBack+0x74>
//			__asm volatile("nop");
//		}
		static uint8_t SBufferNumbberCB=0;
		static uint8_t i=1;

		if (i<GlobalSPI_u8SizeSendData[SBufferNumbberCB])
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <SPI_SendReceiveCallBack+0xf0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <SPI_SendReceiveCallBack+0xf4>)
 8003aa4:	5c9b      	ldrb	r3, [r3, r2]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <SPI_SendReceiveCallBack+0xf8>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d915      	bls.n	8003adc <SPI_SendReceiveCallBack+0x54>
		{

			SPIPeripheral[copy_eSPI]->SPI_DR= GlobalSPI_pu8SendData[SBufferNumbberCB][i++];
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <SPI_SendReceiveCallBack+0xf0>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <SPI_SendReceiveCallBack+0xfc>)
 8003ab8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003abc:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <SPI_SendReceiveCallBack+0xf8>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	1c59      	adds	r1, r3, #1
 8003ac2:	b2c8      	uxtb	r0, r1
 8003ac4:	492e      	ldr	r1, [pc, #184]	; (8003b80 <SPI_SendReceiveCallBack+0xf8>)
 8003ac6:	7008      	strb	r0, [r1, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2d9      	uxtb	r1, r3
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	4a2d      	ldr	r2, [pc, #180]	; (8003b88 <SPI_SendReceiveCallBack+0x100>)
 8003ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	60da      	str	r2, [r3, #12]

		}
	}


}
 8003ada:	e046      	b.n	8003b6a <SPI_SendReceiveCallBack+0xe2>
			GlobalSPI_u8CalledTimes--; //FIXME
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <SPI_SendReceiveCallBack+0x104>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <SPI_SendReceiveCallBack+0x104>)
 8003ae8:	701a      	strb	r2, [r3, #0]
			i=1;
 8003aea:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <SPI_SendReceiveCallBack+0xf8>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
				SPI_EnableTxBufferEmptyInterrupt(copy_eSPI,SPI_Disable_Interrupt);
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fd21 	bl	800253c <SPI_EnableTxBufferEmptyInterrupt>
}
 8003afa:	e036      	b.n	8003b6a <SPI_SendReceiveCallBack+0xe2>
	else if (SPI_IRQ_Reason==SPI_IRQReceive)
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <SPI_SendReceiveCallBack+0xec>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d131      	bne.n	8003b6a <SPI_SendReceiveCallBack+0xe2>
		if (i!=GlobalSPI_u8SizeReceiveData[RBufferNumbberCB])
 8003b06:	4b22      	ldr	r3, [pc, #136]	; (8003b90 <SPI_SendReceiveCallBack+0x108>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <SPI_SendReceiveCallBack+0x10c>)
 8003b0e:	5c9b      	ldrb	r3, [r3, r2]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <SPI_SendReceiveCallBack+0x110>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d014      	beq.n	8003b44 <SPI_SendReceiveCallBack+0xbc>
			GlobalSPI_pu8ReceiveData[RBufferNumbberCB][i++]=SPIPeripheral[copy_eSPI]->SPI_DR;
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	; (8003b88 <SPI_SendReceiveCallBack+0x100>)
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	68d8      	ldr	r0, [r3, #12]
 8003b24:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <SPI_SendReceiveCallBack+0x108>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <SPI_SendReceiveCallBack+0x114>)
 8003b2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <SPI_SendReceiveCallBack+0x110>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	1c59      	adds	r1, r3, #1
 8003b36:	b2cc      	uxtb	r4, r1
 8003b38:	4917      	ldr	r1, [pc, #92]	; (8003b98 <SPI_SendReceiveCallBack+0x110>)
 8003b3a:	700c      	strb	r4, [r1, #0]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b2c2      	uxtb	r2, r0
 8003b40:	701a      	strb	r2, [r3, #0]
}
 8003b42:	e012      	b.n	8003b6a <SPI_SendReceiveCallBack+0xe2>
			i=0;
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <SPI_SendReceiveCallBack+0x110>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
			RBufferNumbberCB++;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <SPI_SendReceiveCallBack+0x108>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <SPI_SendReceiveCallBack+0x108>)
 8003b54:	701a      	strb	r2, [r3, #0]
			RBufferNumbberCB= RBufferNumbberCB==3?0:RBufferNumbberCB;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <SPI_SendReceiveCallBack+0x108>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d002      	beq.n	8003b64 <SPI_SendReceiveCallBack+0xdc>
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <SPI_SendReceiveCallBack+0x108>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	e000      	b.n	8003b66 <SPI_SendReceiveCallBack+0xde>
 8003b64:	2300      	movs	r3, #0
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <SPI_SendReceiveCallBack+0x108>)
 8003b68:	7013      	strb	r3, [r2, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000418 	.word	0x20000418
 8003b78:	2000043c 	.word	0x2000043c
 8003b7c:	20000428 	.word	0x20000428
 8003b80:	200001dc 	.word	0x200001dc
 8003b84:	2000041c 	.word	0x2000041c
 8003b88:	200000ec 	.word	0x200000ec
 8003b8c:	2000042b 	.word	0x2000042b
 8003b90:	2000043d 	.word	0x2000043d
 8003b94:	2000042c 	.word	0x2000042c
 8003b98:	2000043e 	.word	0x2000043e
 8003b9c:	20000430 	.word	0x20000430

08003ba0 <SPI_vSendDataAsynch>:
void SPI_vSendDataAsynch(SPI_HandleTypeDef_t* hspi, uint8_t copy_u8Data_Size,uint8_t* copy_pu8Data )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	607a      	str	r2, [r7, #4]
 8003bac:	72fb      	strb	r3, [r7, #11]
	static uint8_t BufferNumbber=0;
	static uint8_t FirtTimmeFlag=0;
	SPI_IRQ_Reason=SPI_IRQSend;
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <SPI_vSendDataAsynch+0x84>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
	GlobalSPI_pu8SendData[BufferNumbber]=copy_pu8Data;
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <SPI_vSendDataAsynch+0x88>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <SPI_vSendDataAsynch+0x8c>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	GlobalSPI_u8SizeSendData[BufferNumbber]=copy_u8Data_Size;
 8003bc2:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <SPI_vSendDataAsynch+0x88>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <SPI_vSendDataAsynch+0x90>)
 8003bca:	7afb      	ldrb	r3, [r7, #11]
 8003bcc:	5453      	strb	r3, [r2, r1]
	GlobalSPI_u8CalledTimes++;
 8003bce:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <SPI_vSendDataAsynch+0x94>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <SPI_vSendDataAsynch+0x94>)
 8003bda:	701a      	strb	r2, [r3, #0]
	//Make Sure there is no data is transmitted
	while (!SPI_ReadFlag( hspi,SPI_TXBufferEmpty));
 8003bdc:	bf00      	nop
 8003bde:	2101      	movs	r1, #1
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7fe fd8d 	bl	8002700 <SPI_ReadFlag>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f8      	beq.n	8003bde <SPI_vSendDataAsynch+0x3e>

	//Transmit first byte
//	if(FirtTimmeFlag==0) //FIXME
		SPIPeripheral[hspi->SPI_ID]->SPI_DR= GlobalSPI_pu8SendData[BufferNumbber][0];
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <SPI_vSendDataAsynch+0x88>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <SPI_vSendDataAsynch+0x8c>)
 8003bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <SPI_vSendDataAsynch+0x98>)
 8003c04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c08:	60da      	str	r2, [r3, #12]
	//Enable Interrupt and NVIC
	SPI_EnableTxBufferEmptyInterrupt(hspi->SPI_ID,SPI_Enable_Interrupt);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe fc93 	bl	800253c <SPI_EnableTxBufferEmptyInterrupt>
	SPI_NVICEnaleInterrupt(hspi);
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f810 	bl	8003c3c <SPI_NVICEnaleInterrupt>
	//	GlobalSPI_u8SizeSendData[BufferNumbber]--;
//	BufferNumbber++; //FIXME
//	BufferNumbber= BufferNumbber==3?0:BufferNumbber;//FIXME
//	FirtTimmeFlag++;//FIXME

}
 8003c1c:	bf00      	nop
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000418 	.word	0x20000418
 8003c28:	2000043f 	.word	0x2000043f
 8003c2c:	2000041c 	.word	0x2000041c
 8003c30:	20000428 	.word	0x20000428
 8003c34:	2000042b 	.word	0x2000042b
 8003c38:	200000ec 	.word	0x200000ec

08003c3c <SPI_NVICEnaleInterrupt>:

}


static void SPI_NVICEnaleInterrupt(SPI_HandleTypeDef_t* hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	switch(hspi->SPI_ID)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d81b      	bhi.n	8003c84 <SPI_NVICEnaleInterrupt+0x48>
 8003c4c:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <SPI_NVICEnaleInterrupt+0x18>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c6d 	.word	0x08003c6d
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003c7d 	.word	0x08003c7d
	{
	case SPI_Channel1:
		NVIC_vEnableInterrupt(NVIC_SPI1);
 8003c64:	2023      	movs	r0, #35	; 0x23
 8003c66:	f7fe fa57 	bl	8002118 <NVIC_vEnableInterrupt>
		break;
 8003c6a:	e00b      	b.n	8003c84 <SPI_NVICEnaleInterrupt+0x48>
	case SPI_Channel2:
		NVIC_vEnableInterrupt(NVIC_SPI2);
 8003c6c:	2024      	movs	r0, #36	; 0x24
 8003c6e:	f7fe fa53 	bl	8002118 <NVIC_vEnableInterrupt>
		break;
 8003c72:	e007      	b.n	8003c84 <SPI_NVICEnaleInterrupt+0x48>
	case SPI_Channel3:
		NVIC_vEnableInterrupt(NVIC_SPI3);
 8003c74:	2033      	movs	r0, #51	; 0x33
 8003c76:	f7fe fa4f 	bl	8002118 <NVIC_vEnableInterrupt>
		break;
 8003c7a:	e003      	b.n	8003c84 <SPI_NVICEnaleInterrupt+0x48>
	case SPI_Channel4:
		NVIC_vEnableInterrupt(NVIC_SPI4);
 8003c7c:	2054      	movs	r0, #84	; 0x54
 8003c7e:	f7fe fa4b 	bl	8002118 <NVIC_vEnableInterrupt>
		break;
 8003c82:	bf00      	nop
	}
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <SPI1_IRQHandler>:
//	GlobalSPI_arrCallBack[hspi->SPI_ID]=copy_eCallBack;
//}


void SPI1_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel1);
 8003c90:	2000      	movs	r0, #0
 8003c92:	f7ff fef9 	bl	8003a88 <SPI_SendReceiveCallBack>

}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel2);
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f7ff fef2 	bl	8003a88 <SPI_SendReceiveCallBack>
}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel3);
 8003cac:	2002      	movs	r0, #2
 8003cae:	f7ff feeb 	bl	8003a88 <SPI_SendReceiveCallBack>

}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel4);
 8003cba:	2003      	movs	r0, #3
 8003cbc:	f7ff fee4 	bl	8003a88 <SPI_SendReceiveCallBack>

}
 8003cc0:	bf00      	nop
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <main>:




int main(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0

	APP_Services_Init();
 8003cca:	f7ff fa77 	bl	80031bc <APP_Services_Init>
	uint8_t SelectedOption=0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	71bb      	strb	r3, [r7, #6]
	uint8_t FirstTimeFlag=0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		//Set Time and Date
		if (FirstTimeFlag==0)
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <main+0x24>
		{
			APP_SignInScreen_Services();
 8003cdc:	f7ff fb7c 	bl	80033d8 <APP_SignInScreen_Services>
			APP_WelcomeScreen_Services_Welcome();
 8003ce0:	f7ff fbd6 	bl	8003490 <APP_WelcomeScreen_Services_Welcome>
			FirstTimeFlag=1;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	71fb      	strb	r3, [r7, #7]
		}
		//Main menu
		SelectedOption=APP_MainMenu();
 8003ce8:	f7ff fbfe 	bl	80034e8 <APP_MainMenu>
 8003cec:	4603      	mov	r3, r0
 8003cee:	71bb      	strb	r3, [r7, #6]
		switch(SelectedOption)
 8003cf0:	79bb      	ldrb	r3, [r7, #6]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d00c      	beq.n	8003d10 <main+0x4c>
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	dc0d      	bgt.n	8003d16 <main+0x52>
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d002      	beq.n	8003d04 <main+0x40>
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d003      	beq.n	8003d0a <main+0x46>
 8003d02:	e008      	b.n	8003d16 <main+0x52>
		{
		case DISPLAY_TIME_DATE:
			APP_Option1_Services_Display_Time_Date();
 8003d04:	f7ff fc26 	bl	8003554 <APP_Option1_Services_Display_Time_Date>
			break;
 8003d08:	e005      	b.n	8003d16 <main+0x52>
		case SET_TIME_DATE:
			APP_Oprion2_Services_Set_Time_Data();
 8003d0a:	f7ff fc5f 	bl	80035cc <APP_Oprion2_Services_Set_Time_Data>
			break;
 8003d0e:	e002      	b.n	8003d16 <main+0x52>
		case SET_ALARM:
			APP_Oprion3_Services_Set_Alarm_Display_Options();
 8003d10:	f7ff fc82 	bl	8003618 <APP_Oprion3_Services_Set_Alarm_Display_Options>
			break;
 8003d14:	bf00      	nop

		}
		APP_Periodically_Check_Alarms();
 8003d16:	f7ff fd59 	bl	80037cc <APP_Periodically_Check_Alarms>
		if (FirstTimeFlag==0)
 8003d1a:	e7dc      	b.n	8003cd6 <main+0x12>

08003d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d1c:	480d      	ldr	r0, [pc, #52]	; (8003d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d24:	480c      	ldr	r0, [pc, #48]	; (8003d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d26:	490d      	ldr	r1, [pc, #52]	; (8003d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <LoopForever+0xe>)
  movs r3, #0
 8003d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d2c:	e002      	b.n	8003d34 <LoopCopyDataInit>

08003d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d32:	3304      	adds	r3, #4

08003d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d38:	d3f9      	bcc.n	8003d2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d3c:	4c0a      	ldr	r4, [pc, #40]	; (8003d68 <LoopForever+0x16>)
  movs r3, #0
 8003d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d40:	e001      	b.n	8003d46 <LoopFillZerobss>

08003d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d44:	3204      	adds	r2, #4

08003d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d48:	d3fb      	bcc.n	8003d42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d4a:	f000 f811 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d4e:	f7ff ffb9 	bl	8003cc4 <main>

08003d52 <LoopForever>:

LoopForever:
  b LoopForever
 8003d52:	e7fe      	b.n	8003d52 <LoopForever>
  ldr   r0, =_estack
 8003d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d5c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003d60:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 8003d64:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003d68:	20000440 	.word	0x20000440

08003d6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d6c:	e7fe      	b.n	8003d6c <ADC_IRQHandler>
	...

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4d0d      	ldr	r5, [pc, #52]	; (8003da8 <__libc_init_array+0x38>)
 8003d74:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	4d0b      	ldr	r5, [pc, #44]	; (8003db0 <__libc_init_array+0x40>)
 8003d82:	4c0c      	ldr	r4, [pc, #48]	; (8003db4 <__libc_init_array+0x44>)
 8003d84:	f000 f818 	bl	8003db8 <_init>
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08004018 	.word	0x08004018
 8003dac:	08004018 	.word	0x08004018
 8003db0:	08004018 	.word	0x08004018
 8003db4:	0800401c 	.word	0x0800401c

08003db8 <_init>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_fini>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr
