
F446RE_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013dc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080015a0  080015a0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080015a0  080015a0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080015a0  080015a0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015a0  080015a0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015a0  080015a0  000115a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015a4  080015a4  000115a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080015a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200000b0  08001658  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08001658  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ece  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009eb  00000000  00000000  00024fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000450  00000000  00000000  000259a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00025df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ffb  00000000  00000000  000261e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000042b1  00000000  00000000  000291e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b81c  00000000  00000000  0002d494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00038cb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000106c  00000000  00000000  00038d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000b0 	.word	0x200000b0
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001588 	.word	0x08001588

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000b4 	.word	0x200000b4
 8000200:	08001588 	.word	0x08001588

08000204 <DMA_vInit>:

static void (*arrDMA1_PtrToFunction[8][Total_Number_Of_Interrupts])(void) = {NULL};
static void (*arrDMA2_PtrToFunction[8][Total_Number_Of_Interrupts])(void) = {NULL};

void DMA_vInit(DMA_HandleTypeDef_t* copy_eDMAConfig)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	DMA_vSetDMAStreamChannelSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.Channel);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	7858      	ldrb	r0, [r3, #1]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7899      	ldrb	r1, [r3, #2]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	f000 f83b 	bl	8000294 <DMA_vSetDMAStreamChannelSelection>
	DMA_vSetDMAStreamDataTransferDirection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.Direction);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	7858      	ldrb	r0, [r3, #1]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	7899      	ldrb	r1, [r3, #2]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	78db      	ldrb	r3, [r3, #3]
 800022a:	461a      	mov	r2, r3
 800022c:	f000 f99a 	bl	8000564 <DMA_vSetDMAStreamDataTransferDirection>
	DMA_vSetDMAMemoryIncrementMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.MINC);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	7858      	ldrb	r0, [r3, #1]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	7899      	ldrb	r1, [r3, #2]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	791b      	ldrb	r3, [r3, #4]
 800023c:	461a      	mov	r2, r3
 800023e:	f000 f8b9 	bl	80003b4 <DMA_vSetDMAMemoryIncrementMode>
	DMA_vSetDMAPeripheralIncrementMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PINC);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	7858      	ldrb	r0, [r3, #1]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	7899      	ldrb	r1, [r3, #2]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	795b      	ldrb	r3, [r3, #5]
 800024e:	461a      	mov	r2, r3
 8000250:	f000 f8f8 	bl	8000444 <DMA_vSetDMAPeripheralIncrementMode>
	DMA_vSetDMACircularMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.CircularMode);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	7858      	ldrb	r0, [r3, #1]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	7899      	ldrb	r1, [r3, #2]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	799b      	ldrb	r3, [r3, #6]
 8000260:	461a      	mov	r2, r3
 8000262:	f000 f937 	bl	80004d4 <DMA_vSetDMACircularMode>
	DMA_vSetDMAStreamPriorityLevel(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PriorityLevel);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7858      	ldrb	r0, [r3, #1]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	7899      	ldrb	r1, [r3, #2]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	461a      	mov	r2, r3
 8000274:	f000 f856 	bl	8000324 <DMA_vSetDMAStreamPriorityLevel>
	DMA_vSetDirectModeStatus(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.DirectOrFIFOMode);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	7858      	ldrb	r0, [r3, #1]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	7899      	ldrb	r1, [r3, #2]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	7a1b      	ldrb	r3, [r3, #8]
 8000284:	461a      	mov	r2, r3
 8000286:	f000 f9b5 	bl	80005f4 <DMA_vSetDirectModeStatus>
	//	DMA_vSetDMAStreamIncreamentalOffset(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->peripheral_increment_offset_size);
	//	DMA_vSetDMAStreamMemorySize(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->MemorySIZE);
	//	DMA_vSetDMAStreamPeripheralSize(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->PeripheralSIZE);
	//	DMA_vSetDMAStreamPeripheralFlowController(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->peripheral_flow_controller);

}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <DMA_vSetDMAStreamChannelSelection>:
void DMA_vSetDMAStreamChannelSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Channel_Selection_t copy_eChannel_Selection)
{
 8000294:	b490      	push	{r4, r7}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
 800029e:	460b      	mov	r3, r1
 80002a0:	71bb      	strb	r3, [r7, #6]
 80002a2:	4613      	mov	r3, r2
 80002a4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b111<<DMA_SxCR_CHSEL);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	4a1d      	ldr	r2, [pc, #116]	; (8000320 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80002aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	4613      	mov	r3, r2
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4413      	add	r3, r2
 80002b6:	00db      	lsls	r3, r3, #3
 80002b8:	440b      	add	r3, r1
 80002ba:	3310      	adds	r3, #16
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	79fa      	ldrb	r2, [r7, #7]
 80002c0:	4917      	ldr	r1, [pc, #92]	; (8000320 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80002c2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80002cc:	4613      	mov	r3, r2
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	4413      	add	r3, r2
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4403      	add	r3, r0
 80002d6:	3310      	adds	r3, #16
 80002d8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eChannel_Selection<<DMA_SxCR_CHSEL);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	4a10      	ldr	r2, [pc, #64]	; (8000320 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80002de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80002e2:	79ba      	ldrb	r2, [r7, #6]
 80002e4:	4613      	mov	r3, r2
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	4413      	add	r3, r2
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	440b      	add	r3, r1
 80002ee:	3310      	adds	r3, #16
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	797a      	ldrb	r2, [r7, #5]
 80002f4:	0652      	lsls	r2, r2, #25
 80002f6:	4614      	mov	r4, r2
 80002f8:	79fa      	ldrb	r2, [r7, #7]
 80002fa:	4909      	ldr	r1, [pc, #36]	; (8000320 <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80002fc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000300:	79ba      	ldrb	r2, [r7, #6]
 8000302:	ea43 0104 	orr.w	r1, r3, r4
 8000306:	4613      	mov	r3, r2
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	4413      	add	r3, r2
 800030c:	00db      	lsls	r3, r3, #3
 800030e:	4403      	add	r3, r0
 8000310:	3310      	adds	r3, #16
 8000312:	6019      	str	r1, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bc90      	pop	{r4, r7}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	20000000 	.word	0x20000000

08000324 <DMA_vSetDMAStreamPriorityLevel>:
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_DBM);
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_double_buffer_mode<<DMA_SxCR_DBM);

}
void DMA_vSetDMAStreamPriorityLevel(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,priority_level_t copy_epriority_level)
{
 8000324:	b490      	push	{r4, r7}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
 800032e:	460b      	mov	r3, r1
 8000330:	71bb      	strb	r3, [r7, #6]
 8000332:	4613      	mov	r3, r2
 8000334:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_PL);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	4a1d      	ldr	r2, [pc, #116]	; (80003b0 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 800033a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800033e:	79ba      	ldrb	r2, [r7, #6]
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	00db      	lsls	r3, r3, #3
 8000348:	440b      	add	r3, r1
 800034a:	3310      	adds	r3, #16
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	4917      	ldr	r1, [pc, #92]	; (80003b0 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 8000352:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000356:	79ba      	ldrb	r2, [r7, #6]
 8000358:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800035c:	4613      	mov	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	4413      	add	r3, r2
 8000362:	00db      	lsls	r3, r3, #3
 8000364:	4403      	add	r3, r0
 8000366:	3310      	adds	r3, #16
 8000368:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_epriority_level<<DMA_SxCR_PL);
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 800036e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000372:	79ba      	ldrb	r2, [r7, #6]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	440b      	add	r3, r1
 800037e:	3310      	adds	r3, #16
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	797a      	ldrb	r2, [r7, #5]
 8000384:	0412      	lsls	r2, r2, #16
 8000386:	4614      	mov	r4, r2
 8000388:	79fa      	ldrb	r2, [r7, #7]
 800038a:	4909      	ldr	r1, [pc, #36]	; (80003b0 <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 800038c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	ea43 0104 	orr.w	r1, r3, r4
 8000396:	4613      	mov	r3, r2
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	4413      	add	r3, r2
 800039c:	00db      	lsls	r3, r3, #3
 800039e:	4403      	add	r3, r0
 80003a0:	3310      	adds	r3, #16
 80003a2:	6019      	str	r1, [r3, #0]

}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc90      	pop	{r4, r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000000 	.word	0x20000000

080003b4 <DMA_vSetDMAMemoryIncrementMode>:
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eP_M_SIZE<<DMA_SxCR_PSIZE);


}
void DMA_vSetDMAMemoryIncrementMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Memory_Increment_Mode_t copy_eMemory_Increment_Mode)
{
 80003b4:	b490      	push	{r4, r7}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	460b      	mov	r3, r1
 80003c0:	71bb      	strb	r3, [r7, #6]
 80003c2:	4613      	mov	r3, r2
 80003c4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_MINC);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4a1d      	ldr	r2, [pc, #116]	; (8000440 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 80003ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80003ce:	79ba      	ldrb	r2, [r7, #6]
 80003d0:	4613      	mov	r3, r2
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	4413      	add	r3, r2
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	440b      	add	r3, r1
 80003da:	3310      	adds	r3, #16
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	79fa      	ldrb	r2, [r7, #7]
 80003e0:	4917      	ldr	r1, [pc, #92]	; (8000440 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 80003e2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80003e6:	79ba      	ldrb	r2, [r7, #6]
 80003e8:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 80003ec:	4613      	mov	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	4413      	add	r3, r2
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	4403      	add	r3, r0
 80003f6:	3310      	adds	r3, #16
 80003f8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eMemory_Increment_Mode<<DMA_SxCR_MINC);
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	4a10      	ldr	r2, [pc, #64]	; (8000440 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 80003fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000402:	79ba      	ldrb	r2, [r7, #6]
 8000404:	4613      	mov	r3, r2
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	4413      	add	r3, r2
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	440b      	add	r3, r1
 800040e:	3310      	adds	r3, #16
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	797a      	ldrb	r2, [r7, #5]
 8000414:	0292      	lsls	r2, r2, #10
 8000416:	4614      	mov	r4, r2
 8000418:	79fa      	ldrb	r2, [r7, #7]
 800041a:	4909      	ldr	r1, [pc, #36]	; (8000440 <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 800041c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	ea43 0104 	orr.w	r1, r3, r4
 8000426:	4613      	mov	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	4413      	add	r3, r2
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	4403      	add	r3, r0
 8000430:	3310      	adds	r3, #16
 8000432:	6019      	str	r1, [r3, #0]

}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bc90      	pop	{r4, r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000000 	.word	0x20000000

08000444 <DMA_vSetDMAPeripheralIncrementMode>:
void DMA_vSetDMAPeripheralIncrementMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,peripheral_Increment_Mode_t copy_peripheral_Increment_Mode)
{
 8000444:	b490      	push	{r4, r7}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	460b      	mov	r3, r1
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	4613      	mov	r3, r2
 8000454:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_PINC);
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 800045a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800045e:	79ba      	ldrb	r2, [r7, #6]
 8000460:	4613      	mov	r3, r2
 8000462:	005b      	lsls	r3, r3, #1
 8000464:	4413      	add	r3, r2
 8000466:	00db      	lsls	r3, r3, #3
 8000468:	440b      	add	r3, r1
 800046a:	3310      	adds	r3, #16
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	79fa      	ldrb	r2, [r7, #7]
 8000470:	4917      	ldr	r1, [pc, #92]	; (80004d0 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 8000472:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 800047c:	4613      	mov	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	4413      	add	r3, r2
 8000482:	00db      	lsls	r3, r3, #3
 8000484:	4403      	add	r3, r0
 8000486:	3310      	adds	r3, #16
 8000488:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_peripheral_Increment_Mode<<DMA_SxCR_PINC);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 800048e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000492:	79ba      	ldrb	r2, [r7, #6]
 8000494:	4613      	mov	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	4413      	add	r3, r2
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	440b      	add	r3, r1
 800049e:	3310      	adds	r3, #16
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	797a      	ldrb	r2, [r7, #5]
 80004a4:	0252      	lsls	r2, r2, #9
 80004a6:	4614      	mov	r4, r2
 80004a8:	79fa      	ldrb	r2, [r7, #7]
 80004aa:	4909      	ldr	r1, [pc, #36]	; (80004d0 <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 80004ac:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80004b0:	79ba      	ldrb	r2, [r7, #6]
 80004b2:	ea43 0104 	orr.w	r1, r3, r4
 80004b6:	4613      	mov	r3, r2
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	4413      	add	r3, r2
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	4403      	add	r3, r0
 80004c0:	3310      	adds	r3, #16
 80004c2:	6019      	str	r1, [r3, #0]

}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc90      	pop	{r4, r7}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000

080004d4 <DMA_vSetDMACircularMode>:
void DMA_vSetDMACircularMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,circular_mode_t copy_eCircular_mode)
{
 80004d4:	b490      	push	{r4, r7}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	460b      	mov	r3, r1
 80004e0:	71bb      	strb	r3, [r7, #6]
 80004e2:	4613      	mov	r3, r2
 80004e4:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_CIRC);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <DMA_vSetDMACircularMode+0x8c>)
 80004ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004ee:	79ba      	ldrb	r2, [r7, #6]
 80004f0:	4613      	mov	r3, r2
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	4413      	add	r3, r2
 80004f6:	00db      	lsls	r3, r3, #3
 80004f8:	440b      	add	r3, r1
 80004fa:	3310      	adds	r3, #16
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	4917      	ldr	r1, [pc, #92]	; (8000560 <DMA_vSetDMACircularMode+0x8c>)
 8000502:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000506:	79ba      	ldrb	r2, [r7, #6]
 8000508:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800050c:	4613      	mov	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	4413      	add	r3, r2
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	4403      	add	r3, r0
 8000516:	3310      	adds	r3, #16
 8000518:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eCircular_mode<<DMA_SxCR_CIRC);
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4a10      	ldr	r2, [pc, #64]	; (8000560 <DMA_vSetDMACircularMode+0x8c>)
 800051e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	4613      	mov	r3, r2
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	4413      	add	r3, r2
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	440b      	add	r3, r1
 800052e:	3310      	adds	r3, #16
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	797a      	ldrb	r2, [r7, #5]
 8000534:	0212      	lsls	r2, r2, #8
 8000536:	4614      	mov	r4, r2
 8000538:	79fa      	ldrb	r2, [r7, #7]
 800053a:	4909      	ldr	r1, [pc, #36]	; (8000560 <DMA_vSetDMACircularMode+0x8c>)
 800053c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000540:	79ba      	ldrb	r2, [r7, #6]
 8000542:	ea43 0104 	orr.w	r1, r3, r4
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	4403      	add	r3, r0
 8000550:	3310      	adds	r3, #16
 8000552:	6019      	str	r1, [r3, #0]

}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bc90      	pop	{r4, r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000

08000564 <DMA_vSetDMAStreamDataTransferDirection>:
void DMA_vSetDMAStreamDataTransferDirection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,data_transfer_direction_t copy_edata_transfer_direction)
{
 8000564:	b490      	push	{r4, r7}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
 800056e:	460b      	mov	r3, r1
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	4613      	mov	r3, r2
 8000574:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_DIR);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 800057a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800057e:	79ba      	ldrb	r2, [r7, #6]
 8000580:	4613      	mov	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	4413      	add	r3, r2
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	440b      	add	r3, r1
 800058a:	3310      	adds	r3, #16
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	4917      	ldr	r1, [pc, #92]	; (80005f0 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000592:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000596:	79ba      	ldrb	r2, [r7, #6]
 8000598:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800059c:	4613      	mov	r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	4403      	add	r3, r0
 80005a6:	3310      	adds	r3, #16
 80005a8:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_edata_transfer_direction<<DMA_SxCR_DIR);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 80005ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005b2:	79ba      	ldrb	r2, [r7, #6]
 80005b4:	4613      	mov	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4413      	add	r3, r2
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	440b      	add	r3, r1
 80005be:	3310      	adds	r3, #16
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	797a      	ldrb	r2, [r7, #5]
 80005c4:	0192      	lsls	r2, r2, #6
 80005c6:	4614      	mov	r4, r2
 80005c8:	79fa      	ldrb	r2, [r7, #7]
 80005ca:	4909      	ldr	r1, [pc, #36]	; (80005f0 <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 80005cc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80005d0:	79ba      	ldrb	r2, [r7, #6]
 80005d2:	ea43 0104 	orr.w	r1, r3, r4
 80005d6:	4613      	mov	r3, r2
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	4413      	add	r3, r2
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	4403      	add	r3, r0
 80005e0:	3310      	adds	r3, #16
 80005e2:	6019      	str	r1, [r3, #0]


}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc90      	pop	{r4, r7}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000

080005f4 <DMA_vSetDirectModeStatus>:
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_eFIFO_error_interrupt_enable<<DMA_SxFCR_FEIE);

}
//uint8_t DMA_u8GetFIFOStatus();
void DMA_vSetDirectModeStatus(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,direct_mode_disable_t copy_edirect_mode_disable)
{
 80005f4:	b490      	push	{r4, r7}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	460b      	mov	r3, r1
 8000600:	71bb      	strb	r3, [r7, #6]
 8000602:	4613      	mov	r3, r2
 8000604:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR &=~ (0b1<<DMA_SxFCR_DMDIS);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <DMA_vSetDirectModeStatus+0x8c>)
 800060a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800060e:	79ba      	ldrb	r2, [r7, #6]
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	00db      	lsls	r3, r3, #3
 8000618:	440b      	add	r3, r1
 800061a:	3324      	adds	r3, #36	; 0x24
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	4917      	ldr	r1, [pc, #92]	; (8000680 <DMA_vSetDirectModeStatus+0x8c>)
 8000622:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000626:	79ba      	ldrb	r2, [r7, #6]
 8000628:	f023 0104 	bic.w	r1, r3, #4
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4403      	add	r3, r0
 8000636:	3324      	adds	r3, #36	; 0x24
 8000638:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_edirect_mode_disable<<DMA_SxFCR_DMDIS);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <DMA_vSetDirectModeStatus+0x8c>)
 800063e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000642:	79ba      	ldrb	r2, [r7, #6]
 8000644:	4613      	mov	r3, r2
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	4413      	add	r3, r2
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	440b      	add	r3, r1
 800064e:	3324      	adds	r3, #36	; 0x24
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	797a      	ldrb	r2, [r7, #5]
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	4614      	mov	r4, r2
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	4909      	ldr	r1, [pc, #36]	; (8000680 <DMA_vSetDirectModeStatus+0x8c>)
 800065c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000660:	79ba      	ldrb	r2, [r7, #6]
 8000662:	ea43 0104 	orr.w	r1, r3, r4
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	4403      	add	r3, r0
 8000670:	3324      	adds	r3, #36	; 0x24
 8000672:	6019      	str	r1, [r3, #0]


}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bc90      	pop	{r4, r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000

08000684 <DMA_vReadFlagStatus>:
	DMA_vEnableStream(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,stream_enabled);


}
void DMA_vReadFlagStatus(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number,DMA_Interrupt_t copy_eDMA_Interrupt,uint8_t *interruptStatusFlag)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4603      	mov	r3, r0
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	460b      	mov	r3, r1
 8000692:	71bb      	strb	r3, [r7, #6]
 8000694:	4613      	mov	r3, r2
 8000696:	717b      	strb	r3, [r7, #5]
	uint8_t flagShift=(uint8_t)copy_eDMA_Interrupt+6*((uint8_t)Stream_Number%4);
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	f003 0303 	and.w	r3, r3, #3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	461a      	mov	r2, r3
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	4413      	add	r3, r2
 80006ae:	73fb      	strb	r3, [r7, #15]
	*interruptStatusFlag= READ_BIT(DMAPeripheral[DMA_Number]->DMA_LISR[Stream_Number/4],flagShift );
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <DMA_vReadFlagStatus+0x5c>)
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	79ba      	ldrb	r2, [r7, #6]
 80006ba:	0892      	lsrs	r2, r2, #2
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	fa22 f303 	lsr.w	r3, r2, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	701a      	strb	r2, [r3, #0]

}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	20000000 	.word	0x20000000

080006e4 <DMA_vIRQHandler>:
void DMA_vIRQHandler(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	uint8_t flagStatus=0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i=0 ;i<Total_Number_Of_Interrupts ; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e045      	b.n	800078a <DMA_vIRQHandler+0xa6>
	{

		DMA_vReadFlagStatus(DMA_Number,Stream_Number, i, &flagStatus);
 80006fe:	f107 030e 	add.w	r3, r7, #14
 8000702:	7bfa      	ldrb	r2, [r7, #15]
 8000704:	79b9      	ldrb	r1, [r7, #6]
 8000706:	79f8      	ldrb	r0, [r7, #7]
 8000708:	f7ff ffbc 	bl	8000684 <DMA_vReadFlagStatus>
		if (flagStatus)
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d038      	beq.n	8000784 <DMA_vIRQHandler+0xa0>
		{
			switch (DMA_Number)
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <DMA_vIRQHandler+0x3a>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d018      	beq.n	800074e <DMA_vIRQHandler+0x6a>
					arrDMA2_PtrToFunction[Stream_Number][i]();
				}
				break;
			default:
				/* Do Nothing!*/
				break;
 800071c:	e032      	b.n	8000784 <DMA_vIRQHandler+0xa0>
				if (arrDMA1_PtrToFunction[Stream_Number][i] != NULL)
 800071e:	79ba      	ldrb	r2, [r7, #6]
 8000720:	7bf9      	ldrb	r1, [r7, #15]
 8000722:	481e      	ldr	r0, [pc, #120]	; (800079c <DMA_vIRQHandler+0xb8>)
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	440b      	add	r3, r1
 800072e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d023      	beq.n	800077e <DMA_vIRQHandler+0x9a>
					arrDMA1_PtrToFunction[Stream_Number][i]();
 8000736:	79ba      	ldrb	r2, [r7, #6]
 8000738:	7bf9      	ldrb	r1, [r7, #15]
 800073a:	4818      	ldr	r0, [pc, #96]	; (800079c <DMA_vIRQHandler+0xb8>)
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	440b      	add	r3, r1
 8000746:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800074a:	4798      	blx	r3
				break;
 800074c:	e017      	b.n	800077e <DMA_vIRQHandler+0x9a>
				if (arrDMA2_PtrToFunction[Stream_Number][i] != NULL)
 800074e:	79ba      	ldrb	r2, [r7, #6]
 8000750:	7bf9      	ldrb	r1, [r7, #15]
 8000752:	4813      	ldr	r0, [pc, #76]	; (80007a0 <DMA_vIRQHandler+0xbc>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	440b      	add	r3, r1
 800075e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00d      	beq.n	8000782 <DMA_vIRQHandler+0x9e>
					arrDMA2_PtrToFunction[Stream_Number][i]();
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	7bf9      	ldrb	r1, [r7, #15]
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <DMA_vIRQHandler+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	440b      	add	r3, r1
 8000776:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800077a:	4798      	blx	r3
				break;
 800077c:	e001      	b.n	8000782 <DMA_vIRQHandler+0x9e>
				break;
 800077e:	bf00      	nop
 8000780:	e000      	b.n	8000784 <DMA_vIRQHandler+0xa0>
				break;
 8000782:	bf00      	nop
	for (uint8_t i=0 ;i<Total_Number_Of_Interrupts ; i++)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2b05      	cmp	r3, #5
 800078e:	d9b6      	bls.n	80006fe <DMA_vIRQHandler+0x1a>
		{
			/* Do Nothing!*/
		}
	}

}
 8000790:	bf00      	nop
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000cc 	.word	0x200000cc
 80007a0:	2000018c 	.word	0x2000018c

080007a4 <DMA1_Stream0_IRQHandler>:
/* ==========================
 *           DMA1
 * ========================== */

void DMA1_Stream0_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_0);
 80007a8:	2100      	movs	r1, #0
 80007aa:	2000      	movs	r0, #0
 80007ac:	f7ff ff9a 	bl	80006e4 <DMA_vIRQHandler>
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_1);
 80007b8:	2101      	movs	r1, #1
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ff92 	bl	80006e4 <DMA_vIRQHandler>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_3);
 80007c8:	2103      	movs	r1, #3
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff8a 	bl	80006e4 <DMA_vIRQHandler>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_4);
 80007d8:	2104      	movs	r1, #4
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff ff82 	bl	80006e4 <DMA_vIRQHandler>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_5);
 80007e8:	2105      	movs	r1, #5
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff7a 	bl	80006e4 <DMA_vIRQHandler>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_6);
 80007f8:	2106      	movs	r1, #6
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff ff72 	bl	80006e4 <DMA_vIRQHandler>
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_7);
 8000808:	2107      	movs	r1, #7
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff ff6a 	bl	80006e4 <DMA_vIRQHandler>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <DMA2_Stream0_IRQHandler>:
/* ==========================
 *           DMA2
 * ========================== */

void DMA2_Stream0_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_0);
 8000818:	2100      	movs	r1, #0
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ff62 	bl	80006e4 <DMA_vIRQHandler>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_1);
 8000828:	2101      	movs	r1, #1
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ff5a 	bl	80006e4 <DMA_vIRQHandler>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_2);
 8000838:	2102      	movs	r1, #2
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff52 	bl	80006e4 <DMA_vIRQHandler>
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_3);
 8000848:	2103      	movs	r1, #3
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff ff4a 	bl	80006e4 <DMA_vIRQHandler>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_4);
 8000858:	2104      	movs	r1, #4
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff ff42 	bl	80006e4 <DMA_vIRQHandler>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_5);
 8000868:	2105      	movs	r1, #5
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff3a 	bl	80006e4 <DMA_vIRQHandler>
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_6);
 8000878:	2106      	movs	r1, #6
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff32 	bl	80006e4 <DMA_vIRQHandler>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_7);
 8000888:	2107      	movs	r1, #7
 800088a:	2001      	movs	r0, #1
 800088c:	f7ff ff2a 	bl	80006e4 <DMA_vIRQHandler>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <GPIO_u8PinInit>:
 * @param[in] copy_ePinConfig : the initialization values of the pin
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* copy_ePinConfig)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK ;
 800089c:	2301      	movs	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
	if (copy_ePinConfig != NULL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 8117 	beq.w	8000ad6 <GPIO_u8PinInit+0x242>
	{
		if ((copy_ePinConfig->PIN_Port < INVALID) && (copy_ePinConfig->PIN_Number <= PIN15))
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b07      	cmp	r3, #7
 80008ae:	f200 810f 	bhi.w	8000ad0 <GPIO_u8PinInit+0x23c>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	f200 810a 	bhi.w	8000ad0 <GPIO_u8PinInit+0x23c>
		{
			/* Select GPIO Mode: INPUT - OUTPUT - ANALOG - AF */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER &= ~(MODER_MASK				     << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS)); // clear mode bits
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b8a      	ldr	r3, [pc, #552]	; (8000aec <GPIO_u8PinInit+0x258>)
 80008c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	785b      	ldrb	r3, [r3, #1]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	2103      	movs	r1, #3
 80008d2:	fa01 f303 	lsl.w	r3, r1, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	4b82      	ldr	r3, [pc, #520]	; (8000aec <GPIO_u8PinInit+0x258>)
 80008e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80008e6:	400a      	ands	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER |=  ((copy_ePinConfig->PIN_Type) << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS));
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b7e      	ldr	r3, [pc, #504]	; (8000aec <GPIO_u8PinInit+0x258>)
 80008f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	4619      	mov	r1, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	785b      	ldrb	r3, [r3, #1]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4619      	mov	r1, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	4b76      	ldr	r3, [pc, #472]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000912:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]
			/* Select GPIO pull state: PULLUP - PULLDOWN - NOPULL */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR &= ~(PUPDR_MASK				    	    << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS)); // clear mode bits
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b72      	ldr	r3, [pc, #456]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	785b      	ldrb	r3, [r3, #1]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2103      	movs	r1, #3
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	4b6b      	ldr	r3, [pc, #428]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000940:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000944:	400a      	ands	r2, r1
 8000946:	60da      	str	r2, [r3, #12]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR |=  ((copy_ePinConfig->PIN_PullUpDown)  << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS));
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b67      	ldr	r3, [pc, #412]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	799b      	ldrb	r3, [r3, #6]
 800095a:	4619      	mov	r1, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	785b      	ldrb	r3, [r3, #1]
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	4619      	mov	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	4b5f      	ldr	r3, [pc, #380]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000970:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000974:	430a      	orrs	r2, r1
 8000976:	60da      	str	r2, [r3, #12]
			/* Select output type and speed in case of OUTPUT / AF  */
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	789b      	ldrb	r3, [r3, #2]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d004      	beq.n	800098a <GPIO_u8PinInit+0xf6>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	2b02      	cmp	r3, #2
 8000986:	f040 80a9 	bne.w	8000adc <GPIO_u8PinInit+0x248>
			{
				/* select output type PUSHPULL - OPEN DRAIN */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER &= ~(OTYPER_MASK				 << (copy_ePinConfig->PIN_Number)); // clear mode bits
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	4b56      	ldr	r3, [pc, #344]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000996:	685a      	ldr	r2, [r3, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	4619      	mov	r1, r3
 800099e:	2301      	movs	r3, #1
 80009a0:	408b      	lsls	r3, r1
 80009a2:	43db      	mvns	r3, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	4b4f      	ldr	r3, [pc, #316]	; (8000aec <GPIO_u8PinInit+0x258>)
 80009ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009b2:	400a      	ands	r2, r1
 80009b4:	605a      	str	r2, [r3, #4]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER |=  (copy_ePinConfig->PIN_OType << (copy_ePinConfig->PIN_Number));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <GPIO_u8PinInit+0x258>)
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	4619      	mov	r1, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	785b      	ldrb	r3, [r3, #1]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	4619      	mov	r1, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	4b44      	ldr	r3, [pc, #272]	; (8000aec <GPIO_u8PinInit+0x258>)
 80009dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009e0:	430a      	orrs	r2, r1
 80009e2:	605a      	str	r2, [r3, #4]
				/* select speed type LOW_SPEED - MEDIUM_SPEED - FAST_SPEED - HIGH_SPEED */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR &= ~(OSPEEDR_MASK				   << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS)); // clear mode bits
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b40      	ldr	r3, [pc, #256]	; (8000aec <GPIO_u8PinInit+0x258>)
 80009ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	785b      	ldrb	r3, [r3, #1]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2103      	movs	r1, #3
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	4619      	mov	r1, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	4b38      	ldr	r3, [pc, #224]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000a0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a0e:	400a      	ands	r2, r1
 8000a10:	609a      	str	r2, [r3, #8]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR |=  (copy_ePinConfig->PIN_OSpeed << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	795b      	ldrb	r3, [r3, #5]
 8000a24:	4619      	mov	r1, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	4619      	mov	r1, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000a3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	609a      	str	r2, [r3, #8]
				/* select AF PIN */
				if ((copy_ePinConfig->PIN_Type == ALTERNATE))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	789b      	ldrb	r3, [r3, #2]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d148      	bne.n	8000adc <GPIO_u8PinInit+0x248>
				{
					uint8_t Local_u8RegNum = copy_ePinConfig->PIN_Number / 8U;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	73bb      	strb	r3, [r7, #14]
					uint8_t Local_u8BitNum = copy_ePinConfig->PIN_Number % 8U;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	737b      	strb	r3, [r7, #13]

					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] &= ~(AFR_MASK			  << ( Local_u8BitNum*AFR_PIN_ACCESS)); // clear mode bits
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a68:	7bba      	ldrb	r2, [r7, #14]
 8000a6a:	3208      	adds	r2, #8
 8000a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a70:	7b7b      	ldrb	r3, [r7, #13]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8a:	7bba      	ldrb	r2, [r7, #14]
 8000a8c:	4001      	ands	r1, r0
 8000a8e:	3208      	adds	r2, #8
 8000a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] |=  (copy_ePinConfig->PIN_AF  << ( Local_u8BitNum*AFR_PIN_ACCESS));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa0:	7bba      	ldrb	r2, [r7, #14]
 8000aa2:	3208      	adds	r2, #8
 8000aa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7a1b      	ldrb	r3, [r3, #8]
 8000aac:	461a      	mov	r2, r3
 8000aae:	7b7b      	ldrb	r3, [r7, #13]
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <GPIO_u8PinInit+0x258>)
 8000ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac4:	7bba      	ldrb	r2, [r7, #14]
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	3208      	adds	r2, #8
 8000aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 8000ace:	e005      	b.n	8000adc <GPIO_u8PinInit+0x248>
				}
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e003      	b.n	8000ade <GPIO_u8PinInit+0x24a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e000      	b.n	8000ade <GPIO_u8PinInit+0x24a>
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 8000adc:	bf00      	nop
	}

	return Local_u8ErrorState;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	20000008 	.word	0x20000008

08000af0 <NVIC_vEnableInterrupt>:
#include "NVIC_int.h"

#include "Utils.h"

void NVIC_vEnableInterrupt(Interrupt_t copy_eInterrupt)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_eInterrupt/32]= 0b1 << copy_eInterrupt % 32 ;
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	425a      	negs	r2, r3
 8000b00:	f003 031f 	and.w	r3, r3, #31
 8000b04:	f002 021f 	and.w	r2, r2, #31
 8000b08:	bf58      	it	pl
 8000b0a:	4253      	negpl	r3, r2
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	2301      	movs	r3, #1
 8000b12:	fa03 f102 	lsl.w	r1, r3, r2
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <NVIC_vEnableInterrupt+0x48>)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	da00      	bge.n	8000b22 <NVIC_vEnableInterrupt+0x32>
 8000b20:	331f      	adds	r3, #31
 8000b22:	115b      	asrs	r3, r3, #5
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <RCC_AHB1EnableCLK>:
#include "ErrType.h"
#include "Utils.h"
#include "stdio.h"

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->AHB1ENR,peripheral);
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <RCC_AHB1EnableCLK+0x2c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	79fa      	ldrb	r2, [r7, #7]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	4611      	mov	r1, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <RCC_AHB1EnableCLK+0x2c>)
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <RCC_APB1EnableCLK>:
	CLEAR_BIT(RCC->AHB1ENR,peripheral);

}

void RCC_APB1EnableCLK(PeripheralAPB1_t peripheral)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB1ENR,peripheral);
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <RCC_APB1EnableCLK+0x2c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	4611      	mov	r1, r2
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <RCC_APB1EnableCLK+0x2c>)
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40

}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB2ENR,peripheral);
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <RCC_APB2EnableCLK+0x2c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <RCC_APB2EnableCLK+0x2c>)
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44

}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <SPI_SendReceiveCallBack>:

uint8_t GlobalSPI_u8SizeReceiveData[3]={0};
uint8_t* GlobalSPI_pu8ReceiveData[3]={0};

void SPI_SendReceiveCallBack(SPI_Channel_t copy_eSPI)
{
 8000bcc:	b490      	push	{r4, r7}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	if (SPI_IRQ_Reason==SPI_IRQSend)
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <SPI_SendReceiveCallBack+0x118>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d148      	bne.n	8000c70 <SPI_SendReceiveCallBack+0xa4>
	{
		static uint8_t SBufferNumbberCB=0;
		static uint8_t i=1;

		if (i!=GlobalSPI_u8SizeSendData[SBufferNumbberCB])
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b41      	ldr	r3, [pc, #260]	; (8000cec <SPI_SendReceiveCallBack+0x120>)
 8000be6:	5c9a      	ldrb	r2, [r3, r2]
 8000be8:	4b41      	ldr	r3, [pc, #260]	; (8000cf0 <SPI_SendReceiveCallBack+0x124>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d014      	beq.n	8000c1a <SPI_SendReceiveCallBack+0x4e>
		{

			SPIPeripheral[copy_eSPI]->SPI_DR= GlobalSPI_pu8SendData[SBufferNumbberCB][i++];
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <SPI_SendReceiveCallBack+0x128>)
 8000bf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <SPI_SendReceiveCallBack+0x124>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	1c59      	adds	r1, r3, #1
 8000c02:	b2c8      	uxtb	r0, r1
 8000c04:	493a      	ldr	r1, [pc, #232]	; (8000cf0 <SPI_SendReceiveCallBack+0x124>)
 8000c06:	7008      	strb	r0, [r1, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	7819      	ldrb	r1, [r3, #0]
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	4a3a      	ldr	r2, [pc, #232]	; (8000cf8 <SPI_SendReceiveCallBack+0x12c>)
 8000c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c14:	460a      	mov	r2, r1
 8000c16:	60da      	str	r2, [r3, #12]

		}
	}


}
 8000c18:	e05f      	b.n	8000cda <SPI_SendReceiveCallBack+0x10e>
			GlobalSPI_u8CalledTimes--;
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <SPI_SendReceiveCallBack+0x130>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <SPI_SendReceiveCallBack+0x130>)
 8000c24:	701a      	strb	r2, [r3, #0]
			i=1;
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <SPI_SendReceiveCallBack+0x124>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
			SBufferNumbberCB++;
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000c36:	701a      	strb	r2, [r3, #0]
			SBufferNumbberCB= SBufferNumbberCB==3?0:SBufferNumbberCB;
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d002      	beq.n	8000c46 <SPI_SendReceiveCallBack+0x7a>
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	e000      	b.n	8000c48 <SPI_SendReceiveCallBack+0x7c>
 8000c46:	2300      	movs	r3, #0
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000c4a:	7013      	strb	r3, [r2, #0]
			if (GlobalSPI_u8CalledTimes)
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <SPI_SendReceiveCallBack+0x130>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d042      	beq.n	8000cda <SPI_SendReceiveCallBack+0x10e>
				SPIPeripheral[copy_eSPI]->SPI_DR= GlobalSPI_pu8SendData[SBufferNumbberCB][0];
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <SPI_SendReceiveCallBack+0x11c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <SPI_SendReceiveCallBack+0x128>)
 8000c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c60:	7819      	ldrb	r1, [r3, #0]
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a24      	ldr	r2, [pc, #144]	; (8000cf8 <SPI_SendReceiveCallBack+0x12c>)
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	460a      	mov	r2, r1
 8000c6c:	60da      	str	r2, [r3, #12]
}
 8000c6e:	e034      	b.n	8000cda <SPI_SendReceiveCallBack+0x10e>
	else if (SPI_IRQ_Reason==SPI_IRQReceive)
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <SPI_SendReceiveCallBack+0x118>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d130      	bne.n	8000cda <SPI_SendReceiveCallBack+0x10e>
		if (i!=GlobalSPI_u8SizeReceiveData[RBufferNumbberCB])
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <SPI_SendReceiveCallBack+0x134>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <SPI_SendReceiveCallBack+0x138>)
 8000c80:	5c9a      	ldrb	r2, [r3, r2]
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <SPI_SendReceiveCallBack+0x13c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d014      	beq.n	8000cb4 <SPI_SendReceiveCallBack+0xe8>
			GlobalSPI_pu8ReceiveData[RBufferNumbberCB][i++]=SPIPeripheral[copy_eSPI]->SPI_DR;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <SPI_SendReceiveCallBack+0x12c>)
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	68d8      	ldr	r0, [r3, #12]
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <SPI_SendReceiveCallBack+0x134>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <SPI_SendReceiveCallBack+0x140>)
 8000c9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <SPI_SendReceiveCallBack+0x13c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	1c59      	adds	r1, r3, #1
 8000ca6:	b2cc      	uxtb	r4, r1
 8000ca8:	4917      	ldr	r1, [pc, #92]	; (8000d08 <SPI_SendReceiveCallBack+0x13c>)
 8000caa:	700c      	strb	r4, [r1, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	b2c2      	uxtb	r2, r0
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	e012      	b.n	8000cda <SPI_SendReceiveCallBack+0x10e>
			i=0;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <SPI_SendReceiveCallBack+0x13c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
			RBufferNumbberCB++;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <SPI_SendReceiveCallBack+0x134>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <SPI_SendReceiveCallBack+0x134>)
 8000cc4:	701a      	strb	r2, [r3, #0]
			RBufferNumbberCB= RBufferNumbberCB==3?0:RBufferNumbberCB;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <SPI_SendReceiveCallBack+0x134>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	d002      	beq.n	8000cd4 <SPI_SendReceiveCallBack+0x108>
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <SPI_SendReceiveCallBack+0x134>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	e000      	b.n	8000cd6 <SPI_SendReceiveCallBack+0x10a>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SPI_SendReceiveCallBack+0x134>)
 8000cd8:	7013      	strb	r3, [r2, #0]
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc90      	pop	{r4, r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	2000024c 	.word	0x2000024c
 8000ce8:	20000270 	.word	0x20000270
 8000cec:	2000025c 	.word	0x2000025c
 8000cf0:	20000028 	.word	0x20000028
 8000cf4:	20000250 	.word	0x20000250
 8000cf8:	2000002c 	.word	0x2000002c
 8000cfc:	2000025f 	.word	0x2000025f
 8000d00:	20000271 	.word	0x20000271
 8000d04:	20000260 	.word	0x20000260
 8000d08:	20000272 	.word	0x20000272
 8000d0c:	20000264 	.word	0x20000264

08000d10 <SPI_vSendDataAsynch>:
void SPI_vSendDataAsynch(SPI_HandleTypeDef_t* hspi, uint8_t copy_u8Data_Size,uint8_t* copy_pu8Data )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	72fb      	strb	r3, [r7, #11]
	static uint8_t BufferNumbber=0;
	static uint8_t FirtTimmeFlag=0;
	SPI_IRQ_Reason=SPI_IRQSend;
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <SPI_vSendDataAsynch+0xbc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
	GlobalSPI_pu8SendData[BufferNumbber]=copy_pu8Data;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4a2a      	ldr	r2, [pc, #168]	; (8000dd4 <SPI_vSendDataAsynch+0xc4>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	GlobalSPI_u8SizeSendData[BufferNumbber]=copy_u8Data_Size;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	4619      	mov	r1, r3
 8000d38:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <SPI_vSendDataAsynch+0xc8>)
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	5453      	strb	r3, [r2, r1]
	GlobalSPI_u8CalledTimes++;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <SPI_vSendDataAsynch+0xcc>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <SPI_vSendDataAsynch+0xcc>)
 8000d48:	701a      	strb	r2, [r3, #0]
	//Make Sure there is no data is transmitted
	uint8_t FlagData=0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	75fb      	strb	r3, [r7, #23]
	while (FlagData == 0)
 8000d4e:	e006      	b.n	8000d5e <SPI_vSendDataAsynch+0x4e>
	{
		SPI_ReadFlag( hspi,SPI_TXBufferEmpty,&FlagData);
 8000d50:	f107 0317 	add.w	r3, r7, #23
 8000d54:	461a      	mov	r2, r3
 8000d56:	2101      	movs	r1, #1
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f000 fb17 	bl	800138c <SPI_ReadFlag>
	while (FlagData == 0)
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f5      	beq.n	8000d50 <SPI_vSendDataAsynch+0x40>
	}
	//Transmit first byte
	if(FirtTimmeFlag==0)
 8000d64:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <SPI_vSendDataAsynch+0xd0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10d      	bne.n	8000d88 <SPI_vSendDataAsynch+0x78>
		SPIPeripheral[hspi->SPI_ID]->SPI_DR= GlobalSPI_pu8SendData[BufferNumbber][0];
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <SPI_vSendDataAsynch+0xc4>)
 8000d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <SPI_vSendDataAsynch+0xd4>)
 8000d82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d86:	60da      	str	r2, [r3, #12]
	//Set CallBack to complete data transmission
//	SPI_SetCallBack(hspi,SPI_SendAsynchCallBack);
	//Enable Interrupt and NVIC
	SPI_EnableTxBufferEmptyInterrupt(hspi,SPI_Enable_Interrupt);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f000 fa10 	bl	80011b0 <SPI_EnableTxBufferEmptyInterrupt>
	SPI_NVICEnaleInterrupt(hspi);
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 f829 	bl	8000de8 <SPI_NVICEnaleInterrupt>

	//	GlobalSPI_u8SizeSendData[BufferNumbber]--;
	BufferNumbber++;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000da0:	701a      	strb	r2, [r3, #0]
	BufferNumbber= BufferNumbber==3?0:BufferNumbber;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d002      	beq.n	8000db0 <SPI_vSendDataAsynch+0xa0>
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	e000      	b.n	8000db2 <SPI_vSendDataAsynch+0xa2>
 8000db0:	2300      	movs	r3, #0
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <SPI_vSendDataAsynch+0xc0>)
 8000db4:	7013      	strb	r3, [r2, #0]
	FirtTimmeFlag++;
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SPI_vSendDataAsynch+0xd0>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <SPI_vSendDataAsynch+0xd0>)
 8000dc0:	701a      	strb	r2, [r3, #0]

}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000024c 	.word	0x2000024c
 8000dd0:	20000273 	.word	0x20000273
 8000dd4:	20000250 	.word	0x20000250
 8000dd8:	2000025c 	.word	0x2000025c
 8000ddc:	2000025f 	.word	0x2000025f
 8000de0:	20000274 	.word	0x20000274
 8000de4:	2000002c 	.word	0x2000002c

08000de8 <SPI_NVICEnaleInterrupt>:

}


static void SPI_NVICEnaleInterrupt(SPI_HandleTypeDef_t* hspi)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	switch(hspi->SPI_ID)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d81b      	bhi.n	8000e30 <SPI_NVICEnaleInterrupt+0x48>
 8000df8:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <SPI_NVICEnaleInterrupt+0x18>)
 8000dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfe:	bf00      	nop
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	08000e19 	.word	0x08000e19
 8000e08:	08000e21 	.word	0x08000e21
 8000e0c:	08000e29 	.word	0x08000e29
	{
	case SPI_Channel1:
		NVIC_vEnableInterrupt(NVIC_SPI1);
 8000e10:	2023      	movs	r0, #35	; 0x23
 8000e12:	f7ff fe6d 	bl	8000af0 <NVIC_vEnableInterrupt>
		break;
 8000e16:	e00b      	b.n	8000e30 <SPI_NVICEnaleInterrupt+0x48>
	case SPI_Channel2:
		NVIC_vEnableInterrupt(NVIC_SPI2);
 8000e18:	2024      	movs	r0, #36	; 0x24
 8000e1a:	f7ff fe69 	bl	8000af0 <NVIC_vEnableInterrupt>
		break;
 8000e1e:	e007      	b.n	8000e30 <SPI_NVICEnaleInterrupt+0x48>
	case SPI_Channel3:
		NVIC_vEnableInterrupt(NVIC_SPI3);
 8000e20:	2033      	movs	r0, #51	; 0x33
 8000e22:	f7ff fe65 	bl	8000af0 <NVIC_vEnableInterrupt>
		break;
 8000e26:	e003      	b.n	8000e30 <SPI_NVICEnaleInterrupt+0x48>
	case SPI_Channel4:
		NVIC_vEnableInterrupt(NVIC_SPI4);
 8000e28:	2054      	movs	r0, #84	; 0x54
 8000e2a:	f7ff fe61 	bl	8000af0 <NVIC_vEnableInterrupt>
		break;
 8000e2e:	bf00      	nop
	}
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <SPI1_IRQHandler>:
//	GlobalSPI_arrCallBack[hspi->SPI_ID]=copy_eCallBack;
//}


void SPI1_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel1);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fec5 	bl	8000bcc <SPI_SendReceiveCallBack>

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel2);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff febe 	bl	8000bcc <SPI_SendReceiveCallBack>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel3);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff feb7 	bl	8000bcc <SPI_SendReceiveCallBack>

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <SPI4_IRQHandler>:
void SPI4_IRQHandler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f7ff feb0 	bl	8000bcc <SPI_SendReceiveCallBack>

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <SPI_vInit>:




void SPI_vInit(SPI_HandleTypeDef_t* hspi)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	SPI_SetHWCRCEnable( hspi,hspi->HWCRC_Enable);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	785b      	ldrb	r3, [r3, #1]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f846 	bl	8000f10 <SPI_SetHWCRCEnable>
	SPI_SetDataFrameForamt( hspi,hspi->DataFrameFormat);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f870 	bl	8000f70 <SPI_SetDataFrameForamt>
	SPI_SetBaudRate( hspi,hspi->SPI_BaudRate);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	791b      	ldrb	r3, [r3, #4]
 8000e94:	4619      	mov	r1, r3
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 f92a 	bl	80010f0 <SPI_SetBaudRate>
	SPI_SetMasterSlave( hspi,hspi->MasterSlaveSelection);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	795b      	ldrb	r3, [r3, #5]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f954 	bl	8001150 <SPI_SetMasterSlave>

	SPI_DMATxEnable( hspi,hspi->SPI_DMATransEnable);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7a5b      	ldrb	r3, [r3, #9]
 8000eac:	4619      	mov	r1, r3
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fa0e 	bl	80012d0 <SPI_DMATxEnable>
	SPI_DMARxEnable( hspi,hspi->SPI_DMARecEnable);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 fa38 	bl	8001330 <SPI_DMARxEnable>

	SPI_EnableTxBufferEmptyInterrupt( hspi,hspi->TxBufferEmptyIE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a9b      	ldrb	r3, [r3, #10]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f972 	bl	80011b0 <SPI_EnableTxBufferEmptyInterrupt>
	SPI_EnableRxBufferFullInterrupt( hspi,hspi->RxBufferNotEmptyIE);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7adb      	ldrb	r3, [r3, #11]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f99c 	bl	8001210 <SPI_EnableRxBufferFullInterrupt>
	SPI_EnableErrorInterrupt( hspi,hspi->ErrorIE);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7b1b      	ldrb	r3, [r3, #12]
 8000edc:	4619      	mov	r1, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 f9c6 	bl	8001270 <SPI_EnableErrorInterrupt>


	SPI_SetSlavengBySW( hspi,hspi->SwMngSlaveEnable);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	799b      	ldrb	r3, [r3, #6]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f870 	bl	8000fd0 <SPI_SetSlavengBySW>
	SPI_SetSlaveSelectBySW( hspi,hspi->SwSlaveSelect);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	79db      	ldrb	r3, [r3, #7]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f89a 	bl	8001030 <SPI_SetSlaveSelectBySW>

	SPI_Enable_Peripheral( hspi,hspi->SPI_Enable);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	78db      	ldrb	r3, [r3, #3]
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f8c4 	bl	8001090 <SPI_Enable_Peripheral>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <SPI_SetHWCRCEnable>:
{
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_BIDIOE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eOutputEnableInBidirectional<<SPI_CR1_BIDIOE);
}
static void SPI_SetHWCRCEnable(SPI_HandleTypeDef_t* hspi,SPI_HWCRCEnable_t copy_eHWCRCEnable)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CRCEN);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <SPI_SetHWCRCEnable+0x5c>)
 8000f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <SPI_SetHWCRCEnable+0x5c>)
 8000f32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f3a:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eHWCRCEnable<<SPI_CR1_CRCEN);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <SPI_SetHWCRCEnable+0x5c>)
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	035b      	lsls	r3, r3, #13
 8000f4e:	4619      	mov	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SPI_SetHWCRCEnable+0x5c>)
 8000f58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	2000002c 	.word	0x2000002c

08000f70 <SPI_SetDataFrameForamt>:

static void SPI_SetDataFrameForamt(SPI_HandleTypeDef_t* hspi,SPI_DataFrameFormat_t copy_eDataFrameFormat)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_DFF);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <SPI_SetDataFrameForamt+0x5c>)
 8000f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <SPI_SetDataFrameForamt+0x5c>)
 8000f92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f9a:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eDataFrameFormat<<SPI_CR1_DFF);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <SPI_SetDataFrameForamt+0x5c>)
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	02db      	lsls	r3, r3, #11
 8000fae:	4619      	mov	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SPI_SetDataFrameForamt+0x5c>)
 8000fb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	2000002c 	.word	0x2000002c

08000fd0 <SPI_SetSlavengBySW>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_RXONLY);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eReceiveOnlyModeEnable<<SPI_CR1_RXONLY);
}

static void SPI_SetSlavengBySW(SPI_HandleTypeDef_t* hspi,SPI_SWSlaveMng_t copy_eSWSlaveMng)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSM);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <SPI_SetSlavengBySW+0x5c>)
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <SPI_SetSlavengBySW+0x5c>)
 8000ff2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ff6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ffa:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSWSlaveMng<<SPI_CR1_SSM);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SPI_SetSlavengBySW+0x5c>)
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	025b      	lsls	r3, r3, #9
 800100e:	4619      	mov	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <SPI_SetSlavengBySW+0x5c>)
 8001018:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	2000002c 	.word	0x2000002c

08001030 <SPI_SetSlaveSelectBySW>:

static void SPI_SetSlaveSelectBySW(SPI_HandleTypeDef_t* hspi,SPI_InternalSlaveSelect_t copy_eInternalSlaveSelect)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSI);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <SPI_SetSlaveSelectBySW+0x5c>)
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <SPI_SetSlaveSelectBySW+0x5c>)
 8001052:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800105a:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eInternalSlaveSelect<<SPI_CR1_SSI);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <SPI_SetSlaveSelectBySW+0x5c>)
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	4619      	mov	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <SPI_SetSlaveSelectBySW+0x5c>)
 8001078:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	2000002c 	.word	0x2000002c

08001090 <SPI_Enable_Peripheral>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_LSBFIRST);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_LSBFirst<<SPI_CR1_LSBFIRST);
}

static void SPI_Enable_Peripheral(SPI_HandleTypeDef_t* hspi,SPI_Enable_t copy_eSPI_Enable)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SPE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <SPI_Enable_Peripheral+0x5c>)
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <SPI_Enable_Peripheral+0x5c>)
 80010b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ba:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_Enable<<SPI_CR1_SPE);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <SPI_Enable_Peripheral+0x5c>)
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	4619      	mov	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SPI_Enable_Peripheral+0x5c>)
 80010d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	2000002c 	.word	0x2000002c

080010f0 <SPI_SetBaudRate>:

static void SPI_SetBaudRate(SPI_HandleTypeDef_t* hspi,SPI_BaudRate_t copy_eSPI_BaudRate)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b111<<SPI_CR1_BR);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <SPI_SetBaudRate+0x5c>)
 8001104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <SPI_SetBaudRate+0x5c>)
 8001112:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001116:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800111a:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_BaudRate<<SPI_CR1_BR);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <SPI_SetBaudRate+0x5c>)
 8001124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4619      	mov	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <SPI_SetBaudRate+0x5c>)
 8001138:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	2000002c 	.word	0x2000002c

08001150 <SPI_SetMasterSlave>:

static void SPI_SetMasterSlave(SPI_HandleTypeDef_t* hspi,SPI_MasterSlave_t copy_eMasterSlave)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_MSTR);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <SPI_SetMasterSlave+0x5c>)
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4619      	mov	r1, r3
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <SPI_SetMasterSlave+0x5c>)
 8001172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001176:	f022 0204 	bic.w	r2, r2, #4
 800117a:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eMasterSlave<<SPI_CR1_MSTR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <SPI_SetMasterSlave+0x5c>)
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4619      	mov	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SPI_SetMasterSlave+0x5c>)
 8001198:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800119c:	430a      	orrs	r2, r1
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	2000002c 	.word	0x2000002c

080011b0 <SPI_EnableTxBufferEmptyInterrupt>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eClockPhase<<SPI_CR1_CPHA);
}


void SPI_EnableTxBufferEmptyInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXEIE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 80011d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011da:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_TXEIE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 80011e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	01db      	lsls	r3, r3, #7
 80011ee:	4619      	mov	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 80011f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	605a      	str	r2, [r3, #4]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	2000002c 	.word	0x2000002c

08001210 <SPI_EnableRxBufferFullInterrupt>:
void SPI_EnableRxBufferFullInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXNEIE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800123a:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_RXNEIE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	4619      	mov	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001258:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	2000002c 	.word	0x2000002c

08001270 <SPI_EnableErrorInterrupt>:
void SPI_EnableErrorInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_ERRIE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <SPI_EnableErrorInterrupt+0x5c>)
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <SPI_EnableErrorInterrupt+0x5c>)
 8001292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001296:	f022 0220 	bic.w	r2, r2, #32
 800129a:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_ERRIE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <SPI_EnableErrorInterrupt+0x5c>)
 80012a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	015b      	lsls	r3, r3, #5
 80012ae:	4619      	mov	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SPI_EnableErrorInterrupt+0x5c>)
 80012b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	2000002c 	.word	0x2000002c

080012d0 <SPI_DMATxEnable>:
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_SSOE);
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eSSOutputEnable<<SPI_CR2_SSOE);
}

static void SPI_DMATxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMATxEnable_t copy_eDMATxEnable)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXDMAEN);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <SPI_DMATxEnable+0x5c>)
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <SPI_DMATxEnable+0x5c>)
 80012f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012f6:	f022 0202 	bic.w	r2, r2, #2
 80012fa:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMATxEnable<<SPI_CR2_TXDMAEN);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <SPI_DMATxEnable+0x5c>)
 8001304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4619      	mov	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <SPI_DMATxEnable+0x5c>)
 8001318:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800131c:	430a      	orrs	r2, r1
 800131e:	605a      	str	r2, [r3, #4]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	2000002c 	.word	0x2000002c

08001330 <SPI_DMARxEnable>:

static void SPI_DMARxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMARxEnable_t copy_eDMARxEnable)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXDMAEN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <SPI_DMARxEnable+0x58>)
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <SPI_DMARxEnable+0x58>)
 8001352:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMARxEnable<<SPI_CR2_RXDMAEN);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <SPI_DMARxEnable+0x58>)
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	6859      	ldr	r1, [r3, #4]
 800136a:	78fa      	ldrb	r2, [r7, #3]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SPI_DMARxEnable+0x58>)
 8001374:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	2000002c 	.word	0x2000002c

0800138c <SPI_ReadFlag>:

void SPI_ReadFlag(SPI_HandleTypeDef_t* hspi,SPI_Flags_t copy_eFlag,uint8_t* pu8DataFlag)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	460b      	mov	r3, r1
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	72fb      	strb	r3, [r7, #11]
	*pu8DataFlag=READ_BIT(SPIPeripheral[hspi->SPI_ID]->SPI_SR,copy_eFlag);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <SPI_ReadFlag+0x3c>)
 80013a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	fa22 f303 	lsr.w	r3, r2, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000002c 	.word	0x2000002c

080013cc <SysTick_Handler>:

STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <SysTick_Handler+0x2c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(STK->STK_CTRL,ENABLE);
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <SysTick_Handler+0x30>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <SysTick_Handler+0x30>)
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <SysTick_Handler+0x34>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Handler+0x34>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4798      	blx	r3
	}
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000027c 	.word	0x2000027c
 80013fc:	e000e010 	.word	0xe000e010
 8001400:	20000278 	.word	0x20000278

08001404 <STK_vSetBusyWait>:
	CLEAR_BIT(STK->STK_CTRL,ENABLE);
}


void STK_vSetBusyWait(uint32_t copy_u32Ticks)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	STK->STK_VAL = 0 ;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <STK_vSetBusyWait+0x48>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
	// load timer
	STK->STK_LOAD=copy_u32Ticks;
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <STK_vSetBusyWait+0x48>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <STK_vSetBusyWait+0x48>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0b      	ldr	r2, [pc, #44]	; (800144c <STK_vSetBusyWait+0x48>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(STK->STK_CTRL,COUNTFLAG) != 1);
 8001424:	bf00      	nop
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <STK_vSetBusyWait+0x48>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d1f8      	bne.n	8001426 <STK_vSetBusyWait+0x22>
	// stop timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <STK_vSetBusyWait+0x48>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <STK_vSetBusyWait+0x48>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e010 	.word	0xe000e010

08001450 <main>:
uint8_t myarr2[10]={1,2,3,4,5,6,7,8,9,10};
uint8_t recData=0;
uint8_t sendData=255;

int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOAEN);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fb70 	bl	8000b3c <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);
 800145c:	2002      	movs	r0, #2
 800145e:	f7ff fb6d 	bl	8000b3c <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOBEN);
 8001462:	2001      	movs	r0, #1
 8001464:	f7ff fb6a 	bl	8000b3c <RCC_AHB1EnableCLK>

	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
 8001468:	2015      	movs	r0, #21
 800146a:	f7ff fb67 	bl	8000b3c <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA2EN);
 800146e:	2016      	movs	r0, #22
 8001470:	f7ff fb64 	bl	8000b3c <RCC_AHB1EnableCLK>

	RCC_APB1EnableCLK(RCC_APB1ENR_USART2EN);
 8001474:	2011      	movs	r0, #17
 8001476:	f7ff fb79 	bl	8000b6c <RCC_APB1EnableCLK>
	RCC_APB1EnableCLK(RCC_APB1ENR_SPI3EN);
 800147a:	200f      	movs	r0, #15
 800147c:	f7ff fb76 	bl	8000b6c <RCC_APB1EnableCLK>
	RCC_APB1EnableCLK(RCC_APB1ENR_SPI2EN);
 8001480:	200e      	movs	r0, #14
 8001482:	f7ff fb73 	bl	8000b6c <RCC_APB1EnableCLK>

	RCC_APB2EnableCLK(RCC_APB2ENR_SPI1EN);
 8001486:	200c      	movs	r0, #12
 8001488:	f7ff fb88 	bl	8000b9c <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(RCC_APB2ENR_SPI4EN);
 800148c:	200d      	movs	r0, #13
 800148e:	f7ff fb85 	bl	8000b9c <RCC_APB2EnableCLK>

	GPIO_u8PinInit(&PinSCK);
 8001492:	480e      	ldr	r0, [pc, #56]	; (80014cc <main+0x7c>)
 8001494:	f7ff f9fe 	bl	8000894 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinMISO);
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <main+0x80>)
 800149a:	f7ff f9fb 	bl	8000894 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinMOSI);
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <main+0x84>)
 80014a0:	f7ff f9f8 	bl	8000894 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinCS);
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <main+0x88>)
 80014a6:	f7ff f9f5 	bl	8000894 <GPIO_u8PinInit>

//	UART_vInit( &ourUsart);
	SPI_vInit(&ourSPI);
 80014aa:	480c      	ldr	r0, [pc, #48]	; (80014dc <main+0x8c>)
 80014ac:	f7ff fce0 	bl	8000e70 <SPI_vInit>
	DMA_vInit( &ourDMA);
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <main+0x90>)
 80014b2:	f7fe fea7 	bl	8000204 <DMA_vInit>
//	DMA_vStart(&ourDMA,(uint32_t)0x40004404, (uint32_t)myarr , 6);
//	DMA_vStart(&ourDMA,(uint32_t)myarr2, (uint32_t)myarr , 6);

	uint8_t data=255;
 80014b6:	23ff      	movs	r3, #255	; 0xff
 80014b8:	71fb      	strb	r3, [r7, #7]

	/* Loop forever */
	while(1)
	{
//	 SPI_vSendReceive( &ourSPI, &recData, sendData--);
	 SPI_vSendDataAsynch(&ourSPI, 10,myarr2 );
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <main+0x94>)
 80014bc:	210a      	movs	r1, #10
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <main+0x8c>)
 80014c0:	f7ff fc26 	bl	8000d10 <SPI_vSendDataAsynch>

//		SPI_vSendSynch( &ourSPI,data++ );
		 STK_vSetBusyWait(1000000);
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <main+0x98>)
 80014c6:	f7ff ff9d 	bl	8001404 <STK_vSetBusyWait>
	 SPI_vSendDataAsynch(&ourSPI, 10,myarr2 );
 80014ca:	e7f6      	b.n	80014ba <main+0x6a>
 80014cc:	2000003c 	.word	0x2000003c
 80014d0:	20000048 	.word	0x20000048
 80014d4:	20000054 	.word	0x20000054
 80014d8:	20000060 	.word	0x20000060
 80014dc:	2000006c 	.word	0x2000006c
 80014e0:	2000007c 	.word	0x2000007c
 80014e4:	200000a4 	.word	0x200000a4
 80014e8:	000f4240 	.word	0x000f4240

080014ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <LoopForever+0xe>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	; (8001538 <LoopForever+0x16>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800151a:	f000 f811 	bl	8001540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800151e:	f7ff ff97 	bl	8001450 <main>

08001522 <LoopForever>:

LoopForever:
  b LoopForever
 8001522:	e7fe      	b.n	8001522 <LoopForever>
  ldr   r0, =_estack
 8001524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001530:	080015a8 	.word	0x080015a8
  ldr r2, =_sbss
 8001534:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001538:	20000280 	.word	0x20000280

0800153c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>
	...

08001540 <__libc_init_array>:
 8001540:	b570      	push	{r4, r5, r6, lr}
 8001542:	4d0d      	ldr	r5, [pc, #52]	; (8001578 <__libc_init_array+0x38>)
 8001544:	4c0d      	ldr	r4, [pc, #52]	; (800157c <__libc_init_array+0x3c>)
 8001546:	1b64      	subs	r4, r4, r5
 8001548:	10a4      	asrs	r4, r4, #2
 800154a:	2600      	movs	r6, #0
 800154c:	42a6      	cmp	r6, r4
 800154e:	d109      	bne.n	8001564 <__libc_init_array+0x24>
 8001550:	4d0b      	ldr	r5, [pc, #44]	; (8001580 <__libc_init_array+0x40>)
 8001552:	4c0c      	ldr	r4, [pc, #48]	; (8001584 <__libc_init_array+0x44>)
 8001554:	f000 f818 	bl	8001588 <_init>
 8001558:	1b64      	subs	r4, r4, r5
 800155a:	10a4      	asrs	r4, r4, #2
 800155c:	2600      	movs	r6, #0
 800155e:	42a6      	cmp	r6, r4
 8001560:	d105      	bne.n	800156e <__libc_init_array+0x2e>
 8001562:	bd70      	pop	{r4, r5, r6, pc}
 8001564:	f855 3b04 	ldr.w	r3, [r5], #4
 8001568:	4798      	blx	r3
 800156a:	3601      	adds	r6, #1
 800156c:	e7ee      	b.n	800154c <__libc_init_array+0xc>
 800156e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001572:	4798      	blx	r3
 8001574:	3601      	adds	r6, #1
 8001576:	e7f2      	b.n	800155e <__libc_init_array+0x1e>
 8001578:	080015a0 	.word	0x080015a0
 800157c:	080015a0 	.word	0x080015a0
 8001580:	080015a0 	.word	0x080015a0
 8001584:	080015a4 	.word	0x080015a4

08001588 <_init>:
 8001588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158a:	bf00      	nop
 800158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158e:	bc08      	pop	{r3}
 8001590:	469e      	mov	lr, r3
 8001592:	4770      	bx	lr

08001594 <_fini>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	bf00      	nop
 8001598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159a:	bc08      	pop	{r3}
 800159c:	469e      	mov	lr, r3
 800159e:	4770      	bx	lr
