
F446RE_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000043c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000600  08000600  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000600  08000600  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000600  08000600  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000600  08000600  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000002c  08000634  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000634  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ee2  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f2  00000000  00000000  00020f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00021230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  000212f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000246b  00000000  00000000  00021388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000143e  00000000  00000000  000237f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008e6d  00000000  00000000  00024c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002da9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000208  00000000  00000000  0002daf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080005e8 	.word	0x080005e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	080005e8 	.word	0x080005e8

08000204 <GPIO_u8PinInit>:
 * @param[in] copy_ePinConfig : the initialization values of the pin
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* copy_ePinConfig)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK ;
 800020c:	2301      	movs	r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]
	if (copy_ePinConfig != NULL)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f000 8117 	beq.w	8000446 <GPIO_u8PinInit+0x242>
	{
		if ((copy_ePinConfig->PIN_Port < INVALID) && (copy_ePinConfig->PIN_Number <= PIN15))
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b07      	cmp	r3, #7
 800021e:	f200 810f 	bhi.w	8000440 <GPIO_u8PinInit+0x23c>
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b0f      	cmp	r3, #15
 8000228:	f200 810a 	bhi.w	8000440 <GPIO_u8PinInit+0x23c>
		{
			/* Select GPIO Mode: INPUT - OUTPUT - ANALOG - AF */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER &= ~(MODER_MASK				     << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS)); // clear mode bits
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	461a      	mov	r2, r3
 8000232:	4b8a      	ldr	r3, [pc, #552]	; (800045c <GPIO_u8PinInit+0x258>)
 8000234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000238:	681a      	ldr	r2, [r3, #0]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	785b      	ldrb	r3, [r3, #1]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	2103      	movs	r1, #3
 8000242:	fa01 f303 	lsl.w	r3, r1, r3
 8000246:	43db      	mvns	r3, r3
 8000248:	4619      	mov	r1, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	4b82      	ldr	r3, [pc, #520]	; (800045c <GPIO_u8PinInit+0x258>)
 8000252:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000256:	400a      	ands	r2, r1
 8000258:	601a      	str	r2, [r3, #0]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER |=  ((copy_ePinConfig->PIN_Type) << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS));
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	4b7e      	ldr	r3, [pc, #504]	; (800045c <GPIO_u8PinInit+0x258>)
 8000262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	789b      	ldrb	r3, [r3, #2]
 800026c:	4619      	mov	r1, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	785b      	ldrb	r3, [r3, #1]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	4619      	mov	r1, r3
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	4b76      	ldr	r3, [pc, #472]	; (800045c <GPIO_u8PinInit+0x258>)
 8000282:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000286:	430a      	orrs	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
			/* Select GPIO pull state: PULLUP - PULLDOWN - NOPULL */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR &= ~(PUPDR_MASK				    	    << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS)); // clear mode bits
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	461a      	mov	r2, r3
 8000290:	4b72      	ldr	r3, [pc, #456]	; (800045c <GPIO_u8PinInit+0x258>)
 8000292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000296:	68da      	ldr	r2, [r3, #12]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2103      	movs	r1, #3
 80002a0:	fa01 f303 	lsl.w	r3, r1, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	4b6b      	ldr	r3, [pc, #428]	; (800045c <GPIO_u8PinInit+0x258>)
 80002b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002b4:	400a      	ands	r2, r1
 80002b6:	60da      	str	r2, [r3, #12]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR |=  ((copy_ePinConfig->PIN_PullUpDown)  << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	461a      	mov	r2, r3
 80002be:	4b67      	ldr	r3, [pc, #412]	; (800045c <GPIO_u8PinInit+0x258>)
 80002c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002c4:	68da      	ldr	r2, [r3, #12]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	799b      	ldrb	r3, [r3, #6]
 80002ca:	4619      	mov	r1, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	785b      	ldrb	r3, [r3, #1]
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	4619      	mov	r1, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	4b5f      	ldr	r3, [pc, #380]	; (800045c <GPIO_u8PinInit+0x258>)
 80002e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002e4:	430a      	orrs	r2, r1
 80002e6:	60da      	str	r2, [r3, #12]
			/* Select output type and speed in case of OUTPUT / AF  */
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d004      	beq.n	80002fa <GPIO_u8PinInit+0xf6>
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	789b      	ldrb	r3, [r3, #2]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	f040 80a9 	bne.w	800044c <GPIO_u8PinInit+0x248>
			{
				/* select output type PUSHPULL - OPEN DRAIN */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER &= ~(OTYPER_MASK				 << (copy_ePinConfig->PIN_Number)); // clear mode bits
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	461a      	mov	r2, r3
 8000300:	4b56      	ldr	r3, [pc, #344]	; (800045c <GPIO_u8PinInit+0x258>)
 8000302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000306:	685a      	ldr	r2, [r3, #4]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	785b      	ldrb	r3, [r3, #1]
 800030c:	4619      	mov	r1, r3
 800030e:	2301      	movs	r3, #1
 8000310:	408b      	lsls	r3, r1
 8000312:	43db      	mvns	r3, r3
 8000314:	4619      	mov	r1, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	4b4f      	ldr	r3, [pc, #316]	; (800045c <GPIO_u8PinInit+0x258>)
 800031e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000322:	400a      	ands	r2, r1
 8000324:	605a      	str	r2, [r3, #4]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER |=  (copy_ePinConfig->PIN_OType << (copy_ePinConfig->PIN_Number));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	461a      	mov	r2, r3
 800032c:	4b4b      	ldr	r3, [pc, #300]	; (800045c <GPIO_u8PinInit+0x258>)
 800032e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	4619      	mov	r1, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	785b      	ldrb	r3, [r3, #1]
 800033e:	fa01 f303 	lsl.w	r3, r1, r3
 8000342:	4619      	mov	r1, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	4b44      	ldr	r3, [pc, #272]	; (800045c <GPIO_u8PinInit+0x258>)
 800034c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
				/* select speed type LOW_SPEED - MEDIUM_SPEED - FAST_SPEED - HIGH_SPEED */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR &= ~(OSPEEDR_MASK				   << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS)); // clear mode bits
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	4b40      	ldr	r3, [pc, #256]	; (800045c <GPIO_u8PinInit+0x258>)
 800035c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000360:	689a      	ldr	r2, [r3, #8]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	785b      	ldrb	r3, [r3, #1]
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	2103      	movs	r1, #3
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	43db      	mvns	r3, r3
 8000370:	4619      	mov	r1, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	4b38      	ldr	r3, [pc, #224]	; (800045c <GPIO_u8PinInit+0x258>)
 800037a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800037e:	400a      	ands	r2, r1
 8000380:	609a      	str	r2, [r3, #8]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR |=  (copy_ePinConfig->PIN_OSpeed << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	4b34      	ldr	r3, [pc, #208]	; (800045c <GPIO_u8PinInit+0x258>)
 800038a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800038e:	689a      	ldr	r2, [r3, #8]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	795b      	ldrb	r3, [r3, #5]
 8000394:	4619      	mov	r1, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	785b      	ldrb	r3, [r3, #1]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	4b2c      	ldr	r3, [pc, #176]	; (800045c <GPIO_u8PinInit+0x258>)
 80003aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003ae:	430a      	orrs	r2, r1
 80003b0:	609a      	str	r2, [r3, #8]
				/* select AF PIN */
				if ((copy_ePinConfig->PIN_Type == ALTERNATE))
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	789b      	ldrb	r3, [r3, #2]
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d148      	bne.n	800044c <GPIO_u8PinInit+0x248>
				{
					uint8_t Local_u8RegNum = copy_ePinConfig->PIN_Number / 8U;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	785b      	ldrb	r3, [r3, #1]
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	73bb      	strb	r3, [r7, #14]
					uint8_t Local_u8BitNum = copy_ePinConfig->PIN_Number % 8U;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	785b      	ldrb	r3, [r3, #1]
 80003c6:	f003 0307 	and.w	r3, r3, #7
 80003ca:	737b      	strb	r3, [r7, #13]

					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] &= ~(AFR_MASK			  << ( Local_u8BitNum*AFR_PIN_ACCESS)); // clear mode bits
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4b22      	ldr	r3, [pc, #136]	; (800045c <GPIO_u8PinInit+0x258>)
 80003d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d8:	7bba      	ldrb	r2, [r7, #14]
 80003da:	3208      	adds	r2, #8
 80003dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003e0:	7b7b      	ldrb	r3, [r7, #13]
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	220f      	movs	r2, #15
 80003e6:	fa02 f303 	lsl.w	r3, r2, r3
 80003ea:	43db      	mvns	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <GPIO_u8PinInit+0x258>)
 80003f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003fa:	7bba      	ldrb	r2, [r7, #14]
 80003fc:	4001      	ands	r1, r0
 80003fe:	3208      	adds	r2, #8
 8000400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] |=  (copy_ePinConfig->PIN_AF  << ( Local_u8BitNum*AFR_PIN_ACCESS));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <GPIO_u8PinInit+0x258>)
 800040c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000410:	7bba      	ldrb	r2, [r7, #14]
 8000412:	3208      	adds	r2, #8
 8000414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	7a1b      	ldrb	r3, [r3, #8]
 800041c:	461a      	mov	r2, r3
 800041e:	7b7b      	ldrb	r3, [r7, #13]
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	fa02 f303 	lsl.w	r3, r2, r3
 8000426:	4618      	mov	r0, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	461a      	mov	r2, r3
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <GPIO_u8PinInit+0x258>)
 8000430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000434:	7bba      	ldrb	r2, [r7, #14]
 8000436:	4301      	orrs	r1, r0
 8000438:	3208      	adds	r2, #8
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 800043e:	e005      	b.n	800044c <GPIO_u8PinInit+0x248>
				}
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000440:	2302      	movs	r3, #2
 8000442:	73fb      	strb	r3, [r7, #15]
 8000444:	e003      	b.n	800044e <GPIO_u8PinInit+0x24a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000446:	2303      	movs	r3, #3
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e000      	b.n	800044e <GPIO_u8PinInit+0x24a>
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 800044c:	bf00      	nop
	}

	return Local_u8ErrorState;
 800044e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000450:	4618      	mov	r0, r3
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr
 800045c:	20000000 	.word	0x20000000

08000460 <GPIO_vSetOutputPinValue>:
 * @retval ErrorStatus
 *
 */

uint8_t GPIO_vSetOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_ODR_t copy_GPIO_ODR)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
 800046a:	460b      	mov	r3, r1
 800046c:	71bb      	strb	r3, [r7, #6]
 800046e:	4613      	mov	r3, r2
 8000470:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK ;
 8000472:	2301      	movs	r3, #1
 8000474:	73fb      	strb	r3, [r7, #15]
	if ((copy_eGPIO_Port < INVALID) && (copy_eGPIO_Pin <= PIN15))
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b07      	cmp	r3, #7
 800047a:	d82d      	bhi.n	80004d8 <GPIO_vSetOutputPinValue+0x78>
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d82a      	bhi.n	80004d8 <GPIO_vSetOutputPinValue+0x78>
	{
		if (copy_GPIO_ODR == OUTPUT_LOW || copy_GPIO_ODR == OUTPUT_HIGH)
 8000482:	797b      	ldrb	r3, [r7, #5]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d002      	beq.n	800048e <GPIO_vSetOutputPinValue+0x2e>
 8000488:	797b      	ldrb	r3, [r7, #5]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d121      	bne.n	80004d2 <GPIO_vSetOutputPinValue+0x72>
		{
			GPIO_PORT[copy_eGPIO_Port]->ODR &= ~(ODR_MASK			 << (copy_eGPIO_Pin)); // clear mode bits
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4a16      	ldr	r2, [pc, #88]	; (80004ec <GPIO_vSetOutputPinValue+0x8c>)
 8000492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	2101      	movs	r1, #1
 800049c:	fa01 f303 	lsl.w	r3, r1, r3
 80004a0:	43db      	mvns	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	4911      	ldr	r1, [pc, #68]	; (80004ec <GPIO_vSetOutputPinValue+0x8c>)
 80004a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004ac:	4002      	ands	r2, r0
 80004ae:	615a      	str	r2, [r3, #20]
			GPIO_PORT[copy_eGPIO_Port]->ODR |=  (copy_GPIO_ODR 	 	 << (copy_eGPIO_Pin));
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <GPIO_vSetOutputPinValue+0x8c>)
 80004b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	7979      	ldrb	r1, [r7, #5]
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	4909      	ldr	r1, [pc, #36]	; (80004ec <GPIO_vSetOutputPinValue+0x8c>)
 80004c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004cc:	4302      	orrs	r2, r0
 80004ce:	615a      	str	r2, [r3, #20]
		if (copy_GPIO_ODR == OUTPUT_LOW || copy_GPIO_ODR == OUTPUT_HIGH)
 80004d0:	e004      	b.n	80004dc <GPIO_vSetOutputPinValue+0x7c>
		}
		else
		{
			Local_u8ErrorState = NOK;
 80004d2:	2302      	movs	r3, #2
 80004d4:	73fb      	strb	r3, [r7, #15]
		if (copy_GPIO_ODR == OUTPUT_LOW || copy_GPIO_ODR == OUTPUT_HIGH)
 80004d6:	e001      	b.n	80004dc <GPIO_vSetOutputPinValue+0x7c>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 80004d8:	2302      	movs	r3, #2
 80004da:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]

}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000

080004f0 <RCC_AHB1EnableCLK>:
#include "ErrType.h"
#include "Utils.h"
#include "stdio.h"

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->AHB1ENR,peripheral);
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <RCC_AHB1EnableCLK+0x2c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	79fa      	ldrb	r2, [r7, #7]
 8000500:	2101      	movs	r1, #1
 8000502:	fa01 f202 	lsl.w	r2, r1, r2
 8000506:	4611      	mov	r1, r2
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <RCC_AHB1EnableCLK+0x2c>)
 800050a:	430b      	orrs	r3, r1
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023800 	.word	0x40023800

08000520 <main>:
		.PIN_LCKSTS=UNLOCKED,

};

int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    /* Loop forever */
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOAEN);
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ffe3 	bl	80004f0 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);
 800052a:	2002      	movs	r0, #2
 800052c:	f7ff ffe0 	bl	80004f0 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOBEN);
 8000530:	2001      	movs	r0, #1
 8000532:	f7ff ffdd 	bl	80004f0 <RCC_AHB1EnableCLK>
	GPIO_u8PinInit(&mypin);  // A5
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <main+0x28>)
 8000538:	f7ff fe64 	bl	8000204 <GPIO_u8PinInit>
	GPIO_vSetOutputPinValue(PORTA,PIN5,OUTPUT_HIGH);
 800053c:	2201      	movs	r2, #1
 800053e:	2105      	movs	r1, #5
 8000540:	2000      	movs	r0, #0
 8000542:	f7ff ff8d 	bl	8000460 <GPIO_vSetOutputPinValue>

	for(;;);
 8000546:	e7fe      	b.n	8000546 <main+0x26>
 8000548:	20000020 	.word	0x20000020

0800054c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800054c:	480d      	ldr	r0, [pc, #52]	; (8000584 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <LoopForever+0x6>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	; (800058c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <LoopForever+0xe>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	; (8000598 <LoopForever+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057a:	f000 f811 	bl	80005a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff ffcf 	bl	8000520 <main>

08000582 <LoopForever>:

LoopForever:
  b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   r0, =_estack
 8000584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000590:	08000608 	.word	0x08000608
  ldr r2, =_sbss
 8000594:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000598:	20000048 	.word	0x20000048

0800059c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <__libc_init_array>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4d0d      	ldr	r5, [pc, #52]	; (80005d8 <__libc_init_array+0x38>)
 80005a4:	4c0d      	ldr	r4, [pc, #52]	; (80005dc <__libc_init_array+0x3c>)
 80005a6:	1b64      	subs	r4, r4, r5
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	2600      	movs	r6, #0
 80005ac:	42a6      	cmp	r6, r4
 80005ae:	d109      	bne.n	80005c4 <__libc_init_array+0x24>
 80005b0:	4d0b      	ldr	r5, [pc, #44]	; (80005e0 <__libc_init_array+0x40>)
 80005b2:	4c0c      	ldr	r4, [pc, #48]	; (80005e4 <__libc_init_array+0x44>)
 80005b4:	f000 f818 	bl	80005e8 <_init>
 80005b8:	1b64      	subs	r4, r4, r5
 80005ba:	10a4      	asrs	r4, r4, #2
 80005bc:	2600      	movs	r6, #0
 80005be:	42a6      	cmp	r6, r4
 80005c0:	d105      	bne.n	80005ce <__libc_init_array+0x2e>
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c8:	4798      	blx	r3
 80005ca:	3601      	adds	r6, #1
 80005cc:	e7ee      	b.n	80005ac <__libc_init_array+0xc>
 80005ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d2:	4798      	blx	r3
 80005d4:	3601      	adds	r6, #1
 80005d6:	e7f2      	b.n	80005be <__libc_init_array+0x1e>
 80005d8:	08000600 	.word	0x08000600
 80005dc:	08000600 	.word	0x08000600
 80005e0:	08000600 	.word	0x08000600
 80005e4:	08000604 	.word	0x08000604

080005e8 <_init>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr

080005f4 <_fini>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr
