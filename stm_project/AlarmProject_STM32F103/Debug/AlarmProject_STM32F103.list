
AlarmProject_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001778  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080018a8  080018a8  000118a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018e0  080018e0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  080018e0  080018e0  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018e0  080018e0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018e0  080018e0  000118e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018e4  080018e4  000118e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080018e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000ac  08001994  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08001994  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e81  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e16  00000000  00000000  00024f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00025d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00026230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a87  00000000  00000000  00026628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000064bd  00000000  00000000  0002a0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a85a  00000000  00000000  0003056c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003adc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f84  00000000  00000000  0003ae18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000ac 	.word	0x200000ac
 800014c:	00000000 	.word	0x00000000
 8000150:	08001890 	.word	0x08001890

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000b0 	.word	0x200000b0
 800016c:	08001890 	.word	0x08001890

08000170 <LCD_Init>:
extern PinConfig_t LCD_D5;
extern PinConfig_t LCD_D6;
extern PinConfig_t LCD_D7;

#if LCD_MODE == _4_BIT
void LCD_Init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	STK_Delay_ms(50);
 8000174:	2032      	movs	r0, #50	; 0x32
 8000176:	f001 f877 	bl	8001268 <STK_Delay_ms>
	LCD_writeInstruction(0x02);
 800017a:	2002      	movs	r0, #2
 800017c:	f000 f812 	bl	80001a4 <LCD_writeInstruction>
	LCD_writeInstruction(0x28); // screen on - 4 bit mode
 8000180:	2028      	movs	r0, #40	; 0x28
 8000182:	f000 f80f 	bl	80001a4 <LCD_writeInstruction>
	LCD_writeInstruction(0x0C); // screen FULL - Cursor OFF (0F/0E)
 8000186:	200c      	movs	r0, #12
 8000188:	f000 f80c 	bl	80001a4 <LCD_writeInstruction>
	LCD_writeInstruction(0x01); // clear Screen
 800018c:	2001      	movs	r0, #1
 800018e:	f000 f809 	bl	80001a4 <LCD_writeInstruction>
	STK_Delay_ms(1);
 8000192:	2001      	movs	r0, #1
 8000194:	f001 f868 	bl	8001268 <STK_Delay_ms>
	LCD_writeInstruction(0x06); // SHIFT TO RIGHT - NO SHIFT
 8000198:	2006      	movs	r0, #6
 800019a:	f000 f803 	bl	80001a4 <LCD_writeInstruction>
}
 800019e:	bf00      	nop
 80001a0:	bd80      	pop	{r7, pc}
	...

080001a4 <LCD_writeInstruction>:
void LCD_writeInstruction(uint8_t ins){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
	GPIO_vSetOutputPinValue(LCD_RS.PIN_Port,LCD_RS.PIN_Number,OUTPUT_LOW);
 80001ae:	4b4d      	ldr	r3, [pc, #308]	; (80002e4 <LCD_writeInstruction+0x140>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4a4c      	ldr	r2, [pc, #304]	; (80002e4 <LCD_writeInstruction+0x140>)
 80001b4:	7851      	ldrb	r1, [r2, #1]
 80001b6:	2200      	movs	r2, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f000 fcdd 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D7.PIN_Port,LCD_D7.PIN_Number,READ_BIT(ins,7));
 80001be:	4b4a      	ldr	r3, [pc, #296]	; (80002e8 <LCD_writeInstruction+0x144>)
 80001c0:	7818      	ldrb	r0, [r3, #0]
 80001c2:	4b49      	ldr	r3, [pc, #292]	; (80002e8 <LCD_writeInstruction+0x144>)
 80001c4:	7859      	ldrb	r1, [r3, #1]
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	09db      	lsrs	r3, r3, #7
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	461a      	mov	r2, r3
 80001ce:	f000 fcd3 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D6.PIN_Port,LCD_D6.PIN_Number,READ_BIT(ins,6));
 80001d2:	4b46      	ldr	r3, [pc, #280]	; (80002ec <LCD_writeInstruction+0x148>)
 80001d4:	7818      	ldrb	r0, [r3, #0]
 80001d6:	4b45      	ldr	r3, [pc, #276]	; (80002ec <LCD_writeInstruction+0x148>)
 80001d8:	7859      	ldrb	r1, [r3, #1]
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	099b      	lsrs	r3, r3, #6
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	461a      	mov	r2, r3
 80001e8:	f000 fcc6 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D5.PIN_Port,LCD_D5.PIN_Number,READ_BIT(ins,5));
 80001ec:	4b40      	ldr	r3, [pc, #256]	; (80002f0 <LCD_writeInstruction+0x14c>)
 80001ee:	7818      	ldrb	r0, [r3, #0]
 80001f0:	4b3f      	ldr	r3, [pc, #252]	; (80002f0 <LCD_writeInstruction+0x14c>)
 80001f2:	7859      	ldrb	r1, [r3, #1]
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	461a      	mov	r2, r3
 8000202:	f000 fcb9 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D4.PIN_Port,LCD_D4.PIN_Number,READ_BIT(ins,4));
 8000206:	4b3b      	ldr	r3, [pc, #236]	; (80002f4 <LCD_writeInstruction+0x150>)
 8000208:	7818      	ldrb	r0, [r3, #0]
 800020a:	4b3a      	ldr	r3, [pc, #232]	; (80002f4 <LCD_writeInstruction+0x150>)
 800020c:	7859      	ldrb	r1, [r3, #1]
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	091b      	lsrs	r3, r3, #4
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	461a      	mov	r2, r3
 800021c:	f000 fcac 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_HIGH);
 8000220:	4b35      	ldr	r3, [pc, #212]	; (80002f8 <LCD_writeInstruction+0x154>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	4a34      	ldr	r2, [pc, #208]	; (80002f8 <LCD_writeInstruction+0x154>)
 8000226:	7851      	ldrb	r1, [r2, #1]
 8000228:	2201      	movs	r2, #1
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fca4 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 8000230:	2001      	movs	r0, #1
 8000232:	f001 f819 	bl	8001268 <STK_Delay_ms>

	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_LOW);
 8000236:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <LCD_writeInstruction+0x154>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4a2f      	ldr	r2, [pc, #188]	; (80002f8 <LCD_writeInstruction+0x154>)
 800023c:	7851      	ldrb	r1, [r2, #1]
 800023e:	2200      	movs	r2, #0
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fc99 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 8000246:	2001      	movs	r0, #1
 8000248:	f001 f80e 	bl	8001268 <STK_Delay_ms>
	GPIO_vSetOutputPinValue(LCD_D7.PIN_Port,LCD_D7.PIN_Number,READ_BIT(ins,3));
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <LCD_writeInstruction+0x144>)
 800024e:	7818      	ldrb	r0, [r3, #0]
 8000250:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <LCD_writeInstruction+0x144>)
 8000252:	7859      	ldrb	r1, [r3, #1]
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	08db      	lsrs	r3, r3, #3
 8000258:	b2db      	uxtb	r3, r3
 800025a:	f003 0301 	and.w	r3, r3, #1
 800025e:	b2db      	uxtb	r3, r3
 8000260:	461a      	mov	r2, r3
 8000262:	f000 fc89 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D6.PIN_Port,LCD_D6.PIN_Number,READ_BIT(ins,2));
 8000266:	4b21      	ldr	r3, [pc, #132]	; (80002ec <LCD_writeInstruction+0x148>)
 8000268:	7818      	ldrb	r0, [r3, #0]
 800026a:	4b20      	ldr	r3, [pc, #128]	; (80002ec <LCD_writeInstruction+0x148>)
 800026c:	7859      	ldrb	r1, [r3, #1]
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	089b      	lsrs	r3, r3, #2
 8000272:	b2db      	uxtb	r3, r3
 8000274:	f003 0301 	and.w	r3, r3, #1
 8000278:	b2db      	uxtb	r3, r3
 800027a:	461a      	mov	r2, r3
 800027c:	f000 fc7c 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D5.PIN_Port,LCD_D5.PIN_Number,READ_BIT(ins,1));
 8000280:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <LCD_writeInstruction+0x14c>)
 8000282:	7818      	ldrb	r0, [r3, #0]
 8000284:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <LCD_writeInstruction+0x14c>)
 8000286:	7859      	ldrb	r1, [r3, #1]
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	085b      	lsrs	r3, r3, #1
 800028c:	b2db      	uxtb	r3, r3
 800028e:	f003 0301 	and.w	r3, r3, #1
 8000292:	b2db      	uxtb	r3, r3
 8000294:	461a      	mov	r2, r3
 8000296:	f000 fc6f 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D4.PIN_Port,LCD_D4.PIN_Number,READ_BIT(ins,0));
 800029a:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <LCD_writeInstruction+0x150>)
 800029c:	7818      	ldrb	r0, [r3, #0]
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <LCD_writeInstruction+0x150>)
 80002a0:	7859      	ldrb	r1, [r3, #1]
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	461a      	mov	r2, r3
 80002ac:	f000 fc64 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_HIGH);
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <LCD_writeInstruction+0x154>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <LCD_writeInstruction+0x154>)
 80002b6:	7851      	ldrb	r1, [r2, #1]
 80002b8:	2201      	movs	r2, #1
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fc5c 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 ffd1 	bl	8001268 <STK_Delay_ms>
	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_LOW);
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <LCD_writeInstruction+0x154>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <LCD_writeInstruction+0x154>)
 80002cc:	7851      	ldrb	r1, [r2, #1]
 80002ce:	2200      	movs	r2, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fc51 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 ffc6 	bl	8001268 <STK_Delay_ms>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20000000 	.word	0x20000000
 80002e8:	20000028 	.word	0x20000028
 80002ec:	20000020 	.word	0x20000020
 80002f0:	20000018 	.word	0x20000018
 80002f4:	20000010 	.word	0x20000010
 80002f8:	20000008 	.word	0x20000008

080002fc <LCD_WriteData>:
void LCD_WriteData(uint8_t data)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
	GPIO_vSetOutputPinValue(LCD_RS.PIN_Port,LCD_RS.PIN_Number,OUTPUT_HIGH);
 8000306:	4b4d      	ldr	r3, [pc, #308]	; (800043c <LCD_WriteData+0x140>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	4a4c      	ldr	r2, [pc, #304]	; (800043c <LCD_WriteData+0x140>)
 800030c:	7851      	ldrb	r1, [r2, #1]
 800030e:	2201      	movs	r2, #1
 8000310:	4618      	mov	r0, r3
 8000312:	f000 fc31 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D7.PIN_Port,LCD_D7.PIN_Number,READ_BIT(data,7));
 8000316:	4b4a      	ldr	r3, [pc, #296]	; (8000440 <LCD_WriteData+0x144>)
 8000318:	7818      	ldrb	r0, [r3, #0]
 800031a:	4b49      	ldr	r3, [pc, #292]	; (8000440 <LCD_WriteData+0x144>)
 800031c:	7859      	ldrb	r1, [r3, #1]
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	09db      	lsrs	r3, r3, #7
 8000322:	b2db      	uxtb	r3, r3
 8000324:	461a      	mov	r2, r3
 8000326:	f000 fc27 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D6.PIN_Port,LCD_D6.PIN_Number,READ_BIT(data,6));
 800032a:	4b46      	ldr	r3, [pc, #280]	; (8000444 <LCD_WriteData+0x148>)
 800032c:	7818      	ldrb	r0, [r3, #0]
 800032e:	4b45      	ldr	r3, [pc, #276]	; (8000444 <LCD_WriteData+0x148>)
 8000330:	7859      	ldrb	r1, [r3, #1]
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	099b      	lsrs	r3, r3, #6
 8000336:	b2db      	uxtb	r3, r3
 8000338:	f003 0301 	and.w	r3, r3, #1
 800033c:	b2db      	uxtb	r3, r3
 800033e:	461a      	mov	r2, r3
 8000340:	f000 fc1a 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D5.PIN_Port,LCD_D5.PIN_Number,READ_BIT(data,5));
 8000344:	4b40      	ldr	r3, [pc, #256]	; (8000448 <LCD_WriteData+0x14c>)
 8000346:	7818      	ldrb	r0, [r3, #0]
 8000348:	4b3f      	ldr	r3, [pc, #252]	; (8000448 <LCD_WriteData+0x14c>)
 800034a:	7859      	ldrb	r1, [r3, #1]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	b2db      	uxtb	r3, r3
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	f000 fc0d 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D4.PIN_Port,LCD_D4.PIN_Number,READ_BIT(data,4));
 800035e:	4b3b      	ldr	r3, [pc, #236]	; (800044c <LCD_WriteData+0x150>)
 8000360:	7818      	ldrb	r0, [r3, #0]
 8000362:	4b3a      	ldr	r3, [pc, #232]	; (800044c <LCD_WriteData+0x150>)
 8000364:	7859      	ldrb	r1, [r3, #1]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	091b      	lsrs	r3, r3, #4
 800036a:	b2db      	uxtb	r3, r3
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	461a      	mov	r2, r3
 8000374:	f000 fc00 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_HIGH);
 8000378:	4b35      	ldr	r3, [pc, #212]	; (8000450 <LCD_WriteData+0x154>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4a34      	ldr	r2, [pc, #208]	; (8000450 <LCD_WriteData+0x154>)
 800037e:	7851      	ldrb	r1, [r2, #1]
 8000380:	2201      	movs	r2, #1
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fbf8 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f000 ff6d 	bl	8001268 <STK_Delay_ms>

	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_LOW);
 800038e:	4b30      	ldr	r3, [pc, #192]	; (8000450 <LCD_WriteData+0x154>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4a2f      	ldr	r2, [pc, #188]	; (8000450 <LCD_WriteData+0x154>)
 8000394:	7851      	ldrb	r1, [r2, #1]
 8000396:	2200      	movs	r2, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fbed 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f000 ff62 	bl	8001268 <STK_Delay_ms>
	GPIO_vSetOutputPinValue(LCD_D7.PIN_Port,LCD_D7.PIN_Number,READ_BIT(data,3));
 80003a4:	4b26      	ldr	r3, [pc, #152]	; (8000440 <LCD_WriteData+0x144>)
 80003a6:	7818      	ldrb	r0, [r3, #0]
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <LCD_WriteData+0x144>)
 80003aa:	7859      	ldrb	r1, [r3, #1]
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	08db      	lsrs	r3, r3, #3
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	f000 fbdd 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D6.PIN_Port,LCD_D6.PIN_Number,READ_BIT(data,2));
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <LCD_WriteData+0x148>)
 80003c0:	7818      	ldrb	r0, [r3, #0]
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <LCD_WriteData+0x148>)
 80003c4:	7859      	ldrb	r1, [r3, #1]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	089b      	lsrs	r3, r3, #2
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f003 0301 	and.w	r3, r3, #1
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	461a      	mov	r2, r3
 80003d4:	f000 fbd0 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D5.PIN_Port,LCD_D5.PIN_Number,READ_BIT(data,1));
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <LCD_WriteData+0x14c>)
 80003da:	7818      	ldrb	r0, [r3, #0]
 80003dc:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <LCD_WriteData+0x14c>)
 80003de:	7859      	ldrb	r1, [r3, #1]
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	085b      	lsrs	r3, r3, #1
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	461a      	mov	r2, r3
 80003ee:	f000 fbc3 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_D4.PIN_Port,LCD_D4.PIN_Number,READ_BIT(data,0));
 80003f2:	4b16      	ldr	r3, [pc, #88]	; (800044c <LCD_WriteData+0x150>)
 80003f4:	7818      	ldrb	r0, [r3, #0]
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <LCD_WriteData+0x150>)
 80003f8:	7859      	ldrb	r1, [r3, #1]
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f003 0301 	and.w	r3, r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	461a      	mov	r2, r3
 8000404:	f000 fbb8 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_HIGH);
 8000408:	4b11      	ldr	r3, [pc, #68]	; (8000450 <LCD_WriteData+0x154>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4a10      	ldr	r2, [pc, #64]	; (8000450 <LCD_WriteData+0x154>)
 800040e:	7851      	ldrb	r1, [r2, #1]
 8000410:	2201      	movs	r2, #1
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fbb0 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 8000418:	2001      	movs	r0, #1
 800041a:	f000 ff25 	bl	8001268 <STK_Delay_ms>
	GPIO_vSetOutputPinValue(LCD_EN.PIN_Port,LCD_EN.PIN_Number,OUTPUT_LOW);
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <LCD_WriteData+0x154>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <LCD_WriteData+0x154>)
 8000424:	7851      	ldrb	r1, [r2, #1]
 8000426:	2200      	movs	r2, #0
 8000428:	4618      	mov	r0, r3
 800042a:	f000 fba5 	bl	8000b78 <GPIO_vSetOutputPinValue>
	STK_Delay_ms(1);
 800042e:	2001      	movs	r0, #1
 8000430:	f000 ff1a 	bl	8001268 <STK_Delay_ms>

}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000000 	.word	0x20000000
 8000440:	20000028 	.word	0x20000028
 8000444:	20000020 	.word	0x20000020
 8000448:	20000018 	.word	0x20000018
 800044c:	20000010 	.word	0x20000010
 8000450:	20000008 	.word	0x20000008

08000454 <LCD_Clear>:

#endif

void LCD_Clear(void){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	LCD_writeInstruction(0x01);
 8000458:	2001      	movs	r0, #1
 800045a:	f7ff fea3 	bl	80001a4 <LCD_writeInstruction>
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}

08000462 <LCD_WriteChar>:

void LCD_WriteChar(uint8_t ch)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	4603      	mov	r3, r0
 800046a:	71fb      	strb	r3, [r7, #7]
	LCD_WriteData(ch);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff44 	bl	80002fc <LCD_WriteData>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <LCD_WriteNumber>:
void LCD_WriteNumber(int32_t num)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
	uint8_t flag=0;
 8000484:	2300      	movs	r3, #0
 8000486:	75fb      	strb	r3, [r7, #23]
	uint8_t digit[8];
	uint8_t i;
	if(num<0)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	da01      	bge.n	8000492 <LCD_WriteNumber+0x16>
	{
		flag=1;
 800048e:	2301      	movs	r3, #1
 8000490:	75fb      	strb	r3, [r7, #23]
	}
	if(num==0)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <LCD_WriteNumber+0x22>
	{
		LCD_WriteChar('0');
 8000498:	2030      	movs	r0, #48	; 0x30
 800049a:	f7ff ffe2 	bl	8000462 <LCD_WriteChar>
	}
	if(flag==1){
 800049e:	7dfb      	ldrb	r3, [r7, #23]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d102      	bne.n	80004aa <LCD_WriteNumber+0x2e>
		num=num*-1;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	425b      	negs	r3, r3
 80004a8:	607b      	str	r3, [r7, #4]
	}
	for(i=0;num;i++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	75bb      	strb	r3, [r7, #22]
 80004ae:	e01e      	b.n	80004ee <LCD_WriteNumber+0x72>
	{
	digit[i] =num%10+'0';
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <LCD_WriteNumber+0xb0>)
 80004b4:	fb83 1302 	smull	r1, r3, r3, r2
 80004b8:	1099      	asrs	r1, r3, #2
 80004ba:	17d3      	asrs	r3, r2, #31
 80004bc:	1ac9      	subs	r1, r1, r3
 80004be:	460b      	mov	r3, r1
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	440b      	add	r3, r1
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	1ad1      	subs	r1, r2, r3
 80004c8:	b2ca      	uxtb	r2, r1
 80004ca:	7dbb      	ldrb	r3, [r7, #22]
 80004cc:	3230      	adds	r2, #48	; 0x30
 80004ce:	b2d2      	uxtb	r2, r2
 80004d0:	3318      	adds	r3, #24
 80004d2:	443b      	add	r3, r7
 80004d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	num=num/10;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <LCD_WriteNumber+0xb0>)
 80004dc:	fb82 1203 	smull	r1, r2, r2, r3
 80004e0:	1092      	asrs	r2, r2, #2
 80004e2:	17db      	asrs	r3, r3, #31
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	607b      	str	r3, [r7, #4]
	for(i=0;num;i++)
 80004e8:	7dbb      	ldrb	r3, [r7, #22]
 80004ea:	3301      	adds	r3, #1
 80004ec:	75bb      	strb	r3, [r7, #22]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1dd      	bne.n	80004b0 <LCD_WriteNumber+0x34>
	}
	if(flag==1)
 80004f4:	7dfb      	ldrb	r3, [r7, #23]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d10f      	bne.n	800051a <LCD_WriteNumber+0x9e>
	{
		LCD_WriteChar('-');
 80004fa:	202d      	movs	r0, #45	; 0x2d
 80004fc:	f7ff ffb1 	bl	8000462 <LCD_WriteChar>
	}
	for(;i>0;i--)
 8000500:	e00b      	b.n	800051a <LCD_WriteNumber+0x9e>
	{
		LCD_WriteChar(digit[i-1]);
 8000502:	7dbb      	ldrb	r3, [r7, #22]
 8000504:	3b01      	subs	r3, #1
 8000506:	3318      	adds	r3, #24
 8000508:	443b      	add	r3, r7
 800050a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ffa7 	bl	8000462 <LCD_WriteChar>
	for(;i>0;i--)
 8000514:	7dbb      	ldrb	r3, [r7, #22]
 8000516:	3b01      	subs	r3, #1
 8000518:	75bb      	strb	r3, [r7, #22]
 800051a:	7dbb      	ldrb	r3, [r7, #22]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f0      	bne.n	8000502 <LCD_WriteNumber+0x86>
	}
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	66666667 	.word	0x66666667

08000530 <LCD_SetCursor>:
	}


}
void LCD_SetCursor(uint8_t line,uint8_t cell)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	460a      	mov	r2, r1
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	4613      	mov	r3, r2
 800053e:	71bb      	strb	r3, [r7, #6]
	if(line==0)
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <LCD_SetCursor+0x26>
	{
		LCD_writeInstruction(0x80 | cell);
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe28 	bl	80001a4 <LCD_writeInstruction>
	else if(line==1)
	{
		LCD_writeInstruction(0x80 | 0x40 |cell);
	}

}
 8000554:	e009      	b.n	800056a <LCD_SetCursor+0x3a>
	else if(line==1)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d106      	bne.n	800056a <LCD_SetCursor+0x3a>
		LCD_writeInstruction(0x80 | 0x40 |cell);
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe1d 	bl	80001a4 <LCD_writeInstruction>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <LCD_WriteString>:
void LCD_WriteString(uint8_t* str)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;str[i];i++)
 800057a:	2300      	movs	r3, #0
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e009      	b.n	8000594 <LCD_WriteString+0x22>
	{
		LCD_WriteChar(str[i]);
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff6a 	bl	8000462 <LCD_WriteChar>
	for(uint8_t i=0;str[i];i++)
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3301      	adds	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d1ef      	bne.n	8000580 <LCD_WriteString+0xe>
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <EXTI1_CallBack>:
#include "SysTick_int.h"
extern PinConfig_t GPIO_BLUE_LED;
extern PinConfig_t GPIO_BUZZER;

void EXTI1_CallBack()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	GPIO_vSetOutputPinValue(GPIO_BLUE_LED.PIN_Port,GPIO_BLUE_LED.PIN_Number,OUTPUT_HIGH);
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <EXTI1_CallBack+0x28>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <EXTI1_CallBack+0x28>)
 80005b6:	7851      	ldrb	r1, [r2, #1]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fadc 	bl	8000b78 <GPIO_vSetOutputPinValue>
	GPIO_vSetOutputPinValue(GPIO_BUZZER.PIN_Port,GPIO_BUZZER.PIN_Number,OUTPUT_HIGH);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <EXTI1_CallBack+0x2c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <EXTI1_CallBack+0x2c>)
 80005c6:	7851      	ldrb	r1, [r2, #1]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fad4 	bl	8000b78 <GPIO_vSetOutputPinValue>

	//	STK_Delay_s(4);
//	GPIO_vSetOutputPinValue(GPIO_BLUE_LED.PIN_Port,GPIO_BLUE_LED.PIN_Number,OUTPUT_LOW);


}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000048 	.word	0x20000048
 80005d8:	20000050 	.word	0x20000050

080005dc <EXTI0_IRQHandler>:


IntCallBack_t Globalarr_EXTICallBack [20];

void EXTI0_IRQHandler()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[0] != NULL)
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <EXTI0_IRQHandler+0x1c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <EXTI0_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[0]();
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <EXTI0_IRQHandler+0x1c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4798      	blx	r3
	}
	EXTI_ClearPendingFlag(EXTI_INT0);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f924 	bl	800083c <EXTI_ClearPendingFlag>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000c8 	.word	0x200000c8

080005fc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler()
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[1] != NULL)
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <EXTI1_IRQHandler+0x1c>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <EXTI1_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[1]();
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <EXTI1_IRQHandler+0x1c>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4798      	blx	r3
	}
	EXTI_ClearPendingFlag(EXTI_INT1);
 800060e:	2001      	movs	r0, #1
 8000610:	f000 f914 	bl	800083c <EXTI_ClearPendingFlag>

}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000c8 	.word	0x200000c8

0800061c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[2] != NULL)
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <EXTI2_IRQHandler+0x1c>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <EXTI2_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[2]();
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <EXTI2_IRQHandler+0x1c>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4798      	blx	r3
	}
	EXTI_ClearPendingFlag(EXTI_INT2);
 800062e:	2002      	movs	r0, #2
 8000630:	f000 f904 	bl	800083c <EXTI_ClearPendingFlag>

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000c8 	.word	0x200000c8

0800063c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	if (Globalarr_EXTICallBack[0] != NULL)
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <EXTI3_IRQHandler+0x18>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <EXTI3_IRQHandler+0x12>
	{
		Globalarr_EXTICallBack[0]();
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <EXTI3_IRQHandler+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4798      	blx	r3
	}
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000c8 	.word	0x200000c8

08000658 <EXTI_Init>:


void EXTI_Init(EXTI_EXTIConfig_t* copy_pfEXTI_EXTIConfig)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	/* 1- CFG Rising - falling */
	switch(copy_pfEXTI_EXTIConfig->IntTriggerEdge)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d012      	beq.n	800068e <EXTI_Init+0x36>
 8000668:	2b02      	cmp	r3, #2
 800066a:	dc16      	bgt.n	800069a <EXTI_Init+0x42>
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <EXTI_Init+0x1e>
 8000670:	2b01      	cmp	r3, #1
 8000672:	d006      	beq.n	8000682 <EXTI_Init+0x2a>
 8000674:	e011      	b.n	800069a <EXTI_Init+0x42>
	{
	case EXTI_Rising_edge:
		EXTI_SetRisingEdge(copy_pfEXTI_EXTIConfig->IntNumber);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f848 	bl	8000710 <EXTI_SetRisingEdge>
		break;
 8000680:	e00b      	b.n	800069a <EXTI_Init+0x42>
	case EXTI_Falling_edge:
		EXTI_SetFallingEdge(copy_pfEXTI_EXTIConfig->IntNumber);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f872 	bl	8000770 <EXTI_SetFallingEdge>
		break;
 800068c:	e005      	b.n	800069a <EXTI_Init+0x42>
	case EXTI_Rising_Falling_edge:
		EXTI_SetRisingFallingEdge(copy_pfEXTI_EXTIConfig->IntNumber);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f89c 	bl	80007d0 <EXTI_SetRisingFallingEdge>
		break;
 8000698:	bf00      	nop



	}
	/*set the interrupt port on line */
	EXTI_vSetEXTI_LineOnPort(copy_pfEXTI_EXTIConfig->IntNumber,copy_pfEXTI_EXTIConfig->IntPortLine);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	785a      	ldrb	r2, [r3, #1]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	78db      	ldrb	r3, [r3, #3]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4610      	mov	r0, r2
 80006a6:	f000 f8ed 	bl	8000884 <EXTI_vSetEXTI_LineOnPort>
//	case EXTI_Enabled:
//		EXTI_EnableInterrupt(copy_pfEXTI_EXTIConfig->IntNumber);
//		break;
//	}
	/* 2- Set callBack */
	EXTI_SetCallBack(copy_pfEXTI_EXTIConfig->IntNumber,copy_pfEXTI_EXTIConfig->IntCallBack);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	785a      	ldrb	r2, [r3, #1]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4610      	mov	r0, r2
 80006b6:	f000 f8d3 	bl	8000860 <EXTI_SetCallBack>

	/* 3- Enable Interrupt */
	EXTI_EnableInterrupt(copy_pfEXTI_EXTIConfig->IntNumber);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f804 	bl	80006cc <EXTI_EnableInterrupt>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <EXTI_EnableInterrupt>:
void EXTI_EnableInterrupt(EXTI_Int_Type copy_eEXTI_Int)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	EXTI->EXTI_IMR &= ~(0b1<<copy_eEXTI_Int);
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <EXTI_EnableInterrupt+0x40>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	43d2      	mvns	r2, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a09      	ldr	r2, [pc, #36]	; (800070c <EXTI_EnableInterrupt+0x40>)
 80006e8:	400b      	ands	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
	EXTI->EXTI_IMR |=  (0b1<<copy_eEXTI_Int);
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <EXTI_EnableInterrupt+0x40>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	2101      	movs	r1, #1
 80006f4:	fa01 f202 	lsl.w	r2, r1, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <EXTI_EnableInterrupt+0x40>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	6013      	str	r3, [r2, #0]

}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40010400 	.word	0x40010400

08000710 <EXTI_SetRisingEdge>:
	EXTI->EXTI_IMR &= ~(0b1<<copy_eEXTI_Int);
	EXTI->EXTI_IMR |=  (0b0<<copy_eEXTI_Int);

}
void EXTI_SetRisingEdge(EXTI_Int_Type copy_eEXTI_Int)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	// set rising
	EXTI->EXTI_RTSR &= ~(0b1<<copy_eEXTI_Int);
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	79fa      	ldrb	r2, [r7, #7]
 8000720:	2101      	movs	r1, #1
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	43d2      	mvns	r2, r2
 8000728:	4611      	mov	r1, r2
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 800072c:	400b      	ands	r3, r1
 800072e:	6093      	str	r3, [r2, #8]
	EXTI->EXTI_RTSR |=  (0b1<<copy_eEXTI_Int);
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	4611      	mov	r1, r2
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 8000740:	430b      	orrs	r3, r1
 8000742:	6093      	str	r3, [r2, #8]
	// clear falling
	EXTI->EXTI_FTSR &= ~(0b1<<copy_eEXTI_Int);
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	79fa      	ldrb	r2, [r7, #7]
 800074a:	2101      	movs	r1, #1
 800074c:	fa01 f202 	lsl.w	r2, r1, r2
 8000750:	43d2      	mvns	r2, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 8000756:	400b      	ands	r3, r1
 8000758:	60d3      	str	r3, [r2, #12]
	EXTI->EXTI_FTSR |=  (0b0<<copy_eEXTI_Int);
 800075a:	4b04      	ldr	r3, [pc, #16]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <EXTI_SetRisingEdge+0x5c>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	60d3      	str	r3, [r2, #12]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40010400 	.word	0x40010400

08000770 <EXTI_SetFallingEdge>:
void EXTI_SetFallingEdge(EXTI_Int_Type copy_eEXTI_Int)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	// set falling
	EXTI->EXTI_FTSR &= ~(0b1<<copy_eEXTI_Int);
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	79fa      	ldrb	r2, [r7, #7]
 8000780:	2101      	movs	r1, #1
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	43d2      	mvns	r2, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 800078c:	400b      	ands	r3, r1
 800078e:	60d3      	str	r3, [r2, #12]
	EXTI->EXTI_FTSR |=  (0b1<<copy_eEXTI_Int);
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 80007a0:	430b      	orrs	r3, r1
 80007a2:	60d3      	str	r3, [r2, #12]
	// clear rising
	EXTI->EXTI_RTSR &= ~(0b1<<copy_eEXTI_Int);
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	43d2      	mvns	r2, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a05      	ldr	r2, [pc, #20]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 80007b6:	400b      	ands	r3, r1
 80007b8:	6093      	str	r3, [r2, #8]
	EXTI->EXTI_RTSR |=  (0b0<<copy_eEXTI_Int);
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <EXTI_SetFallingEdge+0x5c>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	6093      	str	r3, [r2, #8]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40010400 	.word	0x40010400

080007d0 <EXTI_SetRisingFallingEdge>:
void EXTI_SetRisingFallingEdge(EXTI_Int_Type copy_eEXTI_Int)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	// set falling
	EXTI->EXTI_FTSR &= ~(0b1<<copy_eEXTI_Int);
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	2101      	movs	r1, #1
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	43d2      	mvns	r2, r2
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 80007ec:	400b      	ands	r3, r1
 80007ee:	60d3      	str	r3, [r2, #12]
	EXTI->EXTI_FTSR |=  (0b1<<copy_eEXTI_Int);
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	2101      	movs	r1, #1
 80007f8:	fa01 f202 	lsl.w	r2, r1, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 8000800:	430b      	orrs	r3, r1
 8000802:	60d3      	str	r3, [r2, #12]
	// set  rising
	EXTI->EXTI_RTSR &= ~(0b1<<copy_eEXTI_Int);
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	2101      	movs	r1, #1
 800080c:	fa01 f202 	lsl.w	r2, r1, r2
 8000810:	43d2      	mvns	r2, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a08      	ldr	r2, [pc, #32]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 8000816:	400b      	ands	r3, r1
 8000818:	6093      	str	r3, [r2, #8]
	EXTI->EXTI_RTSR |=  (0b1<<copy_eEXTI_Int);
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	2101      	movs	r1, #1
 8000822:	fa01 f202 	lsl.w	r2, r1, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a03      	ldr	r2, [pc, #12]	; (8000838 <EXTI_SetRisingFallingEdge+0x68>)
 800082a:	430b      	orrs	r3, r1
 800082c:	6093      	str	r3, [r2, #8]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	40010400 	.word	0x40010400

0800083c <EXTI_ClearPendingFlag>:
	EXTI->EXTI_SWIER &= ~(0b1<<copy_eEXTI_Int);
	EXTI->EXTI_SWIER |=  (0b1<<copy_eEXTI_Int);

}
void EXTI_ClearPendingFlag(EXTI_Int_Type copy_eEXTI_Int)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	EXTI->EXTI_PR =  (0b1<<copy_eEXTI_Int);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2201      	movs	r2, #1
 800084a:	409a      	lsls	r2, r3
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <EXTI_ClearPendingFlag+0x20>)
 800084e:	615a      	str	r2, [r3, #20]

}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40010400 	.word	0x40010400

08000860 <EXTI_SetCallBack>:
{
	*copy_pu8Data=READ_BIT(EXTI->EXTI_PR,copy_eEXTI_Int);
}

void EXTI_SetCallBack(EXTI_Int_Type copy_eEXTI_Int,IntCallBack_t copy_pfCallBack)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
	Globalarr_EXTICallBack[copy_eEXTI_Int]=copy_pfCallBack;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4904      	ldr	r1, [pc, #16]	; (8000880 <EXTI_SetCallBack+0x20>)
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	200000c8 	.word	0x200000c8

08000884 <EXTI_vSetEXTI_LineOnPort>:
void EXTI_vSetEXTI_LineOnPort(EXTI_Int_Type copy_EXTI_Int,EXTI_EXTIPortCFG_t copy_eEXTI_EXTIPortCFG)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	460a      	mov	r2, r1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]
	AFIO->AFIO_EXTICR[copy_EXTI_Int/4] &= ~(0b1111 << ((copy_EXTI_Int % 4)*4));
 8000894:	4a19      	ldr	r2, [pc, #100]	; (80008fc <EXTI_vSetEXTI_LineOnPort+0x78>)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	b2d8      	uxtb	r0, r3
 800089c:	4603      	mov	r3, r0
 800089e:	3302      	adds	r3, #2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	f002 0203 	and.w	r2, r2, #3
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	210f      	movs	r1, #15
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	4911      	ldr	r1, [pc, #68]	; (80008fc <EXTI_vSetEXTI_LineOnPort+0x78>)
 80008b8:	401a      	ands	r2, r3
 80008ba:	1c83      	adds	r3, r0, #2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	440b      	add	r3, r1
 80008c0:	605a      	str	r2, [r3, #4]
	AFIO->AFIO_EXTICR[copy_EXTI_Int/4] &= ~(copy_eEXTI_EXTIPortCFG << ((copy_EXTI_Int % 4)*4));
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <EXTI_vSetEXTI_LineOnPort+0x78>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	b2d8      	uxtb	r0, r3
 80008ca:	4603      	mov	r3, r0
 80008cc:	3302      	adds	r3, #2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	79b9      	ldrb	r1, [r7, #6]
 80008d6:	79fa      	ldrb	r2, [r7, #7]
 80008d8:	f002 0203 	and.w	r2, r2, #3
 80008dc:	0092      	lsls	r2, r2, #2
 80008de:	fa01 f202 	lsl.w	r2, r1, r2
 80008e2:	43d2      	mvns	r2, r2
 80008e4:	4905      	ldr	r1, [pc, #20]	; (80008fc <EXTI_vSetEXTI_LineOnPort+0x78>)
 80008e6:	401a      	ands	r2, r3
 80008e8:	1c83      	adds	r3, r0, #2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	440b      	add	r3, r1
 80008ee:	605a      	str	r2, [r3, #4]

}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40010000 	.word	0x40010000

08000900 <GPIO_u8PinInit>:
 * @param[in] copy_ePinConfig : the initialization values of the pin
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* copy_ePinConfig)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK ;
 8000908:	2301      	movs	r3, #1
 800090a:	73fb      	strb	r3, [r7, #15]
	if (copy_ePinConfig != NULL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8125 	beq.w	8000b5e <GPIO_u8PinInit+0x25e>
	{
		if ((copy_ePinConfig->PIN_Port < INVALID) && (copy_ePinConfig->PIN_Number <= PIN15))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b06      	cmp	r3, #6
 800091a:	f200 811d 	bhi.w	8000b58 <GPIO_u8PinInit+0x258>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	785b      	ldrb	r3, [r3, #1]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	f200 8118 	bhi.w	8000b58 <GPIO_u8PinInit+0x258>
		{
			/* Select GPIO Mode: INPUT - OUTPUT 10 MHz- OUTPUT 2 MHz - OUTPUT 50 MHz */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK] &= ~(MODE_MASK                   << ((copy_ePinConfig->PIN_Number %MODEMOD_MASK) *MODE_PIN_ACCESS)); // clear mode bits
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b91      	ldr	r3, [pc, #580]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7852      	ldrb	r2, [r2, #1]
 8000938:	08d2      	lsrs	r2, r2, #3
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	f003 0307 	and.w	r3, r3, #7
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	2103      	movs	r1, #3
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	4b86      	ldr	r3, [pc, #536]	; (8000b74 <GPIO_u8PinInit+0x274>)
 800095c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	7849      	ldrb	r1, [r1, #1]
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	b2c9      	uxtb	r1, r1
 8000968:	4002      	ands	r2, r0
 800096a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK] |=  ((copy_ePinConfig->PIN_Mode) << ((copy_ePinConfig->PIN_Number %MODEMOD_MASK) *MODE_PIN_ACCESS));
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b7f      	ldr	r3, [pc, #508]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	7852      	ldrb	r2, [r2, #1]
 800097e:	08d2      	lsrs	r2, r2, #3
 8000980:	b2d2      	uxtb	r2, r2
 8000982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	4619      	mov	r1, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	785b      	ldrb	r3, [r3, #1]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	4618      	mov	r0, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4b74      	ldr	r3, [pc, #464]	; (8000b74 <GPIO_u8PinInit+0x274>)
 80009a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	7849      	ldrb	r1, [r1, #1]
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	b2c9      	uxtb	r1, r1
 80009b0:	4302      	orrs	r2, r0
 80009b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			
			/* Select output type and speed in case of OUTPUT / AF  */
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d007      	beq.n	80009ce <GPIO_u8PinInit+0xce>
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_2_MHz ) ||
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	789b      	ldrb	r3, [r3, #2]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d003      	beq.n	80009ce <GPIO_u8PinInit+0xce>
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_50_MHz)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	789b      	ldrb	r3, [r3, #2]
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_2_MHz ) ||
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d176      	bne.n	8000abc <GPIO_u8PinInit+0x1bc>
				 )
			{
				/* select output type General_purpose_output_push_pull - General_purpose_output_Open_drain - Alternate_function_output_Push_pull - Alternate_function_output_Open_drain */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  &= ~(CNF_MASK				          <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) ); // clear mode bits
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b67      	ldr	r3, [pc, #412]	; (8000b74 <GPIO_u8PinInit+0x274>)
 80009d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	7852      	ldrb	r2, [r2, #1]
 80009de:	08d2      	lsrs	r2, r2, #3
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	2103      	movs	r1, #3
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4b5c      	ldr	r3, [pc, #368]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000a04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	7849      	ldrb	r1, [r1, #1]
 8000a0c:	08c9      	lsrs	r1, r1, #3
 8000a0e:	b2c9      	uxtb	r1, r1
 8000a10:	4002      	ands	r2, r0
 8000a12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  |=  (copy_ePinConfig->PIN_OutputType <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) );
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	7852      	ldrb	r2, [r2, #1]
 8000a26:	08d2      	lsrs	r2, r2, #3
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	4619      	mov	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000a4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	7849      	ldrb	r1, [r1, #1]
 8000a56:	08c9      	lsrs	r1, r1, #3
 8000a58:	b2c9      	uxtb	r1, r1
 8000a5a:	4302      	orrs	r2, r0
 8000a5c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				
				GPIO_PORT[copy_ePinConfig->PIN_Port]->ODR  &= ~(0b1				            <<copy_ePinConfig->PIN_Number ); // clear mode bits
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	785b      	ldrb	r3, [r3, #1]
 8000a72:	4619      	mov	r1, r3
 8000a74:	2301      	movs	r3, #1
 8000a76:	408b      	lsls	r3, r1
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000a84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a88:	400a      	ands	r2, r1
 8000a8a:	60da      	str	r2, [r3, #12]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->ODR  |=  (copy_ePinConfig->PIN_OValue	<<copy_ePinConfig->PIN_Number );
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	785b      	ldrb	r3, [r3, #1]
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000ab2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	60da      	str	r2, [r3, #12]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 8000aba:	e053      	b.n	8000b64 <GPIO_u8PinInit+0x264>
				
				
			}
				/* select input type : Analog mode - Floating input - Input with pull-up / pull-down - Reserved */

			else if (copy_ePinConfig->PIN_Mode == INPUT)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	789b      	ldrb	r3, [r3, #2]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d14f      	bne.n	8000b64 <GPIO_u8PinInit+0x264>
			{
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  &= ~(CNF_MASK				         <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) ); // clear mode bits
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	7852      	ldrb	r2, [r2, #1]
 8000ad4:	08d2      	lsrs	r2, r2, #3
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	785b      	ldrb	r3, [r3, #1]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	2103      	movs	r1, #3
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	4618      	mov	r0, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	4619      	mov	r1, r3
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000afa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	7849      	ldrb	r1, [r1, #1]
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	b2c9      	uxtb	r1, r1
 8000b06:	4002      	ands	r2, r0
 8000b08:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  |=  (copy_ePinConfig->PIN_InputType <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) );
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	7852      	ldrb	r2, [r2, #1]
 8000b1c:	08d2      	lsrs	r2, r2, #3
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	78db      	ldrb	r3, [r3, #3]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	3302      	adds	r3, #2
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <GPIO_u8PinInit+0x274>)
 8000b44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	7849      	ldrb	r1, [r1, #1]
 8000b4c:	08c9      	lsrs	r1, r1, #3
 8000b4e:	b2c9      	uxtb	r1, r1
 8000b50:	4302      	orrs	r2, r0
 8000b52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 8000b56:	e005      	b.n	8000b64 <GPIO_u8PinInit+0x264>

			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e003      	b.n	8000b66 <GPIO_u8PinInit+0x266>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e000      	b.n	8000b66 <GPIO_u8PinInit+0x266>
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 8000b64:	bf00      	nop
	}

	return Local_u8ErrorState;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000058 	.word	0x20000058

08000b78 <GPIO_vSetOutputPinValue>:
 * @retval ErrorStatus
 *
 */

uint8_t GPIO_vSetOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_ODR_t copy_eGPIO_ODR)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	460b      	mov	r3, r1
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK ;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
	if ((copy_eGPIO_Port < INVALID) && (copy_eGPIO_Pin <= PIN15))
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d82d      	bhi.n	8000bf0 <GPIO_vSetOutputPinValue+0x78>
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	d82a      	bhi.n	8000bf0 <GPIO_vSetOutputPinValue+0x78>
	{
		if (copy_eGPIO_ODR == OUTPUT_LOW || copy_eGPIO_ODR == OUTPUT_HIGH)
 8000b9a:	797b      	ldrb	r3, [r7, #5]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <GPIO_vSetOutputPinValue+0x2e>
 8000ba0:	797b      	ldrb	r3, [r7, #5]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d121      	bne.n	8000bea <GPIO_vSetOutputPinValue+0x72>
		{
			GPIO_PORT[copy_eGPIO_Port]->ODR &= ~(ODR_MASK			 << (copy_eGPIO_Pin)); // clear mode bits
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <GPIO_vSetOutputPinValue+0x88>)
 8000baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4910      	ldr	r1, [pc, #64]	; (8000c00 <GPIO_vSetOutputPinValue+0x88>)
 8000bc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bc4:	4002      	ands	r2, r0
 8000bc6:	60da      	str	r2, [r3, #12]
			GPIO_PORT[copy_eGPIO_Port]->ODR |=  (copy_eGPIO_ODR 	 	 << (copy_eGPIO_Pin));
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <GPIO_vSetOutputPinValue+0x88>)
 8000bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	7979      	ldrb	r1, [r7, #5]
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <GPIO_vSetOutputPinValue+0x88>)
 8000be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000be4:	4302      	orrs	r2, r0
 8000be6:	60da      	str	r2, [r3, #12]
		if (copy_eGPIO_ODR == OUTPUT_LOW || copy_eGPIO_ODR == OUTPUT_HIGH)
 8000be8:	e004      	b.n	8000bf4 <GPIO_vSetOutputPinValue+0x7c>
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000bea:	2302      	movs	r3, #2
 8000bec:	73fb      	strb	r3, [r7, #15]
		if (copy_eGPIO_ODR == OUTPUT_LOW || copy_eGPIO_ODR == OUTPUT_HIGH)
 8000bee:	e001      	b.n	8000bf4 <GPIO_vSetOutputPinValue+0x7c>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]

}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	20000058 	.word	0x20000058

08000c04 <NVIC_vEnableInterrupt>:
#include "NVIC_int.h"

#include "Utils.h"

void NVIC_vEnableInterrupt(Interrupt_t copy_eInterrupt)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_eInterrupt/32]=  (0b1 <<(copy_eInterrupt % 32));
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	425a      	negs	r2, r3
 8000c14:	f003 031f 	and.w	r3, r3, #31
 8000c18:	f002 021f 	and.w	r2, r2, #31
 8000c1c:	bf58      	it	pl
 8000c1e:	4253      	negpl	r3, r2
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	2301      	movs	r3, #1
 8000c26:	fa03 f102 	lsl.w	r1, r3, r2
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <NVIC_vEnableInterrupt+0x44>)
 8000c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	da00      	bge.n	8000c36 <NVIC_vEnableInterrupt+0x32>
 8000c34:	331f      	adds	r3, #31
 8000c36:	115b      	asrs	r3, r3, #5
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB2ENR,peripheral);
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <RCC_APB2EnableCLK+0x28>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	4611      	mov	r1, r2
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <RCC_APB2EnableCLK+0x28>)
 8000c66:	430b      	orrs	r3, r1
 8000c68:	6193      	str	r3, [r2, #24]

}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40021000 	.word	0x40021000

08000c78 <SPI_vInit>:




void SPI_vInit(SPI_HandleTypeDef_t* hspi)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	SPI_SetHWCRCEnable( hspi,hspi->HWCRC_Enable);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f848 	bl	8000d1c <SPI_SetHWCRCEnable>
	SPI_SetDataFrameForamt( hspi,hspi->DataFrameFormat);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	4619      	mov	r1, r3
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f872 	bl	8000d7c <SPI_SetDataFrameForamt>
	SPI_SetBaudRate( hspi,hspi->SPI_BaudRate);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 f92c 	bl	8000efc <SPI_SetBaudRate>
	SPI_SetMasterSlave( hspi,hspi->MasterSlaveSelection);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	795b      	ldrb	r3, [r3, #5]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f956 	bl	8000f5c <SPI_SetMasterSlave>

	SPI_DMATxEnable( hspi,hspi->SPI_DMATransEnable);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	79db      	ldrb	r3, [r3, #7]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 fa0a 	bl	80010d0 <SPI_DMATxEnable>
	SPI_DMARxEnable( hspi,hspi->SPI_DMARecEnable);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	799b      	ldrb	r3, [r3, #6]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fa34 	bl	8001130 <SPI_DMARxEnable>

	SPI_SetSlavengBySW( hspi,hspi->SwMngSlaveEnable);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7a1b      	ldrb	r3, [r3, #8]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f884 	bl	8000ddc <SPI_SetSlavengBySW>
    SPI_SetSlaveSelectBySW( hspi,hspi->SwSlaveSelect);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	7a5b      	ldrb	r3, [r3, #9]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f8ae 	bl	8000e3c <SPI_SetSlaveSelectBySW>


	SPI_EnableTxBufferEmptyInterrupt( hspi->SPI_ID,hspi->TxBufferEmptyIE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7a9b      	ldrb	r3, [r3, #10]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f000 f966 	bl	8000fbc <SPI_EnableTxBufferEmptyInterrupt>
	SPI_EnableRxBufferFullInterrupt( hspi,hspi->RxBufferNotEmptyIE);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7adb      	ldrb	r3, [r3, #11]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f98a 	bl	8001010 <SPI_EnableRxBufferFullInterrupt>
	SPI_EnableErrorInterrupt( hspi,hspi->ErrorIE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7b1b      	ldrb	r3, [r3, #12]
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f000 f9b4 	bl	8001070 <SPI_EnableErrorInterrupt>

	SPI_Enable_Peripheral( hspi,hspi->SPI_Enable);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	78db      	ldrb	r3, [r3, #3]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f8c4 	bl	8000e9c <SPI_Enable_Peripheral>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SPI_SetHWCRCEnable>:
//{
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_BIDIOE);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eOutputEnableInBidirectional<<SPI_CR1_BIDIOE);
//}
static void SPI_SetHWCRCEnable(SPI_HandleTypeDef_t* hspi,SPI_HWCRCEnable_t copy_eHWCRCEnable)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CRCEN);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <SPI_SetHWCRCEnable+0x5c>)
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <SPI_SetHWCRCEnable+0x5c>)
 8000d3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d46:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eHWCRCEnable<<SPI_CR1_CRCEN);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <SPI_SetHWCRCEnable+0x5c>)
 8000d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	035b      	lsls	r3, r3, #13
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SPI_SetHWCRCEnable+0x5c>)
 8000d64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2000009c 	.word	0x2000009c

08000d7c <SPI_SetDataFrameForamt>:

static void SPI_SetDataFrameForamt(SPI_HandleTypeDef_t* hspi,SPI_DataFrameFormat_t copy_eDataFrameFormat)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_DFF);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <SPI_SetDataFrameForamt+0x5c>)
 8000d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <SPI_SetDataFrameForamt+0x5c>)
 8000d9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000da6:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eDataFrameFormat<<SPI_CR1_DFF);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <SPI_SetDataFrameForamt+0x5c>)
 8000db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	02db      	lsls	r3, r3, #11
 8000dba:	4619      	mov	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SPI_SetDataFrameForamt+0x5c>)
 8000dc4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000009c 	.word	0x2000009c

08000ddc <SPI_SetSlavengBySW>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_RXONLY);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eReceiveOnlyModeEnable<<SPI_CR1_RXONLY);
//}
//
static void SPI_SetSlavengBySW(SPI_HandleTypeDef_t* hspi,SPI_SWSlaveMng_t copy_eSWSlaveMng)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSM);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <SPI_SetSlavengBySW+0x5c>)
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <SPI_SetSlavengBySW+0x5c>)
 8000dfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e06:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSWSlaveMng<<SPI_CR1_SSM);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SPI_SetSlavengBySW+0x5c>)
 8000e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	025b      	lsls	r3, r3, #9
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SPI_SetSlavengBySW+0x5c>)
 8000e24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000009c 	.word	0x2000009c

08000e3c <SPI_SetSlaveSelectBySW>:

static void SPI_SetSlaveSelectBySW(SPI_HandleTypeDef_t* hspi,SPI_InternalSlaveSelect_t copy_eInternalSlaveSelect)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSI);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <SPI_SetSlaveSelectBySW+0x5c>)
 8000e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <SPI_SetSlaveSelectBySW+0x5c>)
 8000e5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e66:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eInternalSlaveSelect<<SPI_CR1_SSI);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <SPI_SetSlaveSelectBySW+0x5c>)
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SPI_SetSlaveSelectBySW+0x5c>)
 8000e84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	2000009c 	.word	0x2000009c

08000e9c <SPI_Enable_Peripheral>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_LSBFIRST);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_LSBFirst<<SPI_CR1_LSBFIRST);
//}

static void SPI_Enable_Peripheral(SPI_HandleTypeDef_t* hspi,SPI_Enable_t copy_eSPI_Enable)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SPE);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <SPI_Enable_Peripheral+0x5c>)
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <SPI_Enable_Peripheral+0x5c>)
 8000ebe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ec6:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_Enable<<SPI_CR1_SPE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <SPI_Enable_Peripheral+0x5c>)
 8000ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	4619      	mov	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SPI_Enable_Peripheral+0x5c>)
 8000ee4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000009c 	.word	0x2000009c

08000efc <SPI_SetBaudRate>:

static void SPI_SetBaudRate(SPI_HandleTypeDef_t* hspi,SPI_BaudRate_t copy_eSPI_BaudRate)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b111<<SPI_CR1_BR);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <SPI_SetBaudRate+0x5c>)
 8000f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <SPI_SetBaudRate+0x5c>)
 8000f1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f22:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000f26:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_BaudRate<<SPI_CR1_BR);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <SPI_SetBaudRate+0x5c>)
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SPI_SetBaudRate+0x5c>)
 8000f44:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000009c 	.word	0x2000009c

08000f5c <SPI_SetMasterSlave>:

static void SPI_SetMasterSlave(SPI_HandleTypeDef_t* hspi,SPI_MasterSlave_t copy_eMasterSlave)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_MSTR);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <SPI_SetMasterSlave+0x5c>)
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <SPI_SetMasterSlave+0x5c>)
 8000f7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000f82:	f022 0204 	bic.w	r2, r2, #4
 8000f86:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eMasterSlave<<SPI_CR1_MSTR);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SPI_SetMasterSlave+0x5c>)
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SPI_SetMasterSlave+0x5c>)
 8000fa4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000009c 	.word	0x2000009c

08000fbc <SPI_EnableTxBufferEmptyInterrupt>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eClockPhase<<SPI_CR1_CPHA);
//}


 void SPI_EnableTxBufferEmptyInterrupt(SPI_Channel_t spi_id,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	SPIPeripheral[spi_id]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXEIE);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 8000fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe2:	605a      	str	r2, [r3, #4]
	SPIPeripheral[spi_id]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_TXEIE);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 8000fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	01db      	lsls	r3, r3, #7
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4905      	ldr	r1, [pc, #20]	; (800100c <SPI_EnableTxBufferEmptyInterrupt+0x50>)
 8000ff8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ffc:	4302      	orrs	r2, r0
 8000ffe:	605a      	str	r2, [r3, #4]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000009c 	.word	0x2000009c

08001010 <SPI_EnableRxBufferFullInterrupt>:
 void SPI_EnableRxBufferFullInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXNEIE);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4619      	mov	r1, r3
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800103a:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_RXNEIE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	4619      	mov	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <SPI_EnableRxBufferFullInterrupt+0x5c>)
 8001058:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800105c:	430a      	orrs	r2, r1
 800105e:	605a      	str	r2, [r3, #4]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000009c 	.word	0x2000009c

08001070 <SPI_EnableErrorInterrupt>:
 void SPI_EnableErrorInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_ERRIE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <SPI_EnableErrorInterrupt+0x5c>)
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <SPI_EnableErrorInterrupt+0x5c>)
 8001092:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001096:	f022 0220 	bic.w	r2, r2, #32
 800109a:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_ERRIE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <SPI_EnableErrorInterrupt+0x5c>)
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	015b      	lsls	r3, r3, #5
 80010ae:	4619      	mov	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SPI_EnableErrorInterrupt+0x5c>)
 80010b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010bc:	430a      	orrs	r2, r1
 80010be:	605a      	str	r2, [r3, #4]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000009c 	.word	0x2000009c

080010d0 <SPI_DMATxEnable>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_SSOE);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eSSOutputEnable<<SPI_CR2_SSOE);
//}

static void SPI_DMATxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMATxEnable_t copy_eDMATxEnable)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXDMAEN);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <SPI_DMATxEnable+0x5c>)
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <SPI_DMATxEnable+0x5c>)
 80010f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010f6:	f022 0202 	bic.w	r2, r2, #2
 80010fa:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMATxEnable<<SPI_CR2_TXDMAEN);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <SPI_DMATxEnable+0x5c>)
 8001104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4619      	mov	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <SPI_DMATxEnable+0x5c>)
 8001118:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800111c:	430a      	orrs	r2, r1
 800111e:	605a      	str	r2, [r3, #4]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000009c 	.word	0x2000009c

08001130 <SPI_DMARxEnable>:

static void SPI_DMARxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMARxEnable_t copy_eDMARxEnable)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXDMAEN);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <SPI_DMARxEnable+0x58>)
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <SPI_DMARxEnable+0x58>)
 8001152:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMARxEnable<<SPI_CR2_RXDMAEN);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <SPI_DMARxEnable+0x58>)
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	78fa      	ldrb	r2, [r7, #3]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SPI_DMARxEnable+0x58>)
 8001174:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000009c 	.word	0x2000009c

0800118c <SysTick_Handler>:

STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <SysTick_Handler+0x2c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(STK->STK_CTRL,ENABLE);
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SysTick_Handler+0x30>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <SysTick_Handler+0x30>)
 800119e:	f023 0301 	bic.w	r3, r3, #1
 80011a2:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SysTick_Handler+0x34>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Handler+0x34>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4798      	blx	r3
	}
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000011c 	.word	0x2000011c
 80011bc:	e000e010 	.word	0xe000e010
 80011c0:	20000118 	.word	0x20000118

080011c4 <STK_vInit>:

void STK_vInit()
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	/*1. CLK SRC*/
	CLEAR_BIT(STK->STK_CTRL,CLKSOURCE); // AHB/8 = 1 MHz
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <STK_vInit+0x24>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <STK_vInit+0x24>)
 80011ce:	f023 0304 	bic.w	r3, r3, #4
 80011d2:	6013      	str	r3, [r2, #0]

	/*2. interrupt enable  */
	CLEAR_BIT(STK->STK_CTRL,TICKINT); // Enable INT
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <STK_vInit+0x24>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <STK_vInit+0x24>)
 80011da:	f023 0302 	bic.w	r3, r3, #2
 80011de:	6013      	str	r3, [r2, #0]


}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	e000e010 	.word	0xe000e010

080011ec <STK_vStartTimer>:

void STK_vStartTimer(uint32_t copy_u32Ticks)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	STK->STK_VAL = 0 ;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <STK_vStartTimer+0x2c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
	// load timer
	STK->STK_LOAD=copy_u32Ticks;
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <STK_vStartTimer+0x2c>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <STK_vStartTimer+0x2c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <STK_vStartTimer+0x2c>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <STK_vSetBusyWait>:
	CLEAR_BIT(STK->STK_CTRL,ENABLE);
}


void STK_vSetBusyWait(uint32_t copy_u32Ticks)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	STK->STK_VAL = 0 ;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <STK_vSetBusyWait+0x48>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
	// load timer
	STK->STK_LOAD=copy_u32Ticks;
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <STK_vSetBusyWait+0x48>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <STK_vSetBusyWait+0x48>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <STK_vSetBusyWait+0x48>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(STK->STK_CTRL,COUNTFLAG) != 1);
 800123c:	bf00      	nop
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <STK_vSetBusyWait+0x48>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b01      	cmp	r3, #1
 800124a:	d1f8      	bne.n	800123e <STK_vSetBusyWait+0x22>
	// stop timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <STK_vSetBusyWait+0x48>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <STK_vSetBusyWait+0x48>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6013      	str	r3, [r2, #0]

}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <STK_Delay_ms>:
uint32_t STK_vGetRemainingTime()
{
	return STK->STK_VAL ;
}
void STK_Delay_ms(uint32_t copy_u32timeMS)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	 STK_vSetBusyWait(copy_u32timeMS*1000);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001276:	fb02 f303 	mul.w	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffce 	bl	800121c <STK_vSetBusyWait>

}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <APP_Services_Init>:
//
uint8_t Global_u8TimeTakenFromNucleo=0;
uint8_t BluePillTime[10]={0};

void APP_Services_Init()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	// LCD INIT
	RCC_APB2EnableCLK(IOPAEN);
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fcdd 	bl	8000c4c <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(IOPBEN);
 8001292:	2003      	movs	r0, #3
 8001294:	f7ff fcda 	bl	8000c4c <RCC_APB2EnableCLK>

	GPIO_u8PinInit(&LCD_RS); //A11
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <APP_Services_Init+0xac>)
 800129a:	f7ff fb31 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&LCD_EN); //A8
 800129e:	4826      	ldr	r0, [pc, #152]	; (8001338 <APP_Services_Init+0xb0>)
 80012a0:	f7ff fb2e 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&LCD_D4); //B15
 80012a4:	4825      	ldr	r0, [pc, #148]	; (800133c <APP_Services_Init+0xb4>)
 80012a6:	f7ff fb2b 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&LCD_D5); //B14
 80012aa:	4825      	ldr	r0, [pc, #148]	; (8001340 <APP_Services_Init+0xb8>)
 80012ac:	f7ff fb28 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&LCD_D6); //B13
 80012b0:	4824      	ldr	r0, [pc, #144]	; (8001344 <APP_Services_Init+0xbc>)
 80012b2:	f7ff fb25 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&LCD_D7); //B12
 80012b6:	4824      	ldr	r0, [pc, #144]	; (8001348 <APP_Services_Init+0xc0>)
 80012b8:	f7ff fb22 	bl	8000900 <GPIO_u8PinInit>
	STK_vInit();
 80012bc:	f7ff ff82 	bl	80011c4 <STK_vInit>
	LCD_Init();
 80012c0:	f7fe ff56 	bl	8000170 <LCD_Init>

	// SPI INIT
	RCC_APB2EnableCLK(IOPAEN);
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff fcc1 	bl	8000c4c <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(IOPBEN);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fcbe 	bl	8000c4c <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(IOPCEN);
 80012d0:	2004      	movs	r0, #4
 80012d2:	f7ff fcbb 	bl	8000c4c <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(SPI1EN);
 80012d6:	200c      	movs	r0, #12
 80012d8:	f7ff fcb8 	bl	8000c4c <RCC_APB2EnableCLK>

	GPIO_u8PinInit(&PinSCK);  //A5
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <APP_Services_Init+0xc4>)
 80012de:	f7ff fb0f 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinMISO); //A6
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <APP_Services_Init+0xc8>)
 80012e4:	f7ff fb0c 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinMOSI); //A7
 80012e8:	481a      	ldr	r0, [pc, #104]	; (8001354 <APP_Services_Init+0xcc>)
 80012ea:	f7ff fb09 	bl	8000900 <GPIO_u8PinInit>
	SPI_vInit(&SPI_ourSPI);
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <APP_Services_Init+0xd0>)
 80012f0:	f7ff fcc2 	bl	8000c78 <SPI_vInit>

	// Buzzer - GREEN LED - RED LED
	RCC_APB2EnableCLK(IOPAEN);
 80012f4:	2002      	movs	r0, #2
 80012f6:	f7ff fca9 	bl	8000c4c <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(IOPBEN);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f7ff fca6 	bl	8000c4c <RCC_APB2EnableCLK>
	RCC_APB2EnableCLK(IOPCEN);
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff fca3 	bl	8000c4c <RCC_APB2EnableCLK>

	GPIO_u8PinInit(&GPIO_RED_LED); //A1
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <APP_Services_Init+0xd4>)
 8001308:	f7ff fafa 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&GPIO_GREEN_LED); //C15
 800130c:	4814      	ldr	r0, [pc, #80]	; (8001360 <APP_Services_Init+0xd8>)
 800130e:	f7ff faf7 	bl	8000900 <GPIO_u8PinInit>
	GPIO_u8PinInit(&GPIO_BLUE_LED); //C14
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <APP_Services_Init+0xdc>)
 8001314:	f7ff faf4 	bl	8000900 <GPIO_u8PinInit>

	GPIO_u8PinInit(&GPIO_BUZZER); //B4
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <APP_Services_Init+0xe0>)
 800131a:	f7ff faf1 	bl	8000900 <GPIO_u8PinInit>

	// EXTI
	EXTI_Init( &ourEXTI );//A0
 800131e:	4813      	ldr	r0, [pc, #76]	; (800136c <APP_Services_Init+0xe4>)
 8001320:	f7ff f99a 	bl	8000658 <EXTI_Init>
	RCC_APB2EnableCLK(AFIOEN);
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fc91 	bl	8000c4c <RCC_APB2EnableCLK>
	NVIC_vEnableInterrupt(EXTI0_IRQn);
 800132a:	2006      	movs	r0, #6
 800132c:	f7ff fc6a 	bl	8000c04 <NVIC_vEnableInterrupt>


}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000010 	.word	0x20000010
 8001340:	20000018 	.word	0x20000018
 8001344:	20000020 	.word	0x20000020
 8001348:	20000028 	.word	0x20000028
 800134c:	20000084 	.word	0x20000084
 8001350:	2000007c 	.word	0x2000007c
 8001354:	20000074 	.word	0x20000074
 8001358:	2000008c 	.word	0x2000008c
 800135c:	20000038 	.word	0x20000038
 8001360:	20000040 	.word	0x20000040
 8001364:	20000048 	.word	0x20000048
 8001368:	20000050 	.word	0x20000050
 800136c:	20000030 	.word	0x20000030

08001370 <APP_Services_Ping_SPI_Asynch>:
	GPIO_vToggleOutputPinValue(PinMISO.PIN_Port, PinMISO.PIN_Number);
	GPIO_vToggleOutputPinValue(PinMOSI.PIN_Port, PinMOSI.PIN_Number);
	STK_Delay_s(2);
}
void APP_Services_Ping_SPI_Asynch()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	//			LCD_WriteNumber(SPIRecDataFromNucleo[i]);
	////	SPI_vSendSynch(&SPI_ourSPI,i+10);
	//
	//		}

	SPI_vReceiveDataAsynch( &SPI_ourSPI, 10 ,SPIRecDataFromNucleo );
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <APP_Services_Ping_SPI_Asynch+0x14>)
 8001376:	210a      	movs	r1, #10
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <APP_Services_Ping_SPI_Asynch+0x18>)
 800137a:	f000 f9d3 	bl	8001724 <SPI_vReceiveDataAsynch>

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000120 	.word	0x20000120
 8001388:	2000008c 	.word	0x2000008c

0800138c <APP_Services_Set_GREEN_LED>:
void APP_Services_Set_GREEN_LED()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	GPIO_vSetOutputPinValue(GPIO_GREEN_LED.PIN_Port,GPIO_GREEN_LED.PIN_Number,OUTPUT_HIGH);
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <APP_Services_Set_GREEN_LED+0x1c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <APP_Services_Set_GREEN_LED+0x1c>)
 8001396:	7851      	ldrb	r1, [r2, #1]
 8001398:	2201      	movs	r2, #1
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fbec 	bl	8000b78 <GPIO_vSetOutputPinValue>
	APP_Services_Clear_RED_LED();
 80013a0:	f000 f822 	bl	80013e8 <APP_Services_Clear_RED_LED>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000040 	.word	0x20000040

080013ac <APP_Services_Clear_GREEN_LED>:
void APP_Services_Clear_GREEN_LED()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	GPIO_vSetOutputPinValue(GPIO_GREEN_LED.PIN_Port,GPIO_GREEN_LED.PIN_Number,OUTPUT_LOW);
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <APP_Services_Clear_GREEN_LED+0x18>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4a03      	ldr	r2, [pc, #12]	; (80013c4 <APP_Services_Clear_GREEN_LED+0x18>)
 80013b6:	7851      	ldrb	r1, [r2, #1]
 80013b8:	2200      	movs	r2, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fbdc 	bl	8000b78 <GPIO_vSetOutputPinValue>

}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000040 	.word	0x20000040

080013c8 <APP_Services_Set_RED_LED>:

void APP_Services_Set_RED_LED()
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	GPIO_vSetOutputPinValue(GPIO_RED_LED.PIN_Port,GPIO_RED_LED.PIN_Number,OUTPUT_HIGH);
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <APP_Services_Set_RED_LED+0x1c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <APP_Services_Set_RED_LED+0x1c>)
 80013d2:	7851      	ldrb	r1, [r2, #1]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fbce 	bl	8000b78 <GPIO_vSetOutputPinValue>
	APP_Services_Clear_GREEN_LED();
 80013dc:	f7ff ffe6 	bl	80013ac <APP_Services_Clear_GREEN_LED>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000038 	.word	0x20000038

080013e8 <APP_Services_Clear_RED_LED>:
void APP_Services_Clear_RED_LED()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	GPIO_vSetOutputPinValue(GPIO_RED_LED.PIN_Port,GPIO_RED_LED.PIN_Number,OUTPUT_LOW);
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <APP_Services_Clear_RED_LED+0x18>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4a03      	ldr	r2, [pc, #12]	; (8001400 <APP_Services_Clear_RED_LED+0x18>)
 80013f2:	7851      	ldrb	r1, [r2, #1]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fbbe 	bl	8000b78 <GPIO_vSetOutputPinValue>

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000038 	.word	0x20000038

08001404 <APP_Services_Periodic_Receive_Frame_Check>:
	GPIO_vSetOutputPinValue(GPIO_BUZZER.PIN_Port,GPIO_BUZZER.PIN_Number,OUTPUT_LOW);

}

void APP_Services_Periodic_Receive_Frame_Check()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	if(GlobalSPI_u8NoOfRecFrames)
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <APP_Services_Periodic_Receive_Frame_Check+0x24>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <APP_Services_Periodic_Receive_Frame_Check+0x20>
	{
		GlobalSPI_u8NoOfRecFrames--;
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <APP_Services_Periodic_Receive_Frame_Check+0x24>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3b01      	subs	r3, #1
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <APP_Services_Periodic_Receive_Frame_Check+0x24>)
 800141e:	701a      	strb	r2, [r3, #0]

		APP_Services_Decode_Frame();
 8001420:	f000 f86c 	bl	80014fc <APP_Services_Decode_Frame>
	}
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000154 	.word	0x20000154

0800142c <APP_Services_Display_Time_Date>:
void APP_Services_Display_Time_Date()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	LCD_Clear();
 8001430:	f7ff f810 	bl	8000454 <LCD_Clear>
	LCD_SetCursor(0,0);
 8001434:	2100      	movs	r1, #0
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff f87a 	bl	8000530 <LCD_SetCursor>
	LCD_WriteString((uint8_t*) "Time: ");
 800143c:	481a      	ldr	r0, [pc, #104]	; (80014a8 <APP_Services_Display_Time_Date+0x7c>)
 800143e:	f7ff f898 	bl	8000572 <LCD_WriteString>
	LCD_WriteNumber(SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_HOUR]);
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <APP_Services_Display_Time_Date+0x80>)
 8001444:	78db      	ldrb	r3, [r3, #3]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f818 	bl	800047c <LCD_WriteNumber>
	LCD_WriteString((uint8_t*) ":");
 800144c:	4818      	ldr	r0, [pc, #96]	; (80014b0 <APP_Services_Display_Time_Date+0x84>)
 800144e:	f7ff f890 	bl	8000572 <LCD_WriteString>
	LCD_WriteNumber(SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_MINS]);
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <APP_Services_Display_Time_Date+0x80>)
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f810 	bl	800047c <LCD_WriteNumber>
	LCD_WriteString((uint8_t*) ":");
 800145c:	4814      	ldr	r0, [pc, #80]	; (80014b0 <APP_Services_Display_Time_Date+0x84>)
 800145e:	f7ff f888 	bl	8000572 <LCD_WriteString>
	LCD_WriteNumber(SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_SECS]);
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <APP_Services_Display_Time_Date+0x80>)
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f808 	bl	800047c <LCD_WriteNumber>
	//LCD_WriteString((uint8_t*) " : ");


	LCD_SetCursor(1,0);
 800146c:	2100      	movs	r1, #0
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff f85e 	bl	8000530 <LCD_SetCursor>
	LCD_WriteString((uint8_t*) "Date ");
 8001474:	480f      	ldr	r0, [pc, #60]	; (80014b4 <APP_Services_Display_Time_Date+0x88>)
 8001476:	f7ff f87c 	bl	8000572 <LCD_WriteString>
	LCD_WriteNumber(SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_DATE]);
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <APP_Services_Display_Time_Date+0x80>)
 800147c:	795b      	ldrb	r3, [r3, #5]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe fffc 	bl	800047c <LCD_WriteNumber>
	LCD_WriteString((uint8_t*) "/");
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <APP_Services_Display_Time_Date+0x8c>)
 8001486:	f7ff f874 	bl	8000572 <LCD_WriteString>
	LCD_WriteNumber(SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_MONTH]);
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <APP_Services_Display_Time_Date+0x80>)
 800148c:	799b      	ldrb	r3, [r3, #6]
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe fff4 	bl	800047c <LCD_WriteNumber>
	LCD_WriteString((uint8_t*) "/");
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <APP_Services_Display_Time_Date+0x8c>)
 8001496:	f7ff f86c 	bl	8000572 <LCD_WriteString>
	LCD_WriteNumber(SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_YEAR]);
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <APP_Services_Display_Time_Date+0x80>)
 800149c:	79db      	ldrb	r3, [r3, #7]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ffec 	bl	800047c <LCD_WriteNumber>
	//LCD_WriteString((uint8_t*) " : ");

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	080018a8 	.word	0x080018a8
 80014ac:	20000120 	.word	0x20000120
 80014b0:	080018b0 	.word	0x080018b0
 80014b4:	080018b4 	.word	0x080018b4
 80014b8:	080018bc 	.word	0x080018bc

080014bc <APP_Services_Display_Alarm_Number>:
	LCD_WriteString((uint8_t*) "/");
	LCD_WriteNumber(BluePillTime[SPI_FRAME_DATA_POS_YEAR]);

}
void APP_Services_Display_Alarm_Number()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	LCD_Clear();
 80014c0:	f7fe ffc8 	bl	8000454 <LCD_Clear>
	LCD_SetCursor(0,0);
 80014c4:	2100      	movs	r1, #0
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff f832 	bl	8000530 <LCD_SetCursor>
	LCD_WriteString((uint8_t*) "ALARM HIT ");
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <APP_Services_Display_Alarm_Number+0x34>)
 80014ce:	f7ff f850 	bl	8000572 <LCD_WriteString>
	LCD_SetCursor(1,0);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2001      	movs	r0, #1
 80014d6:	f7ff f82b 	bl	8000530 <LCD_SetCursor>
	LCD_WriteString((uint8_t*) "Number: ");
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <APP_Services_Display_Alarm_Number+0x38>)
 80014dc:	f7ff f849 	bl	8000572 <LCD_WriteString>
	LCD_WriteNumber(SPIRecDataFromNucleo[1]);
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <APP_Services_Display_Alarm_Number+0x3c>)
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffc9 	bl	800047c <LCD_WriteNumber>

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	080018c8 	.word	0x080018c8
 80014f4:	080018d4 	.word	0x080018d4
 80014f8:	20000120 	.word	0x20000120

080014fc <APP_Services_Decode_Frame>:
			}
		}
	}
}
void APP_Services_Decode_Frame()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
	if (SPIRecDataFromNucleo[SPI_FRAME_TYPE_ID] == SPI_FRAME_ID_DISPLAY_TIME_DATE)
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d128      	bne.n	800155c <APP_Services_Decode_Frame+0x60>
	{
		APP_Services_Display_Time_Date();
 800150a:	f7ff ff8f 	bl	800142c <APP_Services_Display_Time_Date>
		BluePillTime[SPI_FRAME_DATA_POS_SECS]=SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_SECS];
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 8001510:	785a      	ldrb	r2, [r3, #1]
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <APP_Services_Decode_Frame+0xb0>)
 8001514:	705a      	strb	r2, [r3, #1]
		BluePillTime[SPI_FRAME_DATA_POS_MINS]=SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_MINS];
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 8001518:	789a      	ldrb	r2, [r3, #2]
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <APP_Services_Decode_Frame+0xb0>)
 800151c:	709a      	strb	r2, [r3, #2]
		BluePillTime[SPI_FRAME_DATA_POS_HOUR]=SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_HOUR];
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 8001520:	78da      	ldrb	r2, [r3, #3]
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <APP_Services_Decode_Frame+0xb0>)
 8001524:	70da      	strb	r2, [r3, #3]
		BluePillTime[SPI_FRAME_DATA_POS_DATE]=SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_DATE];
 8001526:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 8001528:	795a      	ldrb	r2, [r3, #5]
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <APP_Services_Decode_Frame+0xb0>)
 800152c:	715a      	strb	r2, [r3, #5]
		BluePillTime[SPI_FRAME_DATA_POS_MONTH]=SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_MONTH];
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 8001530:	799a      	ldrb	r2, [r3, #6]
 8001532:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <APP_Services_Decode_Frame+0xb0>)
 8001534:	719a      	strb	r2, [r3, #6]
		BluePillTime[SPI_FRAME_DATA_POS_YEAR]=SPIRecDataFromNucleo[SPI_FRAME_DATA_POS_YEAR];
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 8001538:	79da      	ldrb	r2, [r3, #7]
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <APP_Services_Decode_Frame+0xb0>)
 800153c:	71da      	strb	r2, [r3, #7]
		Global_u8TimeTakenFromNucleo=1;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <APP_Services_Decode_Frame+0xb4>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]

		//Turn off alarm hit led
		GPIO_vSetOutputPinValue(GPIO_BLUE_LED.PIN_Port,GPIO_BLUE_LED.PIN_Number,OUTPUT_LOW);
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <APP_Services_Decode_Frame+0xb8>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <APP_Services_Decode_Frame+0xb8>)
 800154a:	7851      	ldrb	r1, [r2, #1]
 800154c:	2200      	movs	r2, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fb12 	bl	8000b78 <GPIO_vSetOutputPinValue>
		//start timer
		STK_vStartTimer(1000000);
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <APP_Services_Decode_Frame+0xbc>)
 8001556:	f7ff fe49 	bl	80011ec <STK_vStartTimer>
 800155a:	e013      	b.n	8001584 <APP_Services_Decode_Frame+0x88>
	}
	else if (SPIRecDataFromNucleo[SPI_FRAME_TYPE_ID] == SPI_FRAME_ID_ALARM_HIT_NU)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d102      	bne.n	800156a <APP_Services_Decode_Frame+0x6e>
	{
		APP_Services_Display_Alarm_Number();
 8001564:	f7ff ffaa 	bl	80014bc <APP_Services_Display_Alarm_Number>
 8001568:	e00c      	b.n	8001584 <APP_Services_Decode_Frame+0x88>

	}
	else if (SPIRecDataFromNucleo[SPI_FRAME_TYPE_ID] == SPI_FRAME_ID_RIGHT_LOGIN)
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d102      	bne.n	8001578 <APP_Services_Decode_Frame+0x7c>
	{
		APP_Services_Set_GREEN_LED();
 8001572:	f7ff ff0b 	bl	800138c <APP_Services_Set_GREEN_LED>
 8001576:	e005      	b.n	8001584 <APP_Services_Decode_Frame+0x88>

	}
	else if (SPIRecDataFromNucleo[SPI_FRAME_TYPE_ID] == SPI_FRAME_ID_WRONG_LOGIN)
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d101      	bne.n	8001584 <APP_Services_Decode_Frame+0x88>
	{
		APP_Services_Set_RED_LED();
 8001580:	f7ff ff22 	bl	80013c8 <APP_Services_Set_RED_LED>
	}
	// clear buffer
	for (uint8_t i=0 ;i<SPI_FRAME_TOTAL_SIZE; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	e006      	b.n	8001598 <APP_Services_Decode_Frame+0x9c>
	{
		SPIRecDataFromNucleo[i]=0;
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <APP_Services_Decode_Frame+0xac>)
 800158e:	2100      	movs	r1, #0
 8001590:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0 ;i<SPI_FRAME_TOTAL_SIZE; i++)
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	3301      	adds	r3, #1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b13      	cmp	r3, #19
 800159c:	d9f5      	bls.n	800158a <APP_Services_Decode_Frame+0x8e>
	}
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000120 	.word	0x20000120
 80015ac:	20000138 	.word	0x20000138
 80015b0:	20000134 	.word	0x20000134
 80015b4:	20000048 	.word	0x20000048
 80015b8:	000f4240 	.word	0x000f4240

080015bc <SPI_SendReceiveCallBack>:

uint8_t GlobalSPI_u8SizeReceiveData[3]={0};
uint8_t* GlobalSPI_pu8ReceiveData[3]={0};

void SPI_SendReceiveCallBack(SPI_Channel_t copy_eSPI)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	if (SPI_IRQ_Reason==SPI_IRQSend)
 80015c6:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <SPI_SendReceiveCallBack+0x138>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d153      	bne.n	8001678 <SPI_SendReceiveCallBack+0xbc>
	{
		static uint8_t SBufferNumbberCB=0;
		static uint8_t i=1;

		if (i!=GlobalSPI_u8SizeSendData[SBufferNumbberCB])
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <SPI_SendReceiveCallBack+0x140>)
 80015d8:	5c9b      	ldrb	r3, [r3, r2]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	4b48      	ldr	r3, [pc, #288]	; (8001700 <SPI_SendReceiveCallBack+0x144>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d015      	beq.n	8001610 <SPI_SendReceiveCallBack+0x54>
		{

			SPIPeripheral[copy_eSPI]->SPI_DR= GlobalSPI_pu8SendData[SBufferNumbberCB][i++];
 80015e4:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <SPI_SendReceiveCallBack+0x148>)
 80015ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80015f0:	4b43      	ldr	r3, [pc, #268]	; (8001700 <SPI_SendReceiveCallBack+0x144>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	b2c8      	uxtb	r0, r1
 80015f8:	4941      	ldr	r1, [pc, #260]	; (8001700 <SPI_SendReceiveCallBack+0x144>)
 80015fa:	7008      	strb	r0, [r1, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2d9      	uxtb	r1, r3
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4a40      	ldr	r2, [pc, #256]	; (8001708 <SPI_SendReceiveCallBack+0x14c>)
 8001606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160a:	460a      	mov	r2, r1
 800160c:	60da      	str	r2, [r3, #12]
//			RBufferNumbberCB= RBufferNumbberCB==3?0:RBufferNumbberCB;

		}
	}

}
 800160e:	e06c      	b.n	80016ea <SPI_SendReceiveCallBack+0x12e>
			GlobalSPI_u8CalledTimes--;
 8001610:	4b3e      	ldr	r3, [pc, #248]	; (800170c <SPI_SendReceiveCallBack+0x150>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	3b01      	subs	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <SPI_SendReceiveCallBack+0x150>)
 800161c:	701a      	strb	r2, [r3, #0]
			i=1;
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <SPI_SendReceiveCallBack+0x144>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
			SBufferNumbberCB++;
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 800162e:	701a      	strb	r2, [r3, #0]
			SBufferNumbberCB= SBufferNumbberCB==3?0:SBufferNumbberCB;
 8001630:	4b31      	ldr	r3, [pc, #196]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b03      	cmp	r3, #3
 8001636:	d002      	beq.n	800163e <SPI_SendReceiveCallBack+0x82>
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	e000      	b.n	8001640 <SPI_SendReceiveCallBack+0x84>
 800163e:	2300      	movs	r3, #0
 8001640:	4a2d      	ldr	r2, [pc, #180]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 8001642:	7013      	strb	r3, [r2, #0]
			if (GlobalSPI_u8CalledTimes)
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <SPI_SendReceiveCallBack+0x150>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00e      	beq.n	800166c <SPI_SendReceiveCallBack+0xb0>
				SPIPeripheral[copy_eSPI]->SPI_DR= GlobalSPI_pu8SendData[SBufferNumbberCB][0];
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <SPI_SendReceiveCallBack+0x13c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <SPI_SendReceiveCallBack+0x148>)
 8001656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2d9      	uxtb	r1, r3
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4a29      	ldr	r2, [pc, #164]	; (8001708 <SPI_SendReceiveCallBack+0x14c>)
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	460a      	mov	r2, r1
 8001668:	60da      	str	r2, [r3, #12]
}
 800166a:	e03e      	b.n	80016ea <SPI_SendReceiveCallBack+0x12e>
				SPI_EnableTxBufferEmptyInterrupt(copy_eSPI,SPI_Disable_Interrupt);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fca3 	bl	8000fbc <SPI_EnableTxBufferEmptyInterrupt>
}
 8001676:	e038      	b.n	80016ea <SPI_SendReceiveCallBack+0x12e>
	else if (SPI_IRQ_Reason==SPI_IRQReceive)
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <SPI_SendReceiveCallBack+0x138>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d133      	bne.n	80016ea <SPI_SendReceiveCallBack+0x12e>
		if (i<GlobalSPI_u8SizeReceiveData[RBufferNumbberCB])
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <SPI_SendReceiveCallBack+0x154>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <SPI_SendReceiveCallBack+0x158>)
 800168a:	5c9a      	ldrb	r2, [r3, r2]
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <SPI_SendReceiveCallBack+0x15c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d927      	bls.n	80016e4 <SPI_SendReceiveCallBack+0x128>
			GlobalSPI_pu8ReceiveData[RBufferNumbberCB][i++]=SPIPeripheral[copy_eSPI]->SPI_DR;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <SPI_SendReceiveCallBack+0x14c>)
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	68d8      	ldr	r0, [r3, #12]
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <SPI_SendReceiveCallBack+0x154>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <SPI_SendReceiveCallBack+0x160>)
 80016a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <SPI_SendReceiveCallBack+0x15c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	1c59      	adds	r1, r3, #1
 80016b0:	b2cc      	uxtb	r4, r1
 80016b2:	4919      	ldr	r1, [pc, #100]	; (8001718 <SPI_SendReceiveCallBack+0x15c>)
 80016b4:	700c      	strb	r4, [r1, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2c2      	uxtb	r2, r0
 80016ba:	701a      	strb	r2, [r3, #0]
			if (i == GlobalSPI_u8SizeReceiveData[RBufferNumbberCB] )
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <SPI_SendReceiveCallBack+0x154>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <SPI_SendReceiveCallBack+0x158>)
 80016c4:	5c9a      	ldrb	r2, [r3, r2]
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <SPI_SendReceiveCallBack+0x15c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10d      	bne.n	80016ea <SPI_SendReceiveCallBack+0x12e>
				GlobalSPI_u8NoOfRecFrames++;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <SPI_SendReceiveCallBack+0x164>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <SPI_SendReceiveCallBack+0x164>)
 80016da:	701a      	strb	r2, [r3, #0]
				i=0;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <SPI_SendReceiveCallBack+0x15c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
}
 80016e2:	e002      	b.n	80016ea <SPI_SendReceiveCallBack+0x12e>
			i=0;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <SPI_SendReceiveCallBack+0x15c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000142 	.word	0x20000142
 80016f8:	20000168 	.word	0x20000168
 80016fc:	20000150 	.word	0x20000150
 8001700:	200000a8 	.word	0x200000a8
 8001704:	20000144 	.word	0x20000144
 8001708:	2000009c 	.word	0x2000009c
 800170c:	20000153 	.word	0x20000153
 8001710:	20000169 	.word	0x20000169
 8001714:	20000158 	.word	0x20000158
 8001718:	2000016a 	.word	0x2000016a
 800171c:	2000015c 	.word	0x2000015c
 8001720:	20000154 	.word	0x20000154

08001724 <SPI_vReceiveDataAsynch>:
	FirtTimmeFlag++;

}

void SPI_vReceiveDataAsynch(SPI_HandleTypeDef_t* hspi, uint8_t copy_u8Data_Size,uint8_t* copy_pu8Data )
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	460b      	mov	r3, r1
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	72fb      	strb	r3, [r7, #11]
	SPI_IRQ_Reason=SPI_IRQReceive;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <SPI_vReceiveDataAsynch+0x44>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]

	static uint8_t BufferNumbber=0;
	GlobalSPI_pu8ReceiveData[BufferNumbber]=copy_pu8Data;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <SPI_vReceiveDataAsynch+0x48>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <SPI_vReceiveDataAsynch+0x4c>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	GlobalSPI_u8SizeReceiveData[BufferNumbber]=copy_u8Data_Size;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <SPI_vReceiveDataAsynch+0x48>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <SPI_vReceiveDataAsynch+0x50>)
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	5453      	strb	r3, [r2, r1]

	//Set CallBack to complete data transmission
//	SPI_SetCallBack(hspi,SPI_ReceiveAsynchCallBack);
//	Enable Interrupt and NVIC
	SPI_EnableRxBufferFullInterrupt(hspi,SPI_Enable_Interrupt);
 8001752:	2101      	movs	r1, #1
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f7ff fc5b 	bl	8001010 <SPI_EnableRxBufferFullInterrupt>
	SPI_NVICEnaleInterrupt(hspi);
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f80c 	bl	8001778 <SPI_NVICEnaleInterrupt>

//	BufferNumbber++;
//	BufferNumbber= BufferNumbber==3?0:BufferNumbber;

}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000142 	.word	0x20000142
 800176c:	2000016b 	.word	0x2000016b
 8001770:	2000015c 	.word	0x2000015c
 8001774:	20000158 	.word	0x20000158

08001778 <SPI_NVICEnaleInterrupt>:


static void SPI_NVICEnaleInterrupt(SPI_HandleTypeDef_t* hspi)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	switch(hspi->SPI_ID)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d00e      	beq.n	80017a6 <SPI_NVICEnaleInterrupt+0x2e>
 8001788:	2b02      	cmp	r3, #2
 800178a:	dc10      	bgt.n	80017ae <SPI_NVICEnaleInterrupt+0x36>
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <SPI_NVICEnaleInterrupt+0x1e>
 8001790:	2b01      	cmp	r3, #1
 8001792:	d004      	beq.n	800179e <SPI_NVICEnaleInterrupt+0x26>
		break;
	case SPI_Channel3:
		NVIC_vEnableInterrupt(SPI3_IRQn);
		break;
	}
}
 8001794:	e00b      	b.n	80017ae <SPI_NVICEnaleInterrupt+0x36>
		NVIC_vEnableInterrupt(SPI1_IRQn);
 8001796:	2023      	movs	r0, #35	; 0x23
 8001798:	f7ff fa34 	bl	8000c04 <NVIC_vEnableInterrupt>
		break;
 800179c:	e007      	b.n	80017ae <SPI_NVICEnaleInterrupt+0x36>
		NVIC_vEnableInterrupt(SPI2_IRQn);
 800179e:	2024      	movs	r0, #36	; 0x24
 80017a0:	f7ff fa30 	bl	8000c04 <NVIC_vEnableInterrupt>
		break;
 80017a4:	e003      	b.n	80017ae <SPI_NVICEnaleInterrupt+0x36>
		NVIC_vEnableInterrupt(SPI3_IRQn);
 80017a6:	2033      	movs	r0, #51	; 0x33
 80017a8:	f7ff fa2c 	bl	8000c04 <NVIC_vEnableInterrupt>
		break;
 80017ac:	bf00      	nop
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <SPI1_IRQHandler>:
//	GlobalSPI_arrCallBack[hspi->SPI_ID]=copy_eCallBack;
//}


void SPI1_IRQHandler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel1);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fefe 	bl	80015bc <SPI_SendReceiveCallBack>

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel2);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fef7 	bl	80015bc <SPI_SendReceiveCallBack>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel3);
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7ff fef0 	bl	80015bc <SPI_SendReceiveCallBack>

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <main>:
#include "SPI_Services.h"
#include "APP_Services.h"


int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	APP_Services_Init();
 80017e4:	f7ff fd50 	bl	8001288 <APP_Services_Init>

	/* Loop forever */
//	LCD_SetCursorWriteString(1, 1,(uint8_t*)"Mohamed TABANA");
	APP_Services_Ping_SPI_Asynch();
 80017e8:	f7ff fdc2 	bl	8001370 <APP_Services_Ping_SPI_Asynch>
//	sedas();
	while(1)
	{

		APP_Services_Periodic_Receive_Frame_Check();
 80017ec:	f7ff fe0a 	bl	8001404 <APP_Services_Periodic_Receive_Frame_Check>
 80017f0:	e7fc      	b.n	80017ec <main+0xc>
	...

080017f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <LoopForever+0x6>)
  ldr r1, =_edata
 80017fe:	490d      	ldr	r1, [pc, #52]	; (8001834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <LoopForever+0xe>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001814:	4c0a      	ldr	r4, [pc, #40]	; (8001840 <LoopForever+0x16>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001822:	f000 f811 	bl	8001848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001826:	f7ff ffdb 	bl	80017e0 <main>

0800182a <LoopForever>:

LoopForever:
  b LoopForever
 800182a:	e7fe      	b.n	800182a <LoopForever>
  ldr   r0, =_estack
 800182c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001838:	080018e8 	.word	0x080018e8
  ldr r2, =_sbss
 800183c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001840:	2000016c 	.word	0x2000016c

08001844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_2_IRQHandler>
	...

08001848 <__libc_init_array>:
 8001848:	b570      	push	{r4, r5, r6, lr}
 800184a:	2600      	movs	r6, #0
 800184c:	4d0c      	ldr	r5, [pc, #48]	; (8001880 <__libc_init_array+0x38>)
 800184e:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <__libc_init_array+0x3c>)
 8001850:	1b64      	subs	r4, r4, r5
 8001852:	10a4      	asrs	r4, r4, #2
 8001854:	42a6      	cmp	r6, r4
 8001856:	d109      	bne.n	800186c <__libc_init_array+0x24>
 8001858:	f000 f81a 	bl	8001890 <_init>
 800185c:	2600      	movs	r6, #0
 800185e:	4d0a      	ldr	r5, [pc, #40]	; (8001888 <__libc_init_array+0x40>)
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <__libc_init_array+0x44>)
 8001862:	1b64      	subs	r4, r4, r5
 8001864:	10a4      	asrs	r4, r4, #2
 8001866:	42a6      	cmp	r6, r4
 8001868:	d105      	bne.n	8001876 <__libc_init_array+0x2e>
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001870:	4798      	blx	r3
 8001872:	3601      	adds	r6, #1
 8001874:	e7ee      	b.n	8001854 <__libc_init_array+0xc>
 8001876:	f855 3b04 	ldr.w	r3, [r5], #4
 800187a:	4798      	blx	r3
 800187c:	3601      	adds	r6, #1
 800187e:	e7f2      	b.n	8001866 <__libc_init_array+0x1e>
 8001880:	080018e0 	.word	0x080018e0
 8001884:	080018e0 	.word	0x080018e0
 8001888:	080018e0 	.word	0x080018e0
 800188c:	080018e4 	.word	0x080018e4

08001890 <_init>:
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001892:	bf00      	nop
 8001894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001896:	bc08      	pop	{r3}
 8001898:	469e      	mov	lr, r3
 800189a:	4770      	bx	lr

0800189c <_fini>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr
