
F103_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cb0  08000cb0  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb0  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08000cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000054  08000d0c  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08000d0c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b0e  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000075e  00000000  00000000  00022b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  000232f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000210  00000000  00000000  00023550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a31  00000000  00000000  00023760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000032a8  00000000  00000000  00026191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000099a2  00000000  00000000  00029439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00032ddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007e8  00000000  00000000  00032e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000054 	.word	0x20000054
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c98 	.word	0x08000c98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000058 	.word	0x20000058
 800016c:	08000c98 	.word	0x08000c98

08000170 <GPIO_u8PinInit>:
 * @param[in] copy_ePinConfig : the initialization values of the pin
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* copy_ePinConfig)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK ;
 8000178:	2301      	movs	r3, #1
 800017a:	73fb      	strb	r3, [r7, #15]
	if (copy_ePinConfig != NULL)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	f000 8125 	beq.w	80003ce <GPIO_u8PinInit+0x25e>
	{
		if ((copy_ePinConfig->PIN_Port < INVALID) && (copy_ePinConfig->PIN_Number <= PIN15))
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b06      	cmp	r3, #6
 800018a:	f200 811d 	bhi.w	80003c8 <GPIO_u8PinInit+0x258>
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	785b      	ldrb	r3, [r3, #1]
 8000192:	2b0f      	cmp	r3, #15
 8000194:	f200 8118 	bhi.w	80003c8 <GPIO_u8PinInit+0x258>
		{
			/* Select GPIO Mode: INPUT - OUTPUT 10 MHz- OUTPUT 2 MHz - OUTPUT 50 MHz */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK] &= ~(MODE_MASK                   << ((copy_ePinConfig->PIN_Number %MODEMOD_MASK) *MODE_PIN_ACCESS)); // clear mode bits
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	461a      	mov	r2, r3
 800019e:	4b91      	ldr	r3, [pc, #580]	; (80003e4 <GPIO_u8PinInit+0x274>)
 80001a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	7852      	ldrb	r2, [r2, #1]
 80001a8:	08d2      	lsrs	r2, r2, #3
 80001aa:	b2d2      	uxtb	r2, r2
 80001ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	785b      	ldrb	r3, [r3, #1]
 80001b4:	f003 0307 	and.w	r3, r3, #7
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	2103      	movs	r1, #3
 80001bc:	fa01 f303 	lsl.w	r3, r1, r3
 80001c0:	43db      	mvns	r3, r3
 80001c2:	4618      	mov	r0, r3
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	4619      	mov	r1, r3
 80001ca:	4b86      	ldr	r3, [pc, #536]	; (80003e4 <GPIO_u8PinInit+0x274>)
 80001cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80001d0:	6879      	ldr	r1, [r7, #4]
 80001d2:	7849      	ldrb	r1, [r1, #1]
 80001d4:	08c9      	lsrs	r1, r1, #3
 80001d6:	b2c9      	uxtb	r1, r1
 80001d8:	4002      	ands	r2, r0
 80001da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK] |=  ((copy_ePinConfig->PIN_Mode) << ((copy_ePinConfig->PIN_Number %MODEMOD_MASK) *MODE_PIN_ACCESS));
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b7f      	ldr	r3, [pc, #508]	; (80003e4 <GPIO_u8PinInit+0x274>)
 80001e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	7852      	ldrb	r2, [r2, #1]
 80001ee:	08d2      	lsrs	r2, r2, #3
 80001f0:	b2d2      	uxtb	r2, r2
 80001f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	789b      	ldrb	r3, [r3, #2]
 80001fa:	4619      	mov	r1, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	785b      	ldrb	r3, [r3, #1]
 8000200:	f003 0307 	and.w	r3, r3, #7
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	fa01 f303 	lsl.w	r3, r1, r3
 800020a:	4618      	mov	r0, r3
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	4b74      	ldr	r3, [pc, #464]	; (80003e4 <GPIO_u8PinInit+0x274>)
 8000214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000218:	6879      	ldr	r1, [r7, #4]
 800021a:	7849      	ldrb	r1, [r1, #1]
 800021c:	08c9      	lsrs	r1, r1, #3
 800021e:	b2c9      	uxtb	r1, r1
 8000220:	4302      	orrs	r2, r0
 8000222:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			
			/* Select output type and speed in case of OUTPUT / AF  */
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	789b      	ldrb	r3, [r3, #2]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d007      	beq.n	800023e <GPIO_u8PinInit+0xce>
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_2_MHz ) ||
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	789b      	ldrb	r3, [r3, #2]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 8000232:	2b02      	cmp	r3, #2
 8000234:	d003      	beq.n	800023e <GPIO_u8PinInit+0xce>
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_50_MHz)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	789b      	ldrb	r3, [r3, #2]
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_2_MHz ) ||
 800023a:	2b03      	cmp	r3, #3
 800023c:	d176      	bne.n	800032c <GPIO_u8PinInit+0x1bc>
				 )
			{
				/* select output type General_purpose_output_push_pull - General_purpose_output_Open_drain - Alternate_function_output_Push_pull - Alternate_function_output_Open_drain */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  &= ~(CNF_MASK				          <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) ); // clear mode bits
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	461a      	mov	r2, r3
 8000244:	4b67      	ldr	r3, [pc, #412]	; (80003e4 <GPIO_u8PinInit+0x274>)
 8000246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800024a:	687a      	ldr	r2, [r7, #4]
 800024c:	7852      	ldrb	r2, [r2, #1]
 800024e:	08d2      	lsrs	r2, r2, #3
 8000250:	b2d2      	uxtb	r2, r2
 8000252:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	785b      	ldrb	r3, [r3, #1]
 800025a:	f003 0307 	and.w	r3, r3, #7
 800025e:	009b      	lsls	r3, r3, #2
 8000260:	3302      	adds	r3, #2
 8000262:	2103      	movs	r1, #3
 8000264:	fa01 f303 	lsl.w	r3, r1, r3
 8000268:	43db      	mvns	r3, r3
 800026a:	4618      	mov	r0, r3
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4619      	mov	r1, r3
 8000272:	4b5c      	ldr	r3, [pc, #368]	; (80003e4 <GPIO_u8PinInit+0x274>)
 8000274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	7849      	ldrb	r1, [r1, #1]
 800027c:	08c9      	lsrs	r1, r1, #3
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4002      	ands	r2, r0
 8000282:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  |=  (copy_ePinConfig->PIN_OutputType <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) );
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	461a      	mov	r2, r3
 800028c:	4b55      	ldr	r3, [pc, #340]	; (80003e4 <GPIO_u8PinInit+0x274>)
 800028e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	7852      	ldrb	r2, [r2, #1]
 8000296:	08d2      	lsrs	r2, r2, #3
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	791b      	ldrb	r3, [r3, #4]
 80002a2:	4619      	mov	r1, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	785b      	ldrb	r3, [r3, #1]
 80002a8:	f003 0307 	and.w	r3, r3, #7
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	3302      	adds	r3, #2
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
 80002b4:	4618      	mov	r0, r3
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4b49      	ldr	r3, [pc, #292]	; (80003e4 <GPIO_u8PinInit+0x274>)
 80002be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80002c2:	6879      	ldr	r1, [r7, #4]
 80002c4:	7849      	ldrb	r1, [r1, #1]
 80002c6:	08c9      	lsrs	r1, r1, #3
 80002c8:	b2c9      	uxtb	r1, r1
 80002ca:	4302      	orrs	r2, r0
 80002cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				
				GPIO_PORT[copy_ePinConfig->PIN_Port]->ODR  &= ~(0b1				            <<copy_ePinConfig->PIN_Number ); // clear mode bits
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b43      	ldr	r3, [pc, #268]	; (80003e4 <GPIO_u8PinInit+0x274>)
 80002d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002dc:	68da      	ldr	r2, [r3, #12]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	4619      	mov	r1, r3
 80002e4:	2301      	movs	r3, #1
 80002e6:	408b      	lsls	r3, r1
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4619      	mov	r1, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <GPIO_u8PinInit+0x274>)
 80002f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002f8:	400a      	ands	r2, r1
 80002fa:	60da      	str	r2, [r3, #12]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->ODR  |=  (copy_ePinConfig->PIN_OValue	<<copy_ePinConfig->PIN_Number );
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <GPIO_u8PinInit+0x274>)
 8000304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000308:	68da      	ldr	r2, [r3, #12]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	795b      	ldrb	r3, [r3, #5]
 800030e:	4619      	mov	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	4619      	mov	r1, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <GPIO_u8PinInit+0x274>)
 8000322:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000326:	430a      	orrs	r2, r1
 8000328:	60da      	str	r2, [r3, #12]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 800032a:	e053      	b.n	80003d4 <GPIO_u8PinInit+0x264>
				
				
			}
				/* select input type : Analog mode - Floating input - Input with pull-up / pull-down - Reserved */

			else if (copy_ePinConfig->PIN_Mode == INPUT)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	789b      	ldrb	r3, [r3, #2]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d14f      	bne.n	80003d4 <GPIO_u8PinInit+0x264>
			{
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  &= ~(CNF_MASK				         <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) ); // clear mode bits
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <GPIO_u8PinInit+0x274>)
 800033c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7852      	ldrb	r2, [r2, #1]
 8000344:	08d2      	lsrs	r2, r2, #3
 8000346:	b2d2      	uxtb	r2, r2
 8000348:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	f003 0307 	and.w	r3, r3, #7
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	3302      	adds	r3, #2
 8000358:	2103      	movs	r1, #3
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43db      	mvns	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4619      	mov	r1, r3
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <GPIO_u8PinInit+0x274>)
 800036a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	7849      	ldrb	r1, [r1, #1]
 8000372:	08c9      	lsrs	r1, r1, #3
 8000374:	b2c9      	uxtb	r1, r1
 8000376:	4002      	ands	r2, r0
 8000378:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  |=  (copy_ePinConfig->PIN_InputType <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) );
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	461a      	mov	r2, r3
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <GPIO_u8PinInit+0x274>)
 8000384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	7852      	ldrb	r2, [r2, #1]
 800038c:	08d2      	lsrs	r2, r2, #3
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	78db      	ldrb	r3, [r3, #3]
 8000398:	4619      	mov	r1, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	785b      	ldrb	r3, [r3, #1]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	3302      	adds	r3, #2
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	4618      	mov	r0, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	4619      	mov	r1, r3
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <GPIO_u8PinInit+0x274>)
 80003b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003b8:	6879      	ldr	r1, [r7, #4]
 80003ba:	7849      	ldrb	r1, [r1, #1]
 80003bc:	08c9      	lsrs	r1, r1, #3
 80003be:	b2c9      	uxtb	r1, r1
 80003c0:	4302      	orrs	r2, r0
 80003c2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 80003c6:	e005      	b.n	80003d4 <GPIO_u8PinInit+0x264>

			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 80003c8:	2302      	movs	r3, #2
 80003ca:	73fb      	strb	r3, [r7, #15]
 80003cc:	e003      	b.n	80003d6 <GPIO_u8PinInit+0x266>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 80003ce:	2303      	movs	r3, #3
 80003d0:	73fb      	strb	r3, [r7, #15]
 80003d2:	e000      	b.n	80003d6 <GPIO_u8PinInit+0x266>
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 80003d4:	bf00      	nop
	}

	return Local_u8ErrorState;
 80003d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3714      	adds	r7, #20
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20000000 	.word	0x20000000

080003e8 <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB2ENR,peripheral);
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <RCC_APB2EnableCLK+0x28>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	79fa      	ldrb	r2, [r7, #7]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a03      	ldr	r2, [pc, #12]	; (8000410 <RCC_APB2EnableCLK+0x28>)
 8000402:	430b      	orrs	r3, r1
 8000404:	6193      	str	r3, [r2, #24]

}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000

08000414 <SPI_SendReceiveCallBack>:

uint8_t GlobalSPI_u8SizeReceiveData[3]={0};
uint8_t* GlobalSPI_pu8ReceiveData[3]={0};

void SPI_SendReceiveCallBack(SPI_Channel_t copy_eSPI)
{
 8000414:	b490      	push	{r4, r7}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	if (SPI_IRQ_Reason==SPI_IRQSend)
 800041e:	4b43      	ldr	r3, [pc, #268]	; (800052c <SPI_SendReceiveCallBack+0x118>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d148      	bne.n	80004b8 <SPI_SendReceiveCallBack+0xa4>
	{
		static uint8_t SBufferNumbberCB=0;
		static uint8_t i=1;

		if (i!=GlobalSPI_u8SizeSendData[SBufferNumbberCB])
 8000426:	4b42      	ldr	r3, [pc, #264]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	461a      	mov	r2, r3
 800042c:	4b41      	ldr	r3, [pc, #260]	; (8000534 <SPI_SendReceiveCallBack+0x120>)
 800042e:	5c9a      	ldrb	r2, [r3, r2]
 8000430:	4b41      	ldr	r3, [pc, #260]	; (8000538 <SPI_SendReceiveCallBack+0x124>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	d014      	beq.n	8000462 <SPI_SendReceiveCallBack+0x4e>
		{

			SPIPeripheral[copy_eSPI]->SPI_DR= GlobalSPI_pu8SendData[SBufferNumbberCB][i++];
 8000438:	4b3d      	ldr	r3, [pc, #244]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b3f      	ldr	r3, [pc, #252]	; (800053c <SPI_SendReceiveCallBack+0x128>)
 8000440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000444:	4b3c      	ldr	r3, [pc, #240]	; (8000538 <SPI_SendReceiveCallBack+0x124>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	1c59      	adds	r1, r3, #1
 800044a:	b2c8      	uxtb	r0, r1
 800044c:	493a      	ldr	r1, [pc, #232]	; (8000538 <SPI_SendReceiveCallBack+0x124>)
 800044e:	7008      	strb	r0, [r1, #0]
 8000450:	4413      	add	r3, r2
 8000452:	7819      	ldrb	r1, [r3, #0]
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	4a3a      	ldr	r2, [pc, #232]	; (8000540 <SPI_SendReceiveCallBack+0x12c>)
 8000458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045c:	460a      	mov	r2, r1
 800045e:	60da      	str	r2, [r3, #12]

		}
	}


}
 8000460:	e05f      	b.n	8000522 <SPI_SendReceiveCallBack+0x10e>
			GlobalSPI_u8CalledTimes--;
 8000462:	4b38      	ldr	r3, [pc, #224]	; (8000544 <SPI_SendReceiveCallBack+0x130>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	3b01      	subs	r3, #1
 8000468:	b2da      	uxtb	r2, r3
 800046a:	4b36      	ldr	r3, [pc, #216]	; (8000544 <SPI_SendReceiveCallBack+0x130>)
 800046c:	701a      	strb	r2, [r3, #0]
			i=1;
 800046e:	4b32      	ldr	r3, [pc, #200]	; (8000538 <SPI_SendReceiveCallBack+0x124>)
 8000470:	2201      	movs	r2, #1
 8000472:	701a      	strb	r2, [r3, #0]
			SBufferNumbberCB++;
 8000474:	4b2e      	ldr	r3, [pc, #184]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 800047e:	701a      	strb	r2, [r3, #0]
			SBufferNumbberCB= SBufferNumbberCB==3?0:SBufferNumbberCB;
 8000480:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b03      	cmp	r3, #3
 8000486:	d002      	beq.n	800048e <SPI_SendReceiveCallBack+0x7a>
 8000488:	4b29      	ldr	r3, [pc, #164]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	e000      	b.n	8000490 <SPI_SendReceiveCallBack+0x7c>
 800048e:	2300      	movs	r3, #0
 8000490:	4a27      	ldr	r2, [pc, #156]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 8000492:	7013      	strb	r3, [r2, #0]
			if (GlobalSPI_u8CalledTimes)
 8000494:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <SPI_SendReceiveCallBack+0x130>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d042      	beq.n	8000522 <SPI_SendReceiveCallBack+0x10e>
				SPIPeripheral[copy_eSPI]->SPI_DR= GlobalSPI_pu8SendData[SBufferNumbberCB][0];
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <SPI_SendReceiveCallBack+0x11c>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b26      	ldr	r3, [pc, #152]	; (800053c <SPI_SendReceiveCallBack+0x128>)
 80004a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a8:	7819      	ldrb	r1, [r3, #0]
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	4a24      	ldr	r2, [pc, #144]	; (8000540 <SPI_SendReceiveCallBack+0x12c>)
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	460a      	mov	r2, r1
 80004b4:	60da      	str	r2, [r3, #12]
}
 80004b6:	e034      	b.n	8000522 <SPI_SendReceiveCallBack+0x10e>
	else if (SPI_IRQ_Reason==SPI_IRQReceive)
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <SPI_SendReceiveCallBack+0x118>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d130      	bne.n	8000522 <SPI_SendReceiveCallBack+0x10e>
		if (i!=GlobalSPI_u8SizeReceiveData[RBufferNumbberCB])
 80004c0:	4b21      	ldr	r3, [pc, #132]	; (8000548 <SPI_SendReceiveCallBack+0x134>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <SPI_SendReceiveCallBack+0x138>)
 80004c8:	5c9a      	ldrb	r2, [r3, r2]
 80004ca:	4b21      	ldr	r3, [pc, #132]	; (8000550 <SPI_SendReceiveCallBack+0x13c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d014      	beq.n	80004fc <SPI_SendReceiveCallBack+0xe8>
			GlobalSPI_pu8ReceiveData[RBufferNumbberCB][i++]=SPIPeripheral[copy_eSPI]->SPI_DR;
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	4a1a      	ldr	r2, [pc, #104]	; (8000540 <SPI_SendReceiveCallBack+0x12c>)
 80004d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004da:	68d8      	ldr	r0, [r3, #12]
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <SPI_SendReceiveCallBack+0x134>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <SPI_SendReceiveCallBack+0x140>)
 80004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <SPI_SendReceiveCallBack+0x13c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	1c59      	adds	r1, r3, #1
 80004ee:	b2cc      	uxtb	r4, r1
 80004f0:	4917      	ldr	r1, [pc, #92]	; (8000550 <SPI_SendReceiveCallBack+0x13c>)
 80004f2:	700c      	strb	r4, [r1, #0]
 80004f4:	4413      	add	r3, r2
 80004f6:	b2c2      	uxtb	r2, r0
 80004f8:	701a      	strb	r2, [r3, #0]
}
 80004fa:	e012      	b.n	8000522 <SPI_SendReceiveCallBack+0x10e>
			i=0;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <SPI_SendReceiveCallBack+0x13c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
			RBufferNumbberCB++;
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <SPI_SendReceiveCallBack+0x134>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <SPI_SendReceiveCallBack+0x134>)
 800050c:	701a      	strb	r2, [r3, #0]
			RBufferNumbberCB= RBufferNumbberCB==3?0:RBufferNumbberCB;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <SPI_SendReceiveCallBack+0x134>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d002      	beq.n	800051c <SPI_SendReceiveCallBack+0x108>
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <SPI_SendReceiveCallBack+0x134>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	e000      	b.n	800051e <SPI_SendReceiveCallBack+0x10a>
 800051c:	2300      	movs	r3, #0
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <SPI_SendReceiveCallBack+0x134>)
 8000520:	7013      	strb	r3, [r2, #0]
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bc90      	pop	{r4, r7}
 800052a:	4770      	bx	lr
 800052c:	20000070 	.word	0x20000070
 8000530:	20000094 	.word	0x20000094
 8000534:	20000080 	.word	0x20000080
 8000538:	2000001c 	.word	0x2000001c
 800053c:	20000074 	.word	0x20000074
 8000540:	20000048 	.word	0x20000048
 8000544:	20000083 	.word	0x20000083
 8000548:	20000095 	.word	0x20000095
 800054c:	20000084 	.word	0x20000084
 8000550:	20000096 	.word	0x20000096
 8000554:	20000088 	.word	0x20000088

08000558 <SPI1_IRQHandler>:
//	GlobalSPI_arrCallBack[hspi->SPI_ID]=copy_eCallBack;
//}


void SPI1_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel1);
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff ff59 	bl	8000414 <SPI_SendReceiveCallBack>

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}

08000566 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel2);
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff ff52 	bl	8000414 <SPI_SendReceiveCallBack>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	SPI_SendReceiveCallBack(SPI_Channel3);
 8000578:	2002      	movs	r0, #2
 800057a:	f7ff ff4b 	bl	8000414 <SPI_SendReceiveCallBack>

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}

08000582 <SPI_vInit>:




void SPI_vInit(SPI_HandleTypeDef_t* hspi)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
	SPI_SetHWCRCEnable( hspi,hspi->HWCRC_Enable);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	4619      	mov	r1, r3
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f869 	bl	8000668 <SPI_SetHWCRCEnable>
	SPI_SetDataFrameForamt( hspi,hspi->DataFrameFormat);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	4619      	mov	r1, r3
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f893 	bl	80006c8 <SPI_SetDataFrameForamt>
	SPI_SetBaudRate( hspi,hspi->SPI_BaudRate);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f000 f94d 	bl	8000848 <SPI_SetBaudRate>
	SPI_SetMasterSlave( hspi,hspi->MasterSlaveSelection);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	4619      	mov	r1, r3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f977 	bl	80008a8 <SPI_SetMasterSlave>

	SPI_DMATxEnable( hspi,hspi->SPI_DMATransEnable);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	79db      	ldrb	r3, [r3, #7]
 80005be:	4619      	mov	r1, r3
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 fa31 	bl	8000a28 <SPI_DMATxEnable>
	SPI_DMARxEnable( hspi,hspi->SPI_DMARecEnable);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	799b      	ldrb	r3, [r3, #6]
 80005ca:	4619      	mov	r1, r3
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 fa5b 	bl	8000a88 <SPI_DMARxEnable>

	SPI_SetSlavengBySW( hspi,hspi->SwMngSlaveEnable);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7a1b      	ldrb	r3, [r3, #8]
 80005d6:	4619      	mov	r1, r3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f8a5 	bl	8000728 <SPI_SetSlavengBySW>
    SPI_SetSlaveSelectBySW( hspi,hspi->SwSlaveSelect);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7a5b      	ldrb	r3, [r3, #9]
 80005e2:	4619      	mov	r1, r3
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f8cf 	bl	8000788 <SPI_SetSlaveSelectBySW>


	SPI_EnableTxBufferEmptyInterrupt( hspi,hspi->TxBufferEmptyIE);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a9b      	ldrb	r3, [r3, #10]
 80005ee:	4619      	mov	r1, r3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f989 	bl	8000908 <SPI_EnableTxBufferEmptyInterrupt>
	SPI_EnableRxBufferFullInterrupt( hspi,hspi->RxBufferNotEmptyIE);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7adb      	ldrb	r3, [r3, #11]
 80005fa:	4619      	mov	r1, r3
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f9b3 	bl	8000968 <SPI_EnableRxBufferFullInterrupt>
	SPI_EnableErrorInterrupt( hspi,hspi->ErrorIE);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	7b1b      	ldrb	r3, [r3, #12]
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f9dd 	bl	80009c8 <SPI_EnableErrorInterrupt>

	SPI_Enable_Peripheral( hspi,hspi->SPI_Enable);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	78db      	ldrb	r3, [r3, #3]
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f8e7 	bl	80007e8 <SPI_Enable_Peripheral>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
	...

08000624 <SPI_vSendSynch>:
void SPI_vSendSynch(SPI_HandleTypeDef_t* hspi, uint8_t copy_u8Data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
	uint8_t FlagData=0;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

	SPIPeripheral[hspi->SPI_ID]->SPI_DR= copy_u8Data;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <SPI_vSendSynch+0x40>)
 800063c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000640:	78fa      	ldrb	r2, [r7, #3]
 8000642:	60da      	str	r2, [r3, #12]

	while (FlagData == 0)
 8000644:	e006      	b.n	8000654 <SPI_vSendSynch+0x30>
	{
		SPI_ReadFlag( hspi,SPI_TXBufferEmpty,&FlagData);
 8000646:	f107 030f 	add.w	r3, r7, #15
 800064a:	461a      	mov	r2, r3
 800064c:	2101      	movs	r1, #1
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fa48 	bl	8000ae4 <SPI_ReadFlag>
	while (FlagData == 0)
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f5      	beq.n	8000646 <SPI_vSendSynch+0x22>

	}
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000048 	.word	0x20000048

08000668 <SPI_SetHWCRCEnable>:
//{
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_BIDIOE);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eOutputEnableInBidirectional<<SPI_CR1_BIDIOE);
//}
static void SPI_SetHWCRCEnable(SPI_HandleTypeDef_t* hspi,SPI_HWCRCEnable_t copy_eHWCRCEnable)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_CRCEN);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <SPI_SetHWCRCEnable+0x5c>)
 800067c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <SPI_SetHWCRCEnable+0x5c>)
 800068a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800068e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000692:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eHWCRCEnable<<SPI_CR1_CRCEN);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <SPI_SetHWCRCEnable+0x5c>)
 800069c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	035b      	lsls	r3, r3, #13
 80006a6:	4619      	mov	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <SPI_SetHWCRCEnable+0x5c>)
 80006b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	601a      	str	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000048 	.word	0x20000048

080006c8 <SPI_SetDataFrameForamt>:

static void SPI_SetDataFrameForamt(SPI_HandleTypeDef_t* hspi,SPI_DataFrameFormat_t copy_eDataFrameFormat)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_DFF);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <SPI_SetDataFrameForamt+0x5c>)
 80006dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <SPI_SetDataFrameForamt+0x5c>)
 80006ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80006ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006f2:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eDataFrameFormat<<SPI_CR1_DFF);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <SPI_SetDataFrameForamt+0x5c>)
 80006fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	02db      	lsls	r3, r3, #11
 8000706:	4619      	mov	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <SPI_SetDataFrameForamt+0x5c>)
 8000710:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000714:	430a      	orrs	r2, r1
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000048 	.word	0x20000048

08000728 <SPI_SetSlavengBySW>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_RXONLY);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eReceiveOnlyModeEnable<<SPI_CR1_RXONLY);
//}
//
static void SPI_SetSlavengBySW(SPI_HandleTypeDef_t* hspi,SPI_SWSlaveMng_t copy_eSWSlaveMng)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSM);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <SPI_SetSlavengBySW+0x5c>)
 800073c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4619      	mov	r1, r3
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <SPI_SetSlavengBySW+0x5c>)
 800074a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800074e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000752:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSWSlaveMng<<SPI_CR1_SSM);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <SPI_SetSlavengBySW+0x5c>)
 800075c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	025b      	lsls	r3, r3, #9
 8000766:	4619      	mov	r1, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SPI_SetSlavengBySW+0x5c>)
 8000770:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000774:	430a      	orrs	r2, r1
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000048 	.word	0x20000048

08000788 <SPI_SetSlaveSelectBySW>:

static void SPI_SetSlaveSelectBySW(SPI_HandleTypeDef_t* hspi,SPI_InternalSlaveSelect_t copy_eInternalSlaveSelect)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SSI);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <SPI_SetSlaveSelectBySW+0x5c>)
 800079c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <SPI_SetSlaveSelectBySW+0x5c>)
 80007aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80007ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007b2:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eInternalSlaveSelect<<SPI_CR1_SSI);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <SPI_SetSlaveSelectBySW+0x5c>)
 80007bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	4619      	mov	r1, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <SPI_SetSlaveSelectBySW+0x5c>)
 80007d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80007d4:	430a      	orrs	r2, r1
 80007d6:	601a      	str	r2, [r3, #0]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000048 	.word	0x20000048

080007e8 <SPI_Enable_Peripheral>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_LSBFIRST);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_LSBFirst<<SPI_CR1_LSBFIRST);
//}

static void SPI_Enable_Peripheral(SPI_HandleTypeDef_t* hspi,SPI_Enable_t copy_eSPI_Enable)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_SPE);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <SPI_Enable_Peripheral+0x5c>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <SPI_Enable_Peripheral+0x5c>)
 800080a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800080e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000812:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_Enable<<SPI_CR1_SPE);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <SPI_Enable_Peripheral+0x5c>)
 800081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SPI_Enable_Peripheral+0x5c>)
 8000830:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000834:	430a      	orrs	r2, r1
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000048 	.word	0x20000048

08000848 <SPI_SetBaudRate>:

static void SPI_SetBaudRate(SPI_HandleTypeDef_t* hspi,SPI_BaudRate_t copy_eSPI_BaudRate)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b111<<SPI_CR1_BR);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <SPI_SetBaudRate+0x5c>)
 800085c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <SPI_SetBaudRate+0x5c>)
 800086a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800086e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000872:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eSPI_BaudRate<<SPI_CR1_BR);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <SPI_SetBaudRate+0x5c>)
 800087c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	78fb      	ldrb	r3, [r7, #3]
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4619      	mov	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SPI_SetBaudRate+0x5c>)
 8000890:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000048 	.word	0x20000048

080008a8 <SPI_SetMasterSlave>:

static void SPI_SetMasterSlave(SPI_HandleTypeDef_t* hspi,SPI_MasterSlave_t copy_eMasterSlave)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 &=~ (0b1<<SPI_CR1_MSTR);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <SPI_SetMasterSlave+0x5c>)
 80008bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <SPI_SetMasterSlave+0x5c>)
 80008ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80008ce:	f022 0204 	bic.w	r2, r2, #4
 80008d2:	601a      	str	r2, [r3, #0]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eMasterSlave<<SPI_CR1_MSTR);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <SPI_SetMasterSlave+0x5c>)
 80008dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4619      	mov	r1, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SPI_SetMasterSlave+0x5c>)
 80008f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000048 	.word	0x20000048

08000908 <SPI_EnableTxBufferEmptyInterrupt>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR1 |= (copy_eClockPhase<<SPI_CR1_CPHA);
//}


 void SPI_EnableTxBufferEmptyInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXEIE);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 800092a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800092e:	f022 0220 	bic.w	r2, r2, #32
 8000932:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_TXEIE);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 800093c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	015b      	lsls	r3, r3, #5
 8000946:	4619      	mov	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <SPI_EnableTxBufferEmptyInterrupt+0x5c>)
 8000950:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000954:	430a      	orrs	r2, r1
 8000956:	605a      	str	r2, [r3, #4]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000048 	.word	0x20000048

08000968 <SPI_EnableRxBufferFullInterrupt>:
 void SPI_EnableRxBufferFullInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXNEIE);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <SPI_EnableRxBufferFullInterrupt+0x5c>)
 800097c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4619      	mov	r1, r3
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <SPI_EnableRxBufferFullInterrupt+0x5c>)
 800098a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800098e:	f022 0210 	bic.w	r2, r2, #16
 8000992:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_RXNEIE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <SPI_EnableRxBufferFullInterrupt+0x5c>)
 800099c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	4619      	mov	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SPI_EnableRxBufferFullInterrupt+0x5c>)
 80009b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009b4:	430a      	orrs	r2, r1
 80009b6:	605a      	str	r2, [r3, #4]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000048 	.word	0x20000048

080009c8 <SPI_EnableErrorInterrupt>:
 void SPI_EnableErrorInterrupt(SPI_HandleTypeDef_t* hspi,SPI_InterruptEnable_t copy_eInterruptEnable)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_ERRIE);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <SPI_EnableErrorInterrupt+0x5c>)
 80009dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <SPI_EnableErrorInterrupt+0x5c>)
 80009ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009ee:	f022 0208 	bic.w	r2, r2, #8
 80009f2:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eInterruptEnable<<SPI_CR2_ERRIE);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <SPI_EnableErrorInterrupt+0x5c>)
 80009fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4619      	mov	r1, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SPI_EnableErrorInterrupt+0x5c>)
 8000a10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a14:	430a      	orrs	r2, r1
 8000a16:	605a      	str	r2, [r3, #4]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000048 	.word	0x20000048

08000a28 <SPI_DMATxEnable>:
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_SSOE);
//	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eSSOutputEnable<<SPI_CR2_SSOE);
//}

static void SPI_DMATxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMATxEnable_t copy_eDMATxEnable)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_TXDMAEN);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <SPI_DMATxEnable+0x5c>)
 8000a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <SPI_DMATxEnable+0x5c>)
 8000a4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a4e:	f022 0202 	bic.w	r2, r2, #2
 8000a52:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMATxEnable<<SPI_CR2_TXDMAEN);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <SPI_DMATxEnable+0x5c>)
 8000a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	78fb      	ldrb	r3, [r7, #3]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4619      	mov	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SPI_DMATxEnable+0x5c>)
 8000a70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	605a      	str	r2, [r3, #4]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000048 	.word	0x20000048

08000a88 <SPI_DMARxEnable>:

static void SPI_DMARxEnable(SPI_HandleTypeDef_t* hspi,SPI_DMARxEnable_t copy_eDMARxEnable)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 &=~ (0b1<<SPI_CR2_RXDMAEN);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <SPI_DMARxEnable+0x58>)
 8000a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <SPI_DMARxEnable+0x58>)
 8000aaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000aae:	f022 0201 	bic.w	r2, r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
	SPIPeripheral[hspi->SPI_ID]->SPI_CR2 |= (copy_eDMARxEnable<<SPI_CR2_RXDMAEN);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <SPI_DMARxEnable+0x58>)
 8000abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac0:	6859      	ldr	r1, [r3, #4]
 8000ac2:	78fa      	ldrb	r2, [r7, #3]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SPI_DMARxEnable+0x58>)
 8000acc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	605a      	str	r2, [r3, #4]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000048 	.word	0x20000048

08000ae4 <SPI_ReadFlag>:

 void SPI_ReadFlag(SPI_HandleTypeDef_t* hspi,SPI_Flags_t copy_eFlag,uint8_t* pu8DataFlag)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	460b      	mov	r3, r1
 8000aee:	607a      	str	r2, [r7, #4]
 8000af0:	72fb      	strb	r3, [r7, #11]
	*pu8DataFlag=READ_BIT(SPIPeripheral[hspi->SPI_ID]->SPI_SR,copy_eFlag);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <SPI_ReadFlag+0x38>)
 8000afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	7afb      	ldrb	r3, [r7, #11]
 8000b02:	fa22 f303 	lsr.w	r3, r2, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	701a      	strb	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3714      	adds	r7, #20
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000048 	.word	0x20000048

08000b20 <SysTick_Handler>:

STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <SysTick_Handler+0x2c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d105      	bne.n	8000b38 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(STK->STK_CTRL,ENABLE);
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SysTick_Handler+0x30>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SysTick_Handler+0x30>)
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SysTick_Handler+0x34>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Handler+0x34>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4798      	blx	r3
	}
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000009c 	.word	0x2000009c
 8000b50:	e000e010 	.word	0xe000e010
 8000b54:	20000098 	.word	0x20000098

08000b58 <STK_vSetBusyWait>:
	CLEAR_BIT(STK->STK_CTRL,ENABLE);
}


void STK_vSetBusyWait(uint32_t copy_u32Ticks)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	STK->STK_VAL = 0 ;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <STK_vSetBusyWait+0x48>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
	// load timer
	STK->STK_LOAD=copy_u32Ticks;
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <STK_vSetBusyWait+0x48>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <STK_vSetBusyWait+0x48>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <STK_vSetBusyWait+0x48>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(STK->STK_CTRL,COUNTFLAG) != 1);
 8000b78:	bf00      	nop
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <STK_vSetBusyWait+0x48>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	0c1b      	lsrs	r3, r3, #16
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d1f8      	bne.n	8000b7a <STK_vSetBusyWait+0x22>
	// stop timer
	SET_BIT(STK->STK_CTRL,ENABLE);
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <STK_vSetBusyWait+0x48>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <STK_vSetBusyWait+0x48>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6013      	str	r3, [r2, #0]

}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <main>:
//uint8_t myarr2[10]={1,2,3,4,5,6,7,8,9,10};
uint8_t senData=0;
uint8_t recData=0;

int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
//	 RCC_APB1EnableCLK(SPI2EN);
//	 RCC_APB1EnableCLK(SPI3EN);

//	 RCC_APB2EnableCLK(AFIOEN);
	 RCC_APB2EnableCLK(IOPAEN);
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff fc1d 	bl	80003e8 <RCC_APB2EnableCLK>
	 RCC_APB2EnableCLK(IOPBEN);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f7ff fc1a 	bl	80003e8 <RCC_APB2EnableCLK>
	 RCC_APB2EnableCLK(IOPCEN);
 8000bb4:	2004      	movs	r0, #4
 8000bb6:	f7ff fc17 	bl	80003e8 <RCC_APB2EnableCLK>
	 RCC_APB2EnableCLK(SPI1EN);
 8000bba:	200c      	movs	r0, #12
 8000bbc:	f7ff fc14 	bl	80003e8 <RCC_APB2EnableCLK>





	GPIO_u8PinInit(&PinSCK);
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <main+0x44>)
 8000bc2:	f7ff fad5 	bl	8000170 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinMISO);
 8000bc6:	4809      	ldr	r0, [pc, #36]	; (8000bec <main+0x48>)
 8000bc8:	f7ff fad2 	bl	8000170 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinMOSI);
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <main+0x4c>)
 8000bce:	f7ff facf 	bl	8000170 <GPIO_u8PinInit>
//	GPIO_u8PinInit(&PinCS);
//	GPIO_u8PinInit(&pinty);

//	UART_vInit( &ourUsart);
	SPI_vInit(&ourSPI);
 8000bd2:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <main+0x50>)
 8000bd4:	f7ff fcd5 	bl	8000582 <SPI_vInit>
	/* Loop forever */
	while(1)
	{
//		SPI_vReceiveSynch( &ourSPI,&data );
//		recData^=1;
		SPI_vSendSynch( &ourSPI,25);
 8000bd8:	2119      	movs	r1, #25
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <main+0x50>)
 8000bdc:	f7ff fd22 	bl	8000624 <SPI_vSendSynch>
//		GPIO_vToggleOutputPinValue(PORTB, PIN12);
//		GPIO_vToggleOutputPinValue(PORTB, PIN13);
//		GPIO_vToggleOutputPinValue(PORTB, PIN14);
//		GPIO_vToggleOutputPinValue(PORTB, PIN15);

		 STK_vSetBusyWait(2000000);
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <main+0x54>)
 8000be2:	f7ff ffb9 	bl	8000b58 <STK_vSetBusyWait>
		SPI_vSendSynch( &ourSPI,25);
 8000be6:	e7f7      	b.n	8000bd8 <main+0x34>
 8000be8:	20000030 	.word	0x20000030
 8000bec:	20000028 	.word	0x20000028
 8000bf0:	20000020 	.word	0x20000020
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	001e8480 	.word	0x001e8480

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	; (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f000 f811 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff ffb9 	bl	8000ba4 <main>

08000c32 <LoopForever>:

LoopForever:
  b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000c40:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000c44:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000c48:	200000a0 	.word	0x200000a0

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2600      	movs	r6, #0
 8000c54:	4d0c      	ldr	r5, [pc, #48]	; (8000c88 <__libc_init_array+0x38>)
 8000c56:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	42a6      	cmp	r6, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	f000 f81a 	bl	8000c98 <_init>
 8000c64:	2600      	movs	r6, #0
 8000c66:	4d0a      	ldr	r5, [pc, #40]	; (8000c90 <__libc_init_array+0x40>)
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <__libc_init_array+0x44>)
 8000c6a:	1b64      	subs	r4, r4, r5
 8000c6c:	10a4      	asrs	r4, r4, #2
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c78:	4798      	blx	r3
 8000c7a:	3601      	adds	r6, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c82:	4798      	blx	r3
 8000c84:	3601      	adds	r6, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000cb0 	.word	0x08000cb0
 8000c8c:	08000cb0 	.word	0x08000cb0
 8000c90:	08000cb0 	.word	0x08000cb0
 8000c94:	08000cb4 	.word	0x08000cb4

08000c98 <_init>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr

08000ca4 <_fini>:
 8000ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca6:	bf00      	nop
 8000ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000caa:	bc08      	pop	{r3}
 8000cac:	469e      	mov	lr, r3
 8000cae:	4770      	bx	lr
