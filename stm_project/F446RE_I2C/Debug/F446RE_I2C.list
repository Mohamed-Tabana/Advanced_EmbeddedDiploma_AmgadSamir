
F446RE_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c98  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001e5c  08001e5c  00011e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e64  08001e64  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001e64  08001e64  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e64  08001e64  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e64  08001e64  00011e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200000a4  08001f10  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08001f10  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004617  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000078c  00000000  00000000  000246eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e0  00000000  00000000  00024e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00025258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c19  00000000  00000000  000255d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003712  00000000  00000000  000281e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b7d5  00000000  00000000  0002b8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000370d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f68  00000000  00000000  00037120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200000a4 	.word	0x200000a4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001e44 	.word	0x08001e44

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200000a8 	.word	0x200000a8
 8000200:	08001e44 	.word	0x08001e44

08000204 <DMA_vInit>:

static void (*arrDMA1_PtrToFunction[8][Total_Number_Of_Interrupts])(void) = {NULL};
static void (*arrDMA2_PtrToFunction[8][Total_Number_Of_Interrupts])(void) = {NULL};

void DMA_vInit(DMA_HandleTypeDef_t* copy_eDMAConfig)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	DMA_vSetDMAStreamChannelSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.Channel);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	7858      	ldrb	r0, [r3, #1]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	7899      	ldrb	r1, [r3, #2]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	f000 f8b9 	bl	8000390 <DMA_vSetDMAStreamChannelSelection>
	DMA_vSetDMAStreamDataTransferDirection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.Direction);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	7858      	ldrb	r0, [r3, #1]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	7899      	ldrb	r1, [r3, #2]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	78db      	ldrb	r3, [r3, #3]
 800022a:	461a      	mov	r2, r3
 800022c:	f000 fc10 	bl	8000a50 <DMA_vSetDMAStreamDataTransferDirection>
	DMA_vSetDMAMemoryIncrementMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.MINC);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	7858      	ldrb	r0, [r3, #1]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	7899      	ldrb	r1, [r3, #2]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	791b      	ldrb	r3, [r3, #4]
 800023c:	461a      	mov	r2, r3
 800023e:	f000 fb2f 	bl	80008a0 <DMA_vSetDMAMemoryIncrementMode>
	DMA_vSetDMAPeripheralIncrementMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PINC);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	7858      	ldrb	r0, [r3, #1]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	7899      	ldrb	r1, [r3, #2]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	795b      	ldrb	r3, [r3, #5]
 800024e:	461a      	mov	r2, r3
 8000250:	f000 fb6e 	bl	8000930 <DMA_vSetDMAPeripheralIncrementMode>
	DMA_vSetDMACircularMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.CircularMode);
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	7858      	ldrb	r0, [r3, #1]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	7899      	ldrb	r1, [r3, #2]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	799b      	ldrb	r3, [r3, #6]
 8000260:	461a      	mov	r2, r3
 8000262:	f000 fbad 	bl	80009c0 <DMA_vSetDMACircularMode>
	DMA_vSetDMAStreamPriorityLevel(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PriorityLevel);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7858      	ldrb	r0, [r3, #1]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	7899      	ldrb	r1, [r3, #2]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	461a      	mov	r2, r3
 8000274:	f000 f9f4 	bl	8000660 <DMA_vSetDMAStreamPriorityLevel>
	DMA_vSetDirectModeStatus(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.DirectOrFIFOMode);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	7858      	ldrb	r0, [r3, #1]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	7899      	ldrb	r1, [r3, #2]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	7a1b      	ldrb	r3, [r3, #8]
 8000284:	461a      	mov	r2, r3
 8000286:	f000 fe7b 	bl	8000f80 <DMA_vSetDirectModeStatus>
	DMA_vSetFIFOThresholdSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.FIFOThreshold);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	7858      	ldrb	r0, [r3, #1]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	7899      	ldrb	r1, [r3, #2]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	7a5b      	ldrb	r3, [r3, #9]
 8000296:	461a      	mov	r2, r3
 8000298:	f000 feba 	bl	8001010 <DMA_vSetFIFOThresholdSelection>
	DMA_vSetDMAStreamMemoryBurstTransferSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.MemoryBurst);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	7858      	ldrb	r0, [r3, #1]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	7899      	ldrb	r1, [r3, #2]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	7a9b      	ldrb	r3, [r3, #10]
 80002a8:	461a      	mov	r2, r3
 80002aa:	f000 f8b9 	bl	8000420 <DMA_vSetDMAStreamMemoryBurstTransferSelection>
	DMA_vSetDMAStreamPeripheralBurstTransferSelection(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Init.PeripheralBurst);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	7858      	ldrb	r0, [r3, #1]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	7899      	ldrb	r1, [r3, #2]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	7adb      	ldrb	r3, [r3, #11]
 80002ba:	461a      	mov	r2, r3
 80002bc:	f000 f8f8 	bl	80004b0 <DMA_vSetDMAStreamPeripheralBurstTransferSelection>
	DMA_vSetTransferCompleteInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->transfer_complete_interrupt_enable);
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	7858      	ldrb	r0, [r3, #1]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	7899      	ldrb	r1, [r3, #2]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7c9b      	ldrb	r3, [r3, #18]
 80002cc:	461a      	mov	r2, r3
 80002ce:	f000 fc4f 	bl	8000b70 <DMA_vSetTransferCompleteInterrupt>
	DMA_vSetTransferErrorInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->transfer_error_interrupt_enable);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	7858      	ldrb	r0, [r3, #1]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7899      	ldrb	r1, [r3, #2]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	7d1b      	ldrb	r3, [r3, #20]
 80002de:	461a      	mov	r2, r3
 80002e0:	f000 fcd6 	bl	8000c90 <DMA_vSetTransferErrorInterrupt>
	DMA_vSetFIFOErrorInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->FIFO_error_interrupt_enable);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	7858      	ldrb	r0, [r3, #1]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	7899      	ldrb	r1, [r3, #2]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	7d9b      	ldrb	r3, [r3, #22]
 80002f0:	461a      	mov	r2, r3
 80002f2:	f000 fdfd 	bl	8000ef0 <DMA_vSetFIFOErrorInterrupt>
	DMA_vSetHalfTransferCompleteInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->half_transfer_interrupt_enable);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	7858      	ldrb	r0, [r3, #1]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	7899      	ldrb	r1, [r3, #2]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	7cdb      	ldrb	r3, [r3, #19]
 8000302:	461a      	mov	r2, r3
 8000304:	f000 fc7c 	bl	8000c00 <DMA_vSetHalfTransferCompleteInterrupt>
	DMA_vSetDirectModeErrorInterrupt(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->direct_mode_error_interrupt_enable);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	7858      	ldrb	r0, [r3, #1]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7899      	ldrb	r1, [r3, #2]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7d5b      	ldrb	r3, [r3, #21]
 8000314:	461a      	mov	r2, r3
 8000316:	f000 fd03 	bl	8000d20 <DMA_vSetDirectModeErrorInterrupt>
	DMA_vSetDMAStreamCurrentMemoryTarget(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->Current_memory_target);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	7858      	ldrb	r0, [r3, #1]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7899      	ldrb	r1, [r3, #2]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	7b1b      	ldrb	r3, [r3, #12]
 8000326:	461a      	mov	r2, r3
 8000328:	f000 f90a 	bl	8000540 <DMA_vSetDMAStreamCurrentMemoryTarget>
	DMA_vSetDMAStreamDoubleBufferMode(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->double_buffer_mode);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7858      	ldrb	r0, [r3, #1]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7899      	ldrb	r1, [r3, #2]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	7b5b      	ldrb	r3, [r3, #13]
 8000338:	461a      	mov	r2, r3
 800033a:	f000 f949 	bl	80005d0 <DMA_vSetDMAStreamDoubleBufferMode>
	DMA_vSetDMAStreamIncreamentalOffset(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->peripheral_increment_offset_size);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	7858      	ldrb	r0, [r3, #1]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7899      	ldrb	r1, [r3, #2]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	7b9b      	ldrb	r3, [r3, #14]
 800034a:	461a      	mov	r2, r3
 800034c:	f000 f9d0 	bl	80006f0 <DMA_vSetDMAStreamIncreamentalOffset>
	DMA_vSetDMAStreamMemorySize(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->MemorySIZE);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	7858      	ldrb	r0, [r3, #1]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	7899      	ldrb	r1, [r3, #2]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	7c1b      	ldrb	r3, [r3, #16]
 800035c:	461a      	mov	r2, r3
 800035e:	f000 fa0f 	bl	8000780 <DMA_vSetDMAStreamMemorySize>
	DMA_vSetDMAStreamPeripheralSize(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->PeripheralSIZE);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	7858      	ldrb	r0, [r3, #1]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	7899      	ldrb	r1, [r3, #2]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	7bdb      	ldrb	r3, [r3, #15]
 800036e:	461a      	mov	r2, r3
 8000370:	f000 fa4e 	bl	8000810 <DMA_vSetDMAStreamPeripheralSize>
	DMA_vSetDMAStreamPeripheralFlowController(copy_eDMAConfig->Init.DMANumber, copy_eDMAConfig->Init.Stream,copy_eDMAConfig->peripheral_flow_controller);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7858      	ldrb	r0, [r3, #1]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	7899      	ldrb	r1, [r3, #2]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	7c5b      	ldrb	r3, [r3, #17]
 8000380:	461a      	mov	r2, r3
 8000382:	f000 fbad 	bl	8000ae0 <DMA_vSetDMAStreamPeripheralFlowController>

}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <DMA_vSetDMAStreamChannelSelection>:
void DMA_vSetDMAStreamChannelSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Channel_Selection_t copy_eChannel_Selection)
{
 8000390:	b490      	push	{r4, r7}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	460b      	mov	r3, r1
 800039c:	71bb      	strb	r3, [r7, #6]
 800039e:	4613      	mov	r3, r2
 80003a0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b111<<DMA_SxCR_CHSEL);
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a1d      	ldr	r2, [pc, #116]	; (800041c <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80003a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80003aa:	79ba      	ldrb	r2, [r7, #6]
 80003ac:	4613      	mov	r3, r2
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	4413      	add	r3, r2
 80003b2:	00db      	lsls	r3, r3, #3
 80003b4:	440b      	add	r3, r1
 80003b6:	3310      	adds	r3, #16
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	79fa      	ldrb	r2, [r7, #7]
 80003bc:	4917      	ldr	r1, [pc, #92]	; (800041c <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80003be:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80003c2:	79ba      	ldrb	r2, [r7, #6]
 80003c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80003c8:	4613      	mov	r3, r2
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	4413      	add	r3, r2
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	4403      	add	r3, r0
 80003d2:	3310      	adds	r3, #16
 80003d4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eChannel_Selection<<DMA_SxCR_CHSEL);
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	4a10      	ldr	r2, [pc, #64]	; (800041c <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80003da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80003de:	79ba      	ldrb	r2, [r7, #6]
 80003e0:	4613      	mov	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	4413      	add	r3, r2
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	440b      	add	r3, r1
 80003ea:	3310      	adds	r3, #16
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	797a      	ldrb	r2, [r7, #5]
 80003f0:	0652      	lsls	r2, r2, #25
 80003f2:	4614      	mov	r4, r2
 80003f4:	79fa      	ldrb	r2, [r7, #7]
 80003f6:	4909      	ldr	r1, [pc, #36]	; (800041c <DMA_vSetDMAStreamChannelSelection+0x8c>)
 80003f8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80003fc:	79ba      	ldrb	r2, [r7, #6]
 80003fe:	ea43 0104 	orr.w	r1, r3, r4
 8000402:	4613      	mov	r3, r2
 8000404:	005b      	lsls	r3, r3, #1
 8000406:	4413      	add	r3, r2
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	4403      	add	r3, r0
 800040c:	3310      	adds	r3, #16
 800040e:	6019      	str	r1, [r3, #0]
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bc90      	pop	{r4, r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000

08000420 <DMA_vSetDMAStreamMemoryBurstTransferSelection>:
void DMA_vSetDMAStreamMemoryBurstTransferSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,M_P_Burst_Transfer_Configuration_t copy_eM_P_Burst_Transfer_Configuration)
{
 8000420:	b490      	push	{r4, r7}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
 800042a:	460b      	mov	r3, r1
 800042c:	71bb      	strb	r3, [r7, #6]
 800042e:	4613      	mov	r3, r2
 8000430:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_MBURST);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	4a1d      	ldr	r2, [pc, #116]	; (80004ac <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 8000436:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800043a:	79ba      	ldrb	r2, [r7, #6]
 800043c:	4613      	mov	r3, r2
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	4413      	add	r3, r2
 8000442:	00db      	lsls	r3, r3, #3
 8000444:	440b      	add	r3, r1
 8000446:	3310      	adds	r3, #16
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	79fa      	ldrb	r2, [r7, #7]
 800044c:	4917      	ldr	r1, [pc, #92]	; (80004ac <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 800044e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000452:	79ba      	ldrb	r2, [r7, #6]
 8000454:	f023 71c0 	bic.w	r1, r3, #25165824	; 0x1800000
 8000458:	4613      	mov	r3, r2
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	4413      	add	r3, r2
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	4403      	add	r3, r0
 8000462:	3310      	adds	r3, #16
 8000464:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eM_P_Burst_Transfer_Configuration<<DMA_SxCR_MBURST);
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4a10      	ldr	r2, [pc, #64]	; (80004ac <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 800046a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800046e:	79ba      	ldrb	r2, [r7, #6]
 8000470:	4613      	mov	r3, r2
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	4413      	add	r3, r2
 8000476:	00db      	lsls	r3, r3, #3
 8000478:	440b      	add	r3, r1
 800047a:	3310      	adds	r3, #16
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	797a      	ldrb	r2, [r7, #5]
 8000480:	05d2      	lsls	r2, r2, #23
 8000482:	4614      	mov	r4, r2
 8000484:	79fa      	ldrb	r2, [r7, #7]
 8000486:	4909      	ldr	r1, [pc, #36]	; (80004ac <DMA_vSetDMAStreamMemoryBurstTransferSelection+0x8c>)
 8000488:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800048c:	79ba      	ldrb	r2, [r7, #6]
 800048e:	ea43 0104 	orr.w	r1, r3, r4
 8000492:	4613      	mov	r3, r2
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	4413      	add	r3, r2
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	4403      	add	r3, r0
 800049c:	3310      	adds	r3, #16
 800049e:	6019      	str	r1, [r3, #0]
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc90      	pop	{r4, r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000000 	.word	0x20000000

080004b0 <DMA_vSetDMAStreamPeripheralBurstTransferSelection>:
void DMA_vSetDMAStreamPeripheralBurstTransferSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,M_P_Burst_Transfer_Configuration_t copy_eM_P_Burst_Transfer_Configuration)
{
 80004b0:	b490      	push	{r4, r7}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
 80004ba:	460b      	mov	r3, r1
 80004bc:	71bb      	strb	r3, [r7, #6]
 80004be:	4613      	mov	r3, r2
 80004c0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_PBURST);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	4a1d      	ldr	r2, [pc, #116]	; (800053c <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 80004c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004ca:	79ba      	ldrb	r2, [r7, #6]
 80004cc:	4613      	mov	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4413      	add	r3, r2
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	440b      	add	r3, r1
 80004d6:	3310      	adds	r3, #16
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	79fa      	ldrb	r2, [r7, #7]
 80004dc:	4917      	ldr	r1, [pc, #92]	; (800053c <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 80004de:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80004e2:	79ba      	ldrb	r2, [r7, #6]
 80004e4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	4403      	add	r3, r0
 80004f2:	3310      	adds	r3, #16
 80004f4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eM_P_Burst_Transfer_Configuration<<DMA_SxCR_PBURST);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 80004fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004fe:	79ba      	ldrb	r2, [r7, #6]
 8000500:	4613      	mov	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4413      	add	r3, r2
 8000506:	00db      	lsls	r3, r3, #3
 8000508:	440b      	add	r3, r1
 800050a:	3310      	adds	r3, #16
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	797a      	ldrb	r2, [r7, #5]
 8000510:	0552      	lsls	r2, r2, #21
 8000512:	4614      	mov	r4, r2
 8000514:	79fa      	ldrb	r2, [r7, #7]
 8000516:	4909      	ldr	r1, [pc, #36]	; (800053c <DMA_vSetDMAStreamPeripheralBurstTransferSelection+0x8c>)
 8000518:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800051c:	79ba      	ldrb	r2, [r7, #6]
 800051e:	ea43 0104 	orr.w	r1, r3, r4
 8000522:	4613      	mov	r3, r2
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	4413      	add	r3, r2
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	4403      	add	r3, r0
 800052c:	3310      	adds	r3, #16
 800052e:	6019      	str	r1, [r3, #0]

}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bc90      	pop	{r4, r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000

08000540 <DMA_vSetDMAStreamCurrentMemoryTarget>:
void DMA_vSetDMAStreamCurrentMemoryTarget(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Current_memory_target_t copy_Current_memory_target)
{
 8000540:	b490      	push	{r4, r7}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
 800054a:	460b      	mov	r3, r1
 800054c:	71bb      	strb	r3, [r7, #6]
 800054e:	4613      	mov	r3, r2
 8000550:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_CT);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 8000556:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800055a:	79ba      	ldrb	r2, [r7, #6]
 800055c:	4613      	mov	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	4413      	add	r3, r2
 8000562:	00db      	lsls	r3, r3, #3
 8000564:	440b      	add	r3, r1
 8000566:	3310      	adds	r3, #16
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	4917      	ldr	r1, [pc, #92]	; (80005cc <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 800056e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000572:	79ba      	ldrb	r2, [r7, #6]
 8000574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	4403      	add	r3, r0
 8000582:	3310      	adds	r3, #16
 8000584:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_Current_memory_target<<DMA_SxCR_CT);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a10      	ldr	r2, [pc, #64]	; (80005cc <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 800058a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800058e:	79ba      	ldrb	r2, [r7, #6]
 8000590:	4613      	mov	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	440b      	add	r3, r1
 800059a:	3310      	adds	r3, #16
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	797a      	ldrb	r2, [r7, #5]
 80005a0:	04d2      	lsls	r2, r2, #19
 80005a2:	4614      	mov	r4, r2
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	4909      	ldr	r1, [pc, #36]	; (80005cc <DMA_vSetDMAStreamCurrentMemoryTarget+0x8c>)
 80005a8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80005ac:	79ba      	ldrb	r2, [r7, #6]
 80005ae:	ea43 0104 	orr.w	r1, r3, r4
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	4403      	add	r3, r0
 80005bc:	3310      	adds	r3, #16
 80005be:	6019      	str	r1, [r3, #0]

}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc90      	pop	{r4, r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000

080005d0 <DMA_vSetDMAStreamDoubleBufferMode>:
void DMA_vSetDMAStreamDoubleBufferMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,double_buffer_mode_t copy_double_buffer_mode)
{
 80005d0:	b490      	push	{r4, r7}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	460b      	mov	r3, r1
 80005dc:	71bb      	strb	r3, [r7, #6]
 80005de:	4613      	mov	r3, r2
 80005e0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_DBM);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4a1d      	ldr	r2, [pc, #116]	; (800065c <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 80005e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80005ea:	79ba      	ldrb	r2, [r7, #6]
 80005ec:	4613      	mov	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	4413      	add	r3, r2
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	440b      	add	r3, r1
 80005f6:	3310      	adds	r3, #16
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	4917      	ldr	r1, [pc, #92]	; (800065c <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 80005fe:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000602:	79ba      	ldrb	r2, [r7, #6]
 8000604:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8000608:	4613      	mov	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4403      	add	r3, r0
 8000612:	3310      	adds	r3, #16
 8000614:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_double_buffer_mode<<DMA_SxCR_DBM);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4a10      	ldr	r2, [pc, #64]	; (800065c <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 800061a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800061e:	79ba      	ldrb	r2, [r7, #6]
 8000620:	4613      	mov	r3, r2
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	4413      	add	r3, r2
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	440b      	add	r3, r1
 800062a:	3310      	adds	r3, #16
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	797a      	ldrb	r2, [r7, #5]
 8000630:	0492      	lsls	r2, r2, #18
 8000632:	4614      	mov	r4, r2
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <DMA_vSetDMAStreamDoubleBufferMode+0x8c>)
 8000638:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	ea43 0104 	orr.w	r1, r3, r4
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	4403      	add	r3, r0
 800064c:	3310      	adds	r3, #16
 800064e:	6019      	str	r1, [r3, #0]

}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bc90      	pop	{r4, r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000

08000660 <DMA_vSetDMAStreamPriorityLevel>:
void DMA_vSetDMAStreamPriorityLevel(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,priority_level_t copy_epriority_level)
{
 8000660:	b490      	push	{r4, r7}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
 800066a:	460b      	mov	r3, r1
 800066c:	71bb      	strb	r3, [r7, #6]
 800066e:	4613      	mov	r3, r2
 8000670:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_PL);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 8000676:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800067a:	79ba      	ldrb	r2, [r7, #6]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	440b      	add	r3, r1
 8000686:	3310      	adds	r3, #16
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	4917      	ldr	r1, [pc, #92]	; (80006ec <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 800068e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000698:	4613      	mov	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4403      	add	r3, r0
 80006a2:	3310      	adds	r3, #16
 80006a4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_epriority_level<<DMA_SxCR_PL);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 80006aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	440b      	add	r3, r1
 80006ba:	3310      	adds	r3, #16
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	797a      	ldrb	r2, [r7, #5]
 80006c0:	0412      	lsls	r2, r2, #16
 80006c2:	4614      	mov	r4, r2
 80006c4:	79fa      	ldrb	r2, [r7, #7]
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <DMA_vSetDMAStreamPriorityLevel+0x8c>)
 80006c8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	ea43 0104 	orr.w	r1, r3, r4
 80006d2:	4613      	mov	r3, r2
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4413      	add	r3, r2
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	4403      	add	r3, r0
 80006dc:	3310      	adds	r3, #16
 80006de:	6019      	str	r1, [r3, #0]

}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc90      	pop	{r4, r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000000 	.word	0x20000000

080006f0 <DMA_vSetDMAStreamIncreamentalOffset>:
void DMA_vSetDMAStreamIncreamentalOffset(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,peripheral_increment_offset_size_t copy_eperipheral_increment_offset_size)
{
 80006f0:	b490      	push	{r4, r7}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	460b      	mov	r3, r1
 80006fc:	71bb      	strb	r3, [r7, #6]
 80006fe:	4613      	mov	r3, r2
 8000700:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_PINCOS);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 8000706:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800070a:	79ba      	ldrb	r2, [r7, #6]
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	440b      	add	r3, r1
 8000716:	3310      	adds	r3, #16
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	4917      	ldr	r1, [pc, #92]	; (800077c <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 800071e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	00db      	lsls	r3, r3, #3
 8000730:	4403      	add	r3, r0
 8000732:	3310      	adds	r3, #16
 8000734:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eperipheral_increment_offset_size<<DMA_SxCR_PINCOS);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4a10      	ldr	r2, [pc, #64]	; (800077c <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 800073a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	4613      	mov	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	4413      	add	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	440b      	add	r3, r1
 800074a:	3310      	adds	r3, #16
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	797a      	ldrb	r2, [r7, #5]
 8000750:	03d2      	lsls	r2, r2, #15
 8000752:	4614      	mov	r4, r2
 8000754:	79fa      	ldrb	r2, [r7, #7]
 8000756:	4909      	ldr	r1, [pc, #36]	; (800077c <DMA_vSetDMAStreamIncreamentalOffset+0x8c>)
 8000758:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	ea43 0104 	orr.w	r1, r3, r4
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	4403      	add	r3, r0
 800076c:	3310      	adds	r3, #16
 800076e:	6019      	str	r1, [r3, #0]


}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bc90      	pop	{r4, r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000000 	.word	0x20000000

08000780 <DMA_vSetDMAStreamMemorySize>:
void DMA_vSetDMAStreamMemorySize(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,P_M_SIZE_t copy_eP_M_SIZE)
{
 8000780:	b490      	push	{r4, r7}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	460b      	mov	r3, r1
 800078c:	71bb      	strb	r3, [r7, #6]
 800078e:	4613      	mov	r3, r2
 8000790:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_MSIZE);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a1d      	ldr	r2, [pc, #116]	; (800080c <DMA_vSetDMAStreamMemorySize+0x8c>)
 8000796:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	3310      	adds	r3, #16
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	4917      	ldr	r1, [pc, #92]	; (800080c <DMA_vSetDMAStreamMemorySize+0x8c>)
 80007ae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	f423 41c0 	bic.w	r1, r3, #24576	; 0x6000
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4403      	add	r3, r0
 80007c2:	3310      	adds	r3, #16
 80007c4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eP_M_SIZE<<DMA_SxCR_MSIZE);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4a10      	ldr	r2, [pc, #64]	; (800080c <DMA_vSetDMAStreamMemorySize+0x8c>)
 80007ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80007ce:	79ba      	ldrb	r2, [r7, #6]
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	440b      	add	r3, r1
 80007da:	3310      	adds	r3, #16
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	797a      	ldrb	r2, [r7, #5]
 80007e0:	0352      	lsls	r2, r2, #13
 80007e2:	4614      	mov	r4, r2
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4909      	ldr	r1, [pc, #36]	; (800080c <DMA_vSetDMAStreamMemorySize+0x8c>)
 80007e8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	ea43 0104 	orr.w	r1, r3, r4
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	4403      	add	r3, r0
 80007fc:	3310      	adds	r3, #16
 80007fe:	6019      	str	r1, [r3, #0]

}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bc90      	pop	{r4, r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000000 	.word	0x20000000

08000810 <DMA_vSetDMAStreamPeripheralSize>:
void DMA_vSetDMAStreamPeripheralSize(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,P_M_SIZE_t copy_eP_M_SIZE)
{
 8000810:	b490      	push	{r4, r7}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	460b      	mov	r3, r1
 800081c:	71bb      	strb	r3, [r7, #6]
 800081e:	4613      	mov	r3, r2
 8000820:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_PSIZE);
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 8000826:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800082a:	79ba      	ldrb	r2, [r7, #6]
 800082c:	4613      	mov	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	440b      	add	r3, r1
 8000836:	3310      	adds	r3, #16
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	4917      	ldr	r1, [pc, #92]	; (800089c <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 800083e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000842:	79ba      	ldrb	r2, [r7, #6]
 8000844:	f423 51c0 	bic.w	r1, r3, #6144	; 0x1800
 8000848:	4613      	mov	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4413      	add	r3, r2
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	4403      	add	r3, r0
 8000852:	3310      	adds	r3, #16
 8000854:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eP_M_SIZE<<DMA_SxCR_PSIZE);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 800085a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800085e:	79ba      	ldrb	r2, [r7, #6]
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	440b      	add	r3, r1
 800086a:	3310      	adds	r3, #16
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	797a      	ldrb	r2, [r7, #5]
 8000870:	02d2      	lsls	r2, r2, #11
 8000872:	4614      	mov	r4, r2
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	4909      	ldr	r1, [pc, #36]	; (800089c <DMA_vSetDMAStreamPeripheralSize+0x8c>)
 8000878:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800087c:	79ba      	ldrb	r2, [r7, #6]
 800087e:	ea43 0104 	orr.w	r1, r3, r4
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	4403      	add	r3, r0
 800088c:	3310      	adds	r3, #16
 800088e:	6019      	str	r1, [r3, #0]


}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bc90      	pop	{r4, r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000

080008a0 <DMA_vSetDMAMemoryIncrementMode>:
void DMA_vSetDMAMemoryIncrementMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,Memory_Increment_Mode_t copy_eMemory_Increment_Mode)
{
 80008a0:	b490      	push	{r4, r7}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_MINC);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4a1d      	ldr	r2, [pc, #116]	; (800092c <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 80008b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008ba:	79ba      	ldrb	r2, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4413      	add	r3, r2
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	440b      	add	r3, r1
 80008c6:	3310      	adds	r3, #16
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	4917      	ldr	r1, [pc, #92]	; (800092c <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 80008ce:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80008d2:	79ba      	ldrb	r2, [r7, #6]
 80008d4:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	4403      	add	r3, r0
 80008e2:	3310      	adds	r3, #16
 80008e4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eMemory_Increment_Mode<<DMA_SxCR_MINC);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 80008ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80008ee:	79ba      	ldrb	r2, [r7, #6]
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	440b      	add	r3, r1
 80008fa:	3310      	adds	r3, #16
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	797a      	ldrb	r2, [r7, #5]
 8000900:	0292      	lsls	r2, r2, #10
 8000902:	4614      	mov	r4, r2
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	4909      	ldr	r1, [pc, #36]	; (800092c <DMA_vSetDMAMemoryIncrementMode+0x8c>)
 8000908:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800090c:	79ba      	ldrb	r2, [r7, #6]
 800090e:	ea43 0104 	orr.w	r1, r3, r4
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	4403      	add	r3, r0
 800091c:	3310      	adds	r3, #16
 800091e:	6019      	str	r1, [r3, #0]

}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bc90      	pop	{r4, r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000000 	.word	0x20000000

08000930 <DMA_vSetDMAPeripheralIncrementMode>:
void DMA_vSetDMAPeripheralIncrementMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,peripheral_Increment_Mode_t copy_peripheral_Increment_Mode)
{
 8000930:	b490      	push	{r4, r7}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
 800093a:	460b      	mov	r3, r1
 800093c:	71bb      	strb	r3, [r7, #6]
 800093e:	4613      	mov	r3, r2
 8000940:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_PINC);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 8000946:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800094a:	79ba      	ldrb	r2, [r7, #6]
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	00db      	lsls	r3, r3, #3
 8000954:	440b      	add	r3, r1
 8000956:	3310      	adds	r3, #16
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	4917      	ldr	r1, [pc, #92]	; (80009bc <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 800095e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000962:	79ba      	ldrb	r2, [r7, #6]
 8000964:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4403      	add	r3, r0
 8000972:	3310      	adds	r3, #16
 8000974:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_peripheral_Increment_Mode<<DMA_SxCR_PINC);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a10      	ldr	r2, [pc, #64]	; (80009bc <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 800097a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800097e:	79ba      	ldrb	r2, [r7, #6]
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	440b      	add	r3, r1
 800098a:	3310      	adds	r3, #16
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	797a      	ldrb	r2, [r7, #5]
 8000990:	0252      	lsls	r2, r2, #9
 8000992:	4614      	mov	r4, r2
 8000994:	79fa      	ldrb	r2, [r7, #7]
 8000996:	4909      	ldr	r1, [pc, #36]	; (80009bc <DMA_vSetDMAPeripheralIncrementMode+0x8c>)
 8000998:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 800099c:	79ba      	ldrb	r2, [r7, #6]
 800099e:	ea43 0104 	orr.w	r1, r3, r4
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	4403      	add	r3, r0
 80009ac:	3310      	adds	r3, #16
 80009ae:	6019      	str	r1, [r3, #0]

}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc90      	pop	{r4, r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000000 	.word	0x20000000

080009c0 <DMA_vSetDMACircularMode>:
void DMA_vSetDMACircularMode(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,circular_mode_t copy_eCircular_mode)
{
 80009c0:	b490      	push	{r4, r7}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	460b      	mov	r3, r1
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	4613      	mov	r3, r2
 80009d0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_CIRC);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <DMA_vSetDMACircularMode+0x8c>)
 80009d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80009da:	79ba      	ldrb	r2, [r7, #6]
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	440b      	add	r3, r1
 80009e6:	3310      	adds	r3, #16
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	4917      	ldr	r1, [pc, #92]	; (8000a4c <DMA_vSetDMACircularMode+0x8c>)
 80009ee:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80009f2:	79ba      	ldrb	r2, [r7, #6]
 80009f4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	4403      	add	r3, r0
 8000a02:	3310      	adds	r3, #16
 8000a04:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eCircular_mode<<DMA_SxCR_CIRC);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <DMA_vSetDMACircularMode+0x8c>)
 8000a0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a0e:	79ba      	ldrb	r2, [r7, #6]
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3310      	adds	r3, #16
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	797a      	ldrb	r2, [r7, #5]
 8000a20:	0212      	lsls	r2, r2, #8
 8000a22:	4614      	mov	r4, r2
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	4909      	ldr	r1, [pc, #36]	; (8000a4c <DMA_vSetDMACircularMode+0x8c>)
 8000a28:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000a2c:	79ba      	ldrb	r2, [r7, #6]
 8000a2e:	ea43 0104 	orr.w	r1, r3, r4
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	4403      	add	r3, r0
 8000a3c:	3310      	adds	r3, #16
 8000a3e:	6019      	str	r1, [r3, #0]

}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc90      	pop	{r4, r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000000 	.word	0x20000000

08000a50 <DMA_vSetDMAStreamDataTransferDirection>:
void DMA_vSetDMAStreamDataTransferDirection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,data_transfer_direction_t copy_edata_transfer_direction)
{
 8000a50:	b490      	push	{r4, r7}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	71bb      	strb	r3, [r7, #6]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b11<<DMA_SxCR_DIR);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000a66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a6a:	79ba      	ldrb	r2, [r7, #6]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3310      	adds	r3, #16
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	4917      	ldr	r1, [pc, #92]	; (8000adc <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000a7e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000a82:	79ba      	ldrb	r2, [r7, #6]
 8000a84:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	4403      	add	r3, r0
 8000a92:	3310      	adds	r3, #16
 8000a94:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_edata_transfer_direction<<DMA_SxCR_DIR);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4a10      	ldr	r2, [pc, #64]	; (8000adc <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000a9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a9e:	79ba      	ldrb	r2, [r7, #6]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3310      	adds	r3, #16
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	797a      	ldrb	r2, [r7, #5]
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	4614      	mov	r4, r2
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	4909      	ldr	r1, [pc, #36]	; (8000adc <DMA_vSetDMAStreamDataTransferDirection+0x8c>)
 8000ab8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000abc:	79ba      	ldrb	r2, [r7, #6]
 8000abe:	ea43 0104 	orr.w	r1, r3, r4
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	4413      	add	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	4403      	add	r3, r0
 8000acc:	3310      	adds	r3, #16
 8000ace:	6019      	str	r1, [r3, #0]


}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc90      	pop	{r4, r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <DMA_vSetDMAStreamPeripheralFlowController>:
void DMA_vSetDMAStreamPeripheralFlowController(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,peripheral_flow_controller_t copy_eperipheral_flow_controller)
{
 8000ae0:	b490      	push	{r4, r7}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	460b      	mov	r3, r1
 8000aec:	71bb      	strb	r3, [r7, #6]
 8000aee:	4613      	mov	r3, r2
 8000af0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_PFCTRL);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000af6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	440b      	add	r3, r1
 8000b06:	3310      	adds	r3, #16
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	79fa      	ldrb	r2, [r7, #7]
 8000b0c:	4917      	ldr	r1, [pc, #92]	; (8000b6c <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000b0e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000b12:	79ba      	ldrb	r2, [r7, #6]
 8000b14:	f023 0120 	bic.w	r1, r3, #32
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4403      	add	r3, r0
 8000b22:	3310      	adds	r3, #16
 8000b24:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_eperipheral_flow_controller<<DMA_SxCR_PFCTRL);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000b2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000b2e:	79ba      	ldrb	r2, [r7, #6]
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3310      	adds	r3, #16
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	797a      	ldrb	r2, [r7, #5]
 8000b40:	0152      	lsls	r2, r2, #5
 8000b42:	4614      	mov	r4, r2
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	4909      	ldr	r1, [pc, #36]	; (8000b6c <DMA_vSetDMAStreamPeripheralFlowController+0x8c>)
 8000b48:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000b4c:	79ba      	ldrb	r2, [r7, #6]
 8000b4e:	ea43 0104 	orr.w	r1, r3, r4
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	4403      	add	r3, r0
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	6019      	str	r1, [r3, #0]

}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc90      	pop	{r4, r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000000 	.word	0x20000000

08000b70 <DMA_vSetTransferCompleteInterrupt>:
void DMA_vSetTransferCompleteInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,transfer_complete_interrupt_enable_t copy_etransfer_complete_interrupt_enable)
{
 8000b70:	b490      	push	{r4, r7}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	71bb      	strb	r3, [r7, #6]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_TCIE);
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000b86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000b8a:	79ba      	ldrb	r2, [r7, #6]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	440b      	add	r3, r1
 8000b96:	3310      	adds	r3, #16
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	4917      	ldr	r1, [pc, #92]	; (8000bfc <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000b9e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000ba2:	79ba      	ldrb	r2, [r7, #6]
 8000ba4:	f023 0110 	bic.w	r1, r3, #16
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	4403      	add	r3, r0
 8000bb2:	3310      	adds	r3, #16
 8000bb4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_etransfer_complete_interrupt_enable<<DMA_SxCR_TCIE);
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000bba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000bbe:	79ba      	ldrb	r2, [r7, #6]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	440b      	add	r3, r1
 8000bca:	3310      	adds	r3, #16
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	797a      	ldrb	r2, [r7, #5]
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	4614      	mov	r4, r2
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	4909      	ldr	r1, [pc, #36]	; (8000bfc <DMA_vSetTransferCompleteInterrupt+0x8c>)
 8000bd8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000bdc:	79ba      	ldrb	r2, [r7, #6]
 8000bde:	ea43 0104 	orr.w	r1, r3, r4
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	4403      	add	r3, r0
 8000bec:	3310      	adds	r3, #16
 8000bee:	6019      	str	r1, [r3, #0]


}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc90      	pop	{r4, r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000000 	.word	0x20000000

08000c00 <DMA_vSetHalfTransferCompleteInterrupt>:
void DMA_vSetHalfTransferCompleteInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,half_transfer_interrupt_enable_t half_transfer_interrupt_enable)
{
 8000c00:	b490      	push	{r4, r7}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	71bb      	strb	r3, [r7, #6]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_HTIE);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000c16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c1a:	79ba      	ldrb	r2, [r7, #6]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	3310      	adds	r3, #16
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	4917      	ldr	r1, [pc, #92]	; (8000c8c <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000c2e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000c32:	79ba      	ldrb	r2, [r7, #6]
 8000c34:	f023 0108 	bic.w	r1, r3, #8
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4403      	add	r3, r0
 8000c42:	3310      	adds	r3, #16
 8000c44:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (half_transfer_interrupt_enable<<DMA_SxCR_HTIE);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000c4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	3310      	adds	r3, #16
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	797a      	ldrb	r2, [r7, #5]
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	4614      	mov	r4, r2
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	4909      	ldr	r1, [pc, #36]	; (8000c8c <DMA_vSetHalfTransferCompleteInterrupt+0x8c>)
 8000c68:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	ea43 0104 	orr.w	r1, r3, r4
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	4403      	add	r3, r0
 8000c7c:	3310      	adds	r3, #16
 8000c7e:	6019      	str	r1, [r3, #0]

}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc90      	pop	{r4, r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000000 	.word	0x20000000

08000c90 <DMA_vSetTransferErrorInterrupt>:
void DMA_vSetTransferErrorInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,transfer_error_interrupt_enable_T copy_etransfer_error_interrupt_enable)
{
 8000c90:	b490      	push	{r4, r7}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_TEIE);
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000ca6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000caa:	79ba      	ldrb	r2, [r7, #6]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3310      	adds	r3, #16
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	4917      	ldr	r1, [pc, #92]	; (8000d1c <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000cbe:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000cc2:	79ba      	ldrb	r2, [r7, #6]
 8000cc4:	f023 0104 	bic.w	r1, r3, #4
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4403      	add	r3, r0
 8000cd2:	3310      	adds	r3, #16
 8000cd4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_etransfer_error_interrupt_enable<<DMA_SxCR_TEIE);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000cda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000cde:	79ba      	ldrb	r2, [r7, #6]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	3310      	adds	r3, #16
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	797a      	ldrb	r2, [r7, #5]
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	4614      	mov	r4, r2
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	4909      	ldr	r1, [pc, #36]	; (8000d1c <DMA_vSetTransferErrorInterrupt+0x8c>)
 8000cf8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000cfc:	79ba      	ldrb	r2, [r7, #6]
 8000cfe:	ea43 0104 	orr.w	r1, r3, r4
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4403      	add	r3, r0
 8000d0c:	3310      	adds	r3, #16
 8000d0e:	6019      	str	r1, [r3, #0]

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc90      	pop	{r4, r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000

08000d20 <DMA_vSetDirectModeErrorInterrupt>:
void DMA_vSetDirectModeErrorInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,direct_mode_error_interrupt_enable_t copy_edirect_mode_error_interrupt_enable)
{
 8000d20:	b490      	push	{r4, r7}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_DMEIE);
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000d36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d3a:	79ba      	ldrb	r2, [r7, #6]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	3310      	adds	r3, #16
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	4917      	ldr	r1, [pc, #92]	; (8000dac <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000d4e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000d52:	79ba      	ldrb	r2, [r7, #6]
 8000d54:	f023 0102 	bic.w	r1, r3, #2
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	4403      	add	r3, r0
 8000d62:	3310      	adds	r3, #16
 8000d64:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_edirect_mode_error_interrupt_enable<<DMA_SxCR_DMEIE);
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a10      	ldr	r2, [pc, #64]	; (8000dac <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000d6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d6e:	79ba      	ldrb	r2, [r7, #6]
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	440b      	add	r3, r1
 8000d7a:	3310      	adds	r3, #16
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	797a      	ldrb	r2, [r7, #5]
 8000d80:	0052      	lsls	r2, r2, #1
 8000d82:	4614      	mov	r4, r2
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	4909      	ldr	r1, [pc, #36]	; (8000dac <DMA_vSetDirectModeErrorInterrupt+0x8c>)
 8000d88:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000d8c:	79ba      	ldrb	r2, [r7, #6]
 8000d8e:	ea43 0104 	orr.w	r1, r3, r4
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4403      	add	r3, r0
 8000d9c:	3310      	adds	r3, #16
 8000d9e:	6019      	str	r1, [r3, #0]

}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc90      	pop	{r4, r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000

08000db0 <DMA_vEnableStream>:
void DMA_vEnableStream(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection, stream_enable_t copy_estream_enable)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	71bb      	strb	r3, [r7, #6]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR &=~ (0b1<<DMA_SxCR_EN);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <DMA_vEnableStream+0x88>)
 8000dc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000dca:	79ba      	ldrb	r2, [r7, #6]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	440b      	add	r3, r1
 8000dd6:	3310      	adds	r3, #16
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	4916      	ldr	r1, [pc, #88]	; (8000e38 <DMA_vEnableStream+0x88>)
 8000dde:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000de2:	79ba      	ldrb	r2, [r7, #6]
 8000de4:	f023 0101 	bic.w	r1, r3, #1
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4403      	add	r3, r0
 8000df2:	3310      	adds	r3, #16
 8000df4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxCR |= (copy_estream_enable<<DMA_SxCR_EN);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <DMA_vEnableStream+0x88>)
 8000dfa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000dfe:	79ba      	ldrb	r2, [r7, #6]
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	440b      	add	r3, r1
 8000e0a:	3310      	adds	r3, #16
 8000e0c:	6819      	ldr	r1, [r3, #0]
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	4809      	ldr	r0, [pc, #36]	; (8000e38 <DMA_vEnableStream+0x88>)
 8000e14:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8000e18:	79ba      	ldrb	r2, [r7, #6]
 8000e1a:	4319      	orrs	r1, r3
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4403      	add	r3, r0
 8000e26:	3310      	adds	r3, #16
 8000e28:	6019      	str	r1, [r3, #0]

}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <DMA_vSetNumberOfDataToBeTransefered>:
void DMA_vSetNumberOfDataToBeTransefered(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,uint16_t copy_u16NumberOfData)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	460b      	mov	r3, r1
 8000e48:	71bb      	strb	r3, [r7, #6]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	80bb      	strh	r3, [r7, #4]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxNDTR = (copy_u16NumberOfData<<0);
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <DMA_vSetNumberOfDataToBeTransefered+0x38>)
 8000e52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e56:	79ba      	ldrb	r2, [r7, #6]
 8000e58:	88b9      	ldrh	r1, [r7, #4]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4403      	add	r3, r0
 8000e64:	3314      	adds	r3, #20
 8000e66:	6019      	str	r1, [r3, #0]

}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000000 	.word	0x20000000

08000e78 <DMA_vSetAddressOfPeripheral>:
void DMA_vSetAddressOfPeripheral(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,uint32_t copy_u32AddressOfPeripheral)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	603a      	str	r2, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	460b      	mov	r3, r1
 8000e86:	71bb      	strb	r3, [r7, #6]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxPAR = (copy_u32AddressOfPeripheral<<0);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <DMA_vSetAddressOfPeripheral+0x38>)
 8000e8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	440b      	add	r3, r1
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	601a      	str	r2, [r3, #0]

}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000000 	.word	0x20000000

08000eb4 <DMA_vSetAddressOfMemory0>:
void DMA_vSetAddressOfMemory0(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,uint32_t copy_u32AddressOfMemory0)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	603a      	str	r2, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	71bb      	strb	r3, [r7, #6]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxM0AR = (copy_u32AddressOfMemory0<<0);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <DMA_vSetAddressOfMemory0+0x38>)
 8000ec8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	3304      	adds	r3, #4
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	601a      	str	r2, [r3, #0]

}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	20000000 	.word	0x20000000

08000ef0 <DMA_vSetFIFOErrorInterrupt>:
{
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxM1AR = (copy_u32AddressOfMemory1<<0);

}
void DMA_vSetFIFOErrorInterrupt(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,FIFO_error_interrupt_enable_t copy_eFIFO_error_interrupt_enable)
{
 8000ef0:	b490      	push	{r4, r7}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	460b      	mov	r3, r1
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR &=~ (0b1<<DMA_SxFCR_FEIE);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <DMA_vSetFIFOErrorInterrupt+0x8c>)
 8000f06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f0a:	79ba      	ldrb	r2, [r7, #6]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	3324      	adds	r3, #36	; 0x24
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	4917      	ldr	r1, [pc, #92]	; (8000f7c <DMA_vSetFIFOErrorInterrupt+0x8c>)
 8000f1e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000f22:	79ba      	ldrb	r2, [r7, #6]
 8000f24:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4403      	add	r3, r0
 8000f32:	3324      	adds	r3, #36	; 0x24
 8000f34:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_eFIFO_error_interrupt_enable<<DMA_SxFCR_FEIE);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <DMA_vSetFIFOErrorInterrupt+0x8c>)
 8000f3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f3e:	79ba      	ldrb	r2, [r7, #6]
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	440b      	add	r3, r1
 8000f4a:	3324      	adds	r3, #36	; 0x24
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	797a      	ldrb	r2, [r7, #5]
 8000f50:	01d2      	lsls	r2, r2, #7
 8000f52:	4614      	mov	r4, r2
 8000f54:	79fa      	ldrb	r2, [r7, #7]
 8000f56:	4909      	ldr	r1, [pc, #36]	; (8000f7c <DMA_vSetFIFOErrorInterrupt+0x8c>)
 8000f58:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000f5c:	79ba      	ldrb	r2, [r7, #6]
 8000f5e:	ea43 0104 	orr.w	r1, r3, r4
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4403      	add	r3, r0
 8000f6c:	3324      	adds	r3, #36	; 0x24
 8000f6e:	6019      	str	r1, [r3, #0]

}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc90      	pop	{r4, r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000

08000f80 <DMA_vSetDirectModeStatus>:
//uint8_t DMA_u8GetFIFOStatus();
void DMA_vSetDirectModeStatus(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,direct_mode_disable_t copy_edirect_mode_disable)
{
 8000f80:	b490      	push	{r4, r7}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	71bb      	strb	r3, [r7, #6]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR &=~ (0b1<<DMA_SxFCR_DMDIS);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <DMA_vSetDirectModeStatus+0x8c>)
 8000f96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000f9a:	79ba      	ldrb	r2, [r7, #6]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3324      	adds	r3, #36	; 0x24
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	4917      	ldr	r1, [pc, #92]	; (800100c <DMA_vSetDirectModeStatus+0x8c>)
 8000fae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000fb2:	79ba      	ldrb	r2, [r7, #6]
 8000fb4:	f023 0104 	bic.w	r1, r3, #4
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4403      	add	r3, r0
 8000fc2:	3324      	adds	r3, #36	; 0x24
 8000fc4:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_edirect_mode_disable<<DMA_SxFCR_DMDIS);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <DMA_vSetDirectModeStatus+0x8c>)
 8000fca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000fce:	79ba      	ldrb	r2, [r7, #6]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3324      	adds	r3, #36	; 0x24
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	797a      	ldrb	r2, [r7, #5]
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4614      	mov	r4, r2
 8000fe4:	79fa      	ldrb	r2, [r7, #7]
 8000fe6:	4909      	ldr	r1, [pc, #36]	; (800100c <DMA_vSetDirectModeStatus+0x8c>)
 8000fe8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8000fec:	79ba      	ldrb	r2, [r7, #6]
 8000fee:	ea43 0104 	orr.w	r1, r3, r4
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4403      	add	r3, r0
 8000ffc:	3324      	adds	r3, #36	; 0x24
 8000ffe:	6019      	str	r1, [r3, #0]


}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bc90      	pop	{r4, r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000

08001010 <DMA_vSetFIFOThresholdSelection>:
void DMA_vSetFIFOThresholdSelection(DMA_Peripheral_Number_t copy_eDMA_Peripheral_Number, Stream_Selection_t copy_eStream_Selection,FIFO_threshold_t copy_eFIFO_threshold)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	460b      	mov	r3, r1
 800101c:	71bb      	strb	r3, [r7, #6]
 800101e:	4613      	mov	r3, r2
 8001020:	717b      	strb	r3, [r7, #5]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR &=~ (0b11<<DMA_SxFCR_FTH);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <DMA_vSetFIFOThresholdSelection+0x88>)
 8001026:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800102a:	79ba      	ldrb	r2, [r7, #6]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	3324      	adds	r3, #36	; 0x24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	4916      	ldr	r1, [pc, #88]	; (8001098 <DMA_vSetFIFOThresholdSelection+0x88>)
 800103e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8001042:	79ba      	ldrb	r2, [r7, #6]
 8001044:	f023 0103 	bic.w	r1, r3, #3
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4403      	add	r3, r0
 8001052:	3324      	adds	r3, #36	; 0x24
 8001054:	6019      	str	r1, [r3, #0]
	DMAPeripheral[copy_eDMA_Peripheral_Number]->DMA_STREAM[copy_eStream_Selection].DMA_SxFCR |= (copy_eFIFO_threshold<<DMA_SxFCR_FTH);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <DMA_vSetFIFOThresholdSelection+0x88>)
 800105a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800105e:	79ba      	ldrb	r2, [r7, #6]
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	3324      	adds	r3, #36	; 0x24
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	797b      	ldrb	r3, [r7, #5]
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	4809      	ldr	r0, [pc, #36]	; (8001098 <DMA_vSetFIFOThresholdSelection+0x88>)
 8001074:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8001078:	79ba      	ldrb	r2, [r7, #6]
 800107a:	4319      	orrs	r1, r3
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4403      	add	r3, r0
 8001086:	3324      	adds	r3, #36	; 0x24
 8001088:	6019      	str	r1, [r3, #0]

}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000

0800109c <DMA_vStart_IT>:
	DMA_vEnableStream(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,stream_enabled);


}
void DMA_vStart_IT(DMA_HandleTypeDef_t* copy_eDMAConfig,uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
	if (copy_eDMAConfig->Init.Direction == memory_to_peripheral)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	78db      	ldrb	r3, [r3, #3]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d110      	bne.n	80010d4 <DMA_vStart_IT+0x38>
	{
		DMA_vSetAddressOfMemory0(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,SrcAddress);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	7858      	ldrb	r0, [r3, #1]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fef9 	bl	8000eb4 <DMA_vSetAddressOfMemory0>
		DMA_vSetAddressOfPeripheral(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DstAddress);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	7858      	ldrb	r0, [r3, #1]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fed3 	bl	8000e78 <DMA_vSetAddressOfPeripheral>
 80010d2:	e00f      	b.n	80010f4 <DMA_vStart_IT+0x58>

	}
	else
	{
		DMA_vSetAddressOfMemory0(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DstAddress);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	7858      	ldrb	r0, [r3, #1]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	789b      	ldrb	r3, [r3, #2]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fee8 	bl	8000eb4 <DMA_vSetAddressOfMemory0>
		DMA_vSetAddressOfPeripheral(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,SrcAddress);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7858      	ldrb	r0, [r3, #1]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	789b      	ldrb	r3, [r3, #2]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fec2 	bl	8000e78 <DMA_vSetAddressOfPeripheral>

	}
	DMA_vSetNumberOfDataToBeTransefered(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,DataLength);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	7858      	ldrb	r0, [r3, #1]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b292      	uxth	r2, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fe9b 	bl	8000e3c <DMA_vSetNumberOfDataToBeTransefered>
	DMA_vSetTransferCompleteInterrupt(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,TC_interrupt_enabled);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	7858      	ldrb	r0, [r3, #1]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd2d 	bl	8000b70 <DMA_vSetTransferCompleteInterrupt>

	DMA_vEnableStream(copy_eDMAConfig->Init.DMANumber,copy_eDMAConfig->Init.Stream,stream_enabled);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	7858      	ldrb	r0, [r3, #1]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fe45 	bl	8000db0 <DMA_vEnableStream>


}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <DMA_vReadFlagStatus>:
void DMA_vReadFlagStatus(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number,DMA_Interrupt_t copy_eDMA_Interrupt,uint8_t *interruptStatusFlag)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	460b      	mov	r3, r1
 800113e:	71bb      	strb	r3, [r7, #6]
 8001140:	4613      	mov	r3, r2
 8001142:	717b      	strb	r3, [r7, #5]

	uint8_t flagShift=(uint8_t)copy_eDMA_Interrupt+6*(((uint8_t)Stream_Number%4))+(((((uint8_t)Stream_Number%4))/2)*4);
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	085b      	lsrs	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	b2da      	uxtb	r2, r3
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	4413      	add	r3, r2
 800116e:	73fb      	strb	r3, [r7, #15]
	*interruptStatusFlag= READ_BIT(DMAPeripheral[DMA_Number]->DMA_LISR[Stream_Number/4],flagShift );
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <DMA_vReadFlagStatus+0x70>)
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	79ba      	ldrb	r2, [r7, #6]
 800117a:	0892      	lsrs	r2, r2, #2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	fa22 f303 	lsr.w	r3, r2, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	b2da      	uxtb	r2, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	701a      	strb	r2, [r3, #0]

}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20000000 	.word	0x20000000

080011a4 <DMA_vClearFlagStatus>:
void DMA_vClearFlagStatus(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number,DMA_Interrupt_t copy_eDMA_Interrupt)
{
 80011a4:	b490      	push	{r4, r7}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	460b      	mov	r3, r1
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	4613      	mov	r3, r2
 80011b4:	717b      	strb	r3, [r7, #5]
	uint8_t flagShift=(uint8_t)copy_eDMA_Interrupt+6*((uint8_t)Stream_Number%4);
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	4413      	add	r3, r2
 80011cc:	73fb      	strb	r3, [r7, #15]
    SET_BIT(DMAPeripheral[DMA_Number]->DMA_LIFCR[Stream_Number/4],flagShift );
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <DMA_vClearFlagStatus+0x68>)
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	79ba      	ldrb	r2, [r7, #6]
 80011d8:	0892      	lsrs	r2, r2, #2
 80011da:	b2d0      	uxtb	r0, r2
 80011dc:	4602      	mov	r2, r0
 80011de:	3202      	adds	r2, #2
 80011e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	461c      	mov	r4, r3
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4906      	ldr	r1, [pc, #24]	; (800120c <DMA_vClearFlagStatus+0x68>)
 80011f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011f6:	ea42 0104 	orr.w	r1, r2, r4
 80011fa:	1c82      	adds	r2, r0, #2
 80011fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bc90      	pop	{r4, r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000

08001210 <DMA_vIRQHandler>:

void DMA_vIRQHandler(DMA_Peripheral_Number_t DMA_Number,Stream_Selection_t Stream_Number)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	4613      	mov	r3, r2
 800121e:	71bb      	strb	r3, [r7, #6]

	uint8_t flagStatus=0;
 8001220:	2300      	movs	r3, #0
 8001222:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i=0 ;i<Total_Number_Of_Interrupts ; i++)
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e04b      	b.n	80012c2 <DMA_vIRQHandler+0xb2>
	{

		DMA_vReadFlagStatus(DMA_Number,Stream_Number, i, &flagStatus);
 800122a:	f107 030e 	add.w	r3, r7, #14
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	79b9      	ldrb	r1, [r7, #6]
 8001232:	79f8      	ldrb	r0, [r7, #7]
 8001234:	f7ff ff7c 	bl	8001130 <DMA_vReadFlagStatus>
		if (flagStatus)
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d03e      	beq.n	80012bc <DMA_vIRQHandler+0xac>
		{
			switch (DMA_Number)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <DMA_vIRQHandler+0x3a>
 8001244:	2b01      	cmp	r3, #1
 8001246:	d018      	beq.n	800127a <DMA_vIRQHandler+0x6a>
					arrDMA2_PtrToFunction[Stream_Number][i]();
				}
				break;
			default:
				/* Do Nothing!*/
				break;
 8001248:	e032      	b.n	80012b0 <DMA_vIRQHandler+0xa0>
				if (arrDMA1_PtrToFunction[Stream_Number][i] != NULL)
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	7bf9      	ldrb	r1, [r7, #15]
 800124e:	4821      	ldr	r0, [pc, #132]	; (80012d4 <DMA_vIRQHandler+0xc4>)
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	440b      	add	r3, r1
 800125a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d023      	beq.n	80012aa <DMA_vIRQHandler+0x9a>
					arrDMA1_PtrToFunction[Stream_Number][i]();
 8001262:	79ba      	ldrb	r2, [r7, #6]
 8001264:	7bf9      	ldrb	r1, [r7, #15]
 8001266:	481b      	ldr	r0, [pc, #108]	; (80012d4 <DMA_vIRQHandler+0xc4>)
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	440b      	add	r3, r1
 8001272:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001276:	4798      	blx	r3
				break;
 8001278:	e017      	b.n	80012aa <DMA_vIRQHandler+0x9a>
				if (arrDMA2_PtrToFunction[Stream_Number][i] != NULL)
 800127a:	79ba      	ldrb	r2, [r7, #6]
 800127c:	7bf9      	ldrb	r1, [r7, #15]
 800127e:	4816      	ldr	r0, [pc, #88]	; (80012d8 <DMA_vIRQHandler+0xc8>)
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	440b      	add	r3, r1
 800128a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00d      	beq.n	80012ae <DMA_vIRQHandler+0x9e>
					arrDMA2_PtrToFunction[Stream_Number][i]();
 8001292:	79ba      	ldrb	r2, [r7, #6]
 8001294:	7bf9      	ldrb	r1, [r7, #15]
 8001296:	4810      	ldr	r0, [pc, #64]	; (80012d8 <DMA_vIRQHandler+0xc8>)
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	440b      	add	r3, r1
 80012a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012a6:	4798      	blx	r3
				break;
 80012a8:	e001      	b.n	80012ae <DMA_vIRQHandler+0x9e>
				break;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <DMA_vIRQHandler+0xa0>
				break;
 80012ae:	bf00      	nop
			}
			// clear flag after interrupt served
			DMA_vClearFlagStatus(DMA_Number,Stream_Number,i);
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	79b9      	ldrb	r1, [r7, #6]
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff74 	bl	80011a4 <DMA_vClearFlagStatus>
	for (uint8_t i=0 ;i<Total_Number_Of_Interrupts ; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d9b0      	bls.n	800122a <DMA_vIRQHandler+0x1a>
		{
			/* Do Nothing!*/
		}
	}

}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200000c0 	.word	0x200000c0
 80012d8:	20000180 	.word	0x20000180

080012dc <DMA_vSetCallBack>:

void DMA_vSetCallBack(DMA_HandleTypeDef_t* copy_eDMAConfig,DMA_Interrupt_t copy_eDMA_Interrupt, void (*PtrToFunc)(void))
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	460b      	mov	r3, r1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	72fb      	strb	r3, [r7, #11]
	switch (copy_eDMAConfig->Init.DMANumber)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <DMA_vSetCallBack+0x1c>
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d00e      	beq.n	8001314 <DMA_vSetCallBack+0x38>
		break;
	case DMA_Number_2:
		arrDMA2_PtrToFunction[copy_eDMAConfig->Init.Stream][copy_eDMA_Interrupt]=PtrToFunc;
		break;
	default :
		break;
 80012f6:	e01b      	b.n	8001330 <DMA_vSetCallBack+0x54>
		arrDMA1_PtrToFunction[copy_eDMAConfig->Init.Stream][copy_eDMA_Interrupt]=PtrToFunc;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	789b      	ldrb	r3, [r3, #2]
 80012fc:	4618      	mov	r0, r3
 80012fe:	7afa      	ldrb	r2, [r7, #11]
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <DMA_vSetCallBack+0x60>)
 8001302:	4603      	mov	r3, r0
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4403      	add	r3, r0
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001312:	e00d      	b.n	8001330 <DMA_vSetCallBack+0x54>
		arrDMA2_PtrToFunction[copy_eDMAConfig->Init.Stream][copy_eDMA_Interrupt]=PtrToFunc;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	4618      	mov	r0, r3
 800131a:	7afa      	ldrb	r2, [r7, #11]
 800131c:	4908      	ldr	r1, [pc, #32]	; (8001340 <DMA_vSetCallBack+0x64>)
 800131e:	4603      	mov	r3, r0
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4403      	add	r3, r0
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800132e:	bf00      	nop
	}

}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	200000c0 	.word	0x200000c0
 8001340:	20000180 	.word	0x20000180

08001344 <DMA1_Stream0_IRQHandler>:
/* ==========================
 *           DMA1
 * ========================== */

void DMA1_Stream0_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_0);
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff ff60 	bl	8001210 <DMA_vIRQHandler>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}

08001354 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_1);
 8001358:	2101      	movs	r1, #1
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff ff58 	bl	8001210 <DMA_vIRQHandler>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}

08001364 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_3);
 8001368:	2103      	movs	r1, #3
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff50 	bl	8001210 <DMA_vIRQHandler>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_4);
 8001378:	2104      	movs	r1, #4
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff48 	bl	8001210 <DMA_vIRQHandler>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_5);
 8001388:	2105      	movs	r1, #5
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff ff40 	bl	8001210 <DMA_vIRQHandler>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}

08001394 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_6);
 8001398:	2106      	movs	r1, #6
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff ff38 	bl	8001210 <DMA_vIRQHandler>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_1,Stream_7);
 80013a8:	2107      	movs	r1, #7
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff ff30 	bl	8001210 <DMA_vIRQHandler>
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <DMA2_Stream0_IRQHandler>:
/* ==========================
 *           DMA2
 * ========================== */

void DMA2_Stream0_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_0);
 80013b8:	2100      	movs	r1, #0
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff ff28 	bl	8001210 <DMA_vIRQHandler>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_1);
 80013c8:	2101      	movs	r1, #1
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff ff20 	bl	8001210 <DMA_vIRQHandler>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_2);
 80013d8:	2102      	movs	r1, #2
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff ff18 	bl	8001210 <DMA_vIRQHandler>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_3);
 80013e8:	2103      	movs	r1, #3
 80013ea:	2001      	movs	r0, #1
 80013ec:	f7ff ff10 	bl	8001210 <DMA_vIRQHandler>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_4);
 80013f8:	2104      	movs	r1, #4
 80013fa:	2001      	movs	r0, #1
 80013fc:	f7ff ff08 	bl	8001210 <DMA_vIRQHandler>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <DMA2_Stream5_IRQHandler>:
void DMA2_Stream5_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_5);
 8001408:	2105      	movs	r1, #5
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff ff00 	bl	8001210 <DMA_vIRQHandler>
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_6);
 8001418:	2106      	movs	r1, #6
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fef8 	bl	8001210 <DMA_vIRQHandler>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	DMA_vIRQHandler(DMA_Number_2,Stream_7);
 8001428:	2107      	movs	r1, #7
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff fef0 	bl	8001210 <DMA_vIRQHandler>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <GPIO_u8PinInit>:
 * @param[in] copy_ePinConfig : the initialization values of the pin
 * @retval ErrorStatus
 *
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* copy_ePinConfig)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK ;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
	if (copy_ePinConfig != NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8117 	beq.w	8001676 <GPIO_u8PinInit+0x242>
	{
		if ((copy_ePinConfig->PIN_Port < INVALID) && (copy_ePinConfig->PIN_Number <= PIN15))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b07      	cmp	r3, #7
 800144e:	f200 810f 	bhi.w	8001670 <GPIO_u8PinInit+0x23c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	785b      	ldrb	r3, [r3, #1]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	f200 810a 	bhi.w	8001670 <GPIO_u8PinInit+0x23c>
		{
			/* Select GPIO Mode: INPUT - OUTPUT - ANALOG - AF */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER &= ~(MODER_MASK				     << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS)); // clear mode bits
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b8a      	ldr	r3, [pc, #552]	; (800168c <GPIO_u8PinInit+0x258>)
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	2103      	movs	r1, #3
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	4619      	mov	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	4b82      	ldr	r3, [pc, #520]	; (800168c <GPIO_u8PinInit+0x258>)
 8001482:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->MODER |=  ((copy_ePinConfig->PIN_Type) << (copy_ePinConfig->PIN_Number * MODER_PIN_ACCESS));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	4b7e      	ldr	r3, [pc, #504]	; (800168c <GPIO_u8PinInit+0x258>)
 8001492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	789b      	ldrb	r3, [r3, #2]
 800149c:	4619      	mov	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	4b76      	ldr	r3, [pc, #472]	; (800168c <GPIO_u8PinInit+0x258>)
 80014b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
			/* Select GPIO pull state: PULLUP - PULLDOWN - NOPULL */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR &= ~(PUPDR_MASK				    	    << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS)); // clear mode bits
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b72      	ldr	r3, [pc, #456]	; (800168c <GPIO_u8PinInit+0x258>)
 80014c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2103      	movs	r1, #3
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	4b6b      	ldr	r3, [pc, #428]	; (800168c <GPIO_u8PinInit+0x258>)
 80014e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014e4:	400a      	ands	r2, r1
 80014e6:	60da      	str	r2, [r3, #12]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->PUPDR |=  ((copy_ePinConfig->PIN_PullUpDown)  << (copy_ePinConfig->PIN_Number * PUPDR_PIN_ACCESS));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <GPIO_u8PinInit+0x258>)
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	799b      	ldrb	r3, [r3, #6]
 80014fa:	4619      	mov	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	785b      	ldrb	r3, [r3, #1]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa01 f303 	lsl.w	r3, r1, r3
 8001506:	4619      	mov	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <GPIO_u8PinInit+0x258>)
 8001510:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001514:	430a      	orrs	r2, r1
 8001516:	60da      	str	r2, [r3, #12]
			/* Select output type and speed in case of OUTPUT / AF  */
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	789b      	ldrb	r3, [r3, #2]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d004      	beq.n	800152a <GPIO_u8PinInit+0xf6>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	2b02      	cmp	r3, #2
 8001526:	f040 80a9 	bne.w	800167c <GPIO_u8PinInit+0x248>
			{
				/* select output type PUSHPULL - OPEN DRAIN */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER &= ~(OTYPER_MASK				 << (copy_ePinConfig->PIN_Number)); // clear mode bits
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	4b56      	ldr	r3, [pc, #344]	; (800168c <GPIO_u8PinInit+0x258>)
 8001532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	4619      	mov	r1, r3
 800153e:	2301      	movs	r3, #1
 8001540:	408b      	lsls	r3, r1
 8001542:	43db      	mvns	r3, r3
 8001544:	4619      	mov	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	4b4f      	ldr	r3, [pc, #316]	; (800168c <GPIO_u8PinInit+0x258>)
 800154e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001552:	400a      	ands	r2, r1
 8001554:	605a      	str	r2, [r3, #4]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OTYPER |=  (copy_ePinConfig->PIN_OType << (copy_ePinConfig->PIN_Number));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b4b      	ldr	r3, [pc, #300]	; (800168c <GPIO_u8PinInit+0x258>)
 800155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	4619      	mov	r1, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	785b      	ldrb	r3, [r3, #1]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	4619      	mov	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <GPIO_u8PinInit+0x258>)
 800157c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
				/* select speed type LOW_SPEED - MEDIUM_SPEED - FAST_SPEED - HIGH_SPEED */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR &= ~(OSPEEDR_MASK				   << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS)); // clear mode bits
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <GPIO_u8PinInit+0x258>)
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2103      	movs	r1, #3
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	4b38      	ldr	r3, [pc, #224]	; (800168c <GPIO_u8PinInit+0x258>)
 80015aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80015ae:	400a      	ands	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->OSPEEDR |=  (copy_ePinConfig->PIN_OSpeed << (copy_ePinConfig->PIN_Number * OSPEEDR_PIN_ACCESS));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <GPIO_u8PinInit+0x258>)
 80015ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	795b      	ldrb	r3, [r3, #5]
 80015c4:	4619      	mov	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	4619      	mov	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <GPIO_u8PinInit+0x258>)
 80015da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
				/* select AF PIN */
				if ((copy_ePinConfig->PIN_Type == ALTERNATE))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d148      	bne.n	800167c <GPIO_u8PinInit+0x248>
				{
					uint8_t Local_u8RegNum = copy_ePinConfig->PIN_Number / 8U;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	785b      	ldrb	r3, [r3, #1]
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	73bb      	strb	r3, [r7, #14]
					uint8_t Local_u8BitNum = copy_ePinConfig->PIN_Number % 8U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	737b      	strb	r3, [r7, #13]

					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] &= ~(AFR_MASK			  << ( Local_u8BitNum*AFR_PIN_ACCESS)); // clear mode bits
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <GPIO_u8PinInit+0x258>)
 8001604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001608:	7bba      	ldrb	r2, [r7, #14]
 800160a:	3208      	adds	r2, #8
 800160c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	220f      	movs	r2, #15
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <GPIO_u8PinInit+0x258>)
 8001626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162a:	7bba      	ldrb	r2, [r7, #14]
 800162c:	4001      	ands	r1, r0
 800162e:	3208      	adds	r2, #8
 8001630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					GPIO_PORT[copy_ePinConfig->PIN_Port]->AFR[Local_u8RegNum] |=  (copy_ePinConfig->PIN_AF  << ( Local_u8BitNum*AFR_PIN_ACCESS));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <GPIO_u8PinInit+0x258>)
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	7bba      	ldrb	r2, [r7, #14]
 8001642:	3208      	adds	r2, #8
 8001644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7a1b      	ldrb	r3, [r3, #8]
 800164c:	461a      	mov	r2, r3
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	4618      	mov	r0, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <GPIO_u8PinInit+0x258>)
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	7bba      	ldrb	r2, [r7, #14]
 8001666:	4301      	orrs	r1, r0
 8001668:	3208      	adds	r2, #8
 800166a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 800166e:	e005      	b.n	800167c <GPIO_u8PinInit+0x248>
				}
			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8001670:	2302      	movs	r3, #2
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e003      	b.n	800167e <GPIO_u8PinInit+0x24a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8001676:	2303      	movs	r3, #3
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e000      	b.n	800167e <GPIO_u8PinInit+0x24a>
			if ((copy_ePinConfig->PIN_Type == OUTPUT) || (copy_ePinConfig->PIN_Type == ALTERNATE))
 800167c:	bf00      	nop
	}

	return Local_u8ErrorState;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	20000008 	.word	0x20000008

08001690 <I2C_vInit>:
I2C_RegDef_t* I2CPeripheral [] = {I2C1, I2C2,I2C3};



void I2C_vInit(I2C_HandleTypeDef_t* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	//	Stretching Enable/Disable
	I2C_ClkStretchingEnable(hi2c,hi2c->I2C_StretchClk);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	789b      	ldrb	r3, [r3, #2]
 800169c:	4619      	mov	r1, r3
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8fc 	bl	800189c <I2C_ClkStretchingEnable>
	// set chip address
	 I2C_SetAddress(hi2c,hi2c->I2C_InterfaceAddress);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	78db      	ldrb	r3, [r3, #3]
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fac4 	bl	8001c38 <I2C_SetAddress>


	//Set SM
	I2C_SetI2CMasterModer(hi2c,hi2c->I2C_MasterMode);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fa1e 	bl	8001af8 <I2C_SetI2CMasterModer>
	//Set FREQ
	I2C_SetI2CFreq(hi2c,42); //Revise me
 80016bc:	212a      	movs	r1, #42	; 0x2a
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f9a6 	bl	8001a10 <I2C_SetI2CFreq>
	//Set CCR for 100KHZ CLK I2C
	I2C_SetCCRRegister(hi2c,80);//80
 80016c4:	2150      	movs	r1, #80	; 0x50
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 fa46 	bl	8001b58 <I2C_SetCCRRegister>
/**
 * Don't forget to Enable DMA transfer complete interrupt from peripheral and NVIC
 *
 * */

}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <I2C_SendDataToSlave_DMA>:
			I2C_SetStopCondition( hi2c->I2C_ID,I2C_STOP_Stop);
		}
	}
}
void I2C_SendDataToSlave_DMA(I2C_HandleTypeDef_t* hi2c, DMA_HandleTypeDef_t* copy_eDMAConfig,uint8_t copy_u8SlaveAdd,uint32_t copy_u32DataLength,uint8_t* copy_pu8Data)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71fb      	strb	r3, [r7, #7]
	I2C_IntSrc=I2C_InterruptSource_TX;
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <I2C_SendDataToSlave_DMA+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
	/*Enable  Peripheral*/
	I2C_SetPeripheralEnable( hi2c,I2C_Peripheral_EN);
 80016ea:	2101      	movs	r1, #1
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f000 f8a7 	bl	8001840 <I2C_SetPeripheralEnable>

	/*bus id free*/
	while(I2C_ReadStatusFlag(hi2c,I2C_FLAG_BUS_BUSY_BUSY));
 80016f2:	bf00      	nop
 80016f4:	2121      	movs	r1, #33	; 0x21
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 f846 	bl	8001788 <I2C_ReadStatusFlag>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f8      	bne.n	80016f4 <I2C_SendDataToSlave_DMA+0x20>
	/*Enable  DMA*/
	I2C_I2cDMAEnable( hi2c,I2C_DMA_Enable);
 8001702:	2101      	movs	r1, #1
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 f9b1 	bl	8001a6c <I2C_I2cDMAEnable>

	/*Enable ACK*/
	I2C_AckEnable( hi2c,I2C_ACK_Enabled);
 800170a:	2101      	movs	r1, #1
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 f94f 	bl	80019b0 <I2C_AckEnable>

	/*1.Start Condition*/
	I2C_SetStartCondition(hi2c, I2C_START_Start);
 8001712:	2101      	movs	r1, #1
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f8f1 	bl	80018fc <I2C_SetStartCondition>
	/*2. loop until SB generated*/
	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_START_CONDITION_SB));
 800171a:	bf00      	nop
 800171c:	2100      	movs	r1, #0
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f832 	bl	8001788 <I2C_ReadStatusFlag>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f8      	beq.n	800171c <I2C_SendDataToSlave_DMA+0x48>

	/*3. Fill DR with Slave add*/
	I2C_SetDataRegister(hi2c,(copy_u8SlaveAdd<<1)|0);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f9ca 	bl	8001acc <I2C_SetDataRegister>
	/*4. loop until ADDR generated (There is ACK from slave)*/
	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_ADDRESS_SENT_ADDR));
 8001738:	bf00      	nop
 800173a:	2101      	movs	r1, #1
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f823 	bl	8001788 <I2C_ReadStatusFlag>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f8      	beq.n	800173a <I2C_SendDataToSlave_DMA+0x66>
	/*5. loop until TRA=Transmitter, We cleared Addr after sr1 and sr2 read*/
//	while(!I2C_ReadStatusFlag(hi2c,I2C_FLAG_TRANSMITTER_RECEIVER_TRA));
	I2C_ClearAddrBit(hi2c);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 fa55 	bl	8001bf8 <I2C_ClearAddrBit>
	DMA_vSetCallBack(copy_eDMAConfig,Transfer_complete_Interrupt, I2C_DMA_TxCRxC_CallBack);
 800174e:	4a0c      	ldr	r2, [pc, #48]	; (8001780 <I2C_SendDataToSlave_DMA+0xac>)
 8001750:	2105      	movs	r1, #5
 8001752:	68b8      	ldr	r0, [r7, #8]
 8001754:	f7ff fdc2 	bl	80012dc <DMA_vSetCallBack>

	DMA_vStart_IT(copy_eDMAConfig,(uint32_t) copy_pu8Data,(uint32_t) &I2CPeripheral[hi2c->I2C_ID]->I2C_DR , copy_u32DataLength);
 8001758:	69b9      	ldr	r1, [r7, #24]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b08      	ldr	r3, [pc, #32]	; (8001784 <I2C_SendDataToSlave_DMA+0xb0>)
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	3310      	adds	r3, #16
 8001768:	461a      	mov	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7ff fc95 	bl	800109c <DMA_vStart_IT>



}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000028 	.word	0x20000028
 8001780:	080017e9 	.word	0x080017e9
 8001784:	2000002c 	.word	0x2000002c

08001788 <I2C_ReadStatusFlag>:
 *
 *
 *
 */
static uint8_t I2C_ReadStatusFlag(I2C_HandleTypeDef_t* hi2c,I2C_Status_Flags copy_eStatusFlag)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
	if (copy_eStatusFlag<32)
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	2b1f      	cmp	r3, #31
 8001798:	d80e      	bhi.n	80017b8 <I2C_ReadStatusFlag+0x30>
	{
		return (READ_BIT(I2CPeripheral[hi2c->I2C_ID]->I2C_SR1,copy_eStatusFlag));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <I2C_ReadStatusFlag+0x5c>)
 80017a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	fa22 f303 	lsr.w	r3, r2, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e00e      	b.n	80017d6 <I2C_ReadStatusFlag+0x4e>
	}
	// here i made the flags for SR2 starts from 32 to differentiate between them and SR1
	else
	{
		return (READ_BIT(I2CPeripheral[hi2c->I2C_ID]->I2C_SR2,(copy_eStatusFlag-32)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <I2C_ReadStatusFlag+0x5c>)
 80017c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	3b20      	subs	r3, #32
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3

	}
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000002c 	.word	0x2000002c

080017e8 <I2C_DMA_TxCRxC_CallBack>:

static void I2C_DMA_TxCRxC_CallBack()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0

	if(I2C_IntSrc==I2C_InterruptSource_TX)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <I2C_DMA_TxCRxC_CallBack+0x54>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10c      	bne.n	800180e <I2C_DMA_TxCRxC_CallBack+0x26>
	{
		//Disable DMA
		I2C_I2cDMAEnable( I2C_Channel_1,I2C_DMA_Disable);
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 f938 	bl	8001a6c <I2C_I2cDMAEnable>

		// if transmission
		while(!I2C_ReadStatusFlag(I2C_Channel_1,I2C_BYTE_TRANSFER_FINISHED_BTF)); //FIXME
 80017fc:	bf00      	nop
 80017fe:	2102      	movs	r1, #2
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff ffc1 	bl	8001788 <I2C_ReadStatusFlag>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f8      	beq.n	80017fe <I2C_DMA_TxCRxC_CallBack+0x16>
 800180c:	e00f      	b.n	800182e <I2C_DMA_TxCRxC_CallBack+0x46>

	}
	else if (I2C_IntSrc== I2C_InterruptSource_RX)
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <I2C_DMA_TxCRxC_CallBack+0x54>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10b      	bne.n	800182e <I2C_DMA_TxCRxC_CallBack+0x46>
	{
		//Disable DMA
		I2C_I2cDMAEnable( I2C_Channel_1,I2C_DMA_Disable);
 8001816:	2100      	movs	r1, #0
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f927 	bl	8001a6c <I2C_I2cDMAEnable>

		while(I2C_ReadStatusFlag(I2C_Channel_1,I2C_FLAG_DATA_REG_FULL_RxNE)); //FIXME
 800181e:	bf00      	nop
 8001820:	2106      	movs	r1, #6
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff ffb0 	bl	8001788 <I2C_ReadStatusFlag>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f8      	bne.n	8001820 <I2C_DMA_TxCRxC_CallBack+0x38>

	}

	// configure this
	I2C_SetStopCondition( I2C_Channel_1,I2C_STOP_Stop);
 800182e:	2101      	movs	r1, #1
 8001830:	2000      	movs	r0, #0
 8001832:	f000 f893 	bl	800195c <I2C_SetStopCondition>

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000028 	.word	0x20000028

08001840 <I2C_SetPeripheralEnable>:

static void I2C_SetPeripheralEnable(I2C_HandleTypeDef_t* hi2c,I2C_Peripheral_Enable copy_eI2CEnable)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_PE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <I2C_SetPeripheralEnable+0x58>)
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <I2C_SetPeripheralEnable+0x58>)
 8001862:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001866:	f022 0201 	bic.w	r2, r2, #1
 800186a:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eI2CEnable<<I2C_CR1_PE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <I2C_SetPeripheralEnable+0x58>)
 8001874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <I2C_SetPeripheralEnable+0x58>)
 8001884:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	2000002c 	.word	0x2000002c

0800189c <I2C_ClkStretchingEnable>:
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_ENGC);
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eGCEnable<<I2C_CR1_ENGC);
}

static void I2C_ClkStretchingEnable(I2C_HandleTypeDef_t* hi2c,I2C_STRETCH_Enable copy_eStretchEnable)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_NOSTRETCH);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <I2C_ClkStretchingEnable+0x5c>)
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <I2C_ClkStretchingEnable+0x5c>)
 80018be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c6:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eStretchEnable<<I2C_CR1_NOSTRETCH);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <I2C_ClkStretchingEnable+0x5c>)
 80018d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	01db      	lsls	r3, r3, #7
 80018da:	4619      	mov	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <I2C_ClkStretchingEnable+0x5c>)
 80018e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	2000002c 	.word	0x2000002c

080018fc <I2C_SetStartCondition>:

static void I2C_SetStartCondition(I2C_HandleTypeDef_t* hi2c,I2C_START_Generation copy_eStartCondition)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_START);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <I2C_SetStartCondition+0x5c>)
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <I2C_SetStartCondition+0x5c>)
 800191e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001926:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eStartCondition<<I2C_CR1_START);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <I2C_SetStartCondition+0x5c>)
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	4619      	mov	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <I2C_SetStartCondition+0x5c>)
 8001944:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001948:	430a      	orrs	r2, r1
 800194a:	601a      	str	r2, [r3, #0]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	2000002c 	.word	0x2000002c

0800195c <I2C_SetStopCondition>:

static void I2C_SetStopCondition(I2C_Peripheral_Channel copy_eI2C_channel,I2C_STOP_Generation copy_eStopCondition)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	460a      	mov	r2, r1
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	4613      	mov	r3, r2
 800196a:	71bb      	strb	r3, [r7, #6]
	I2CPeripheral[copy_eI2C_channel]->I2C_CR1 &=~ (0b1<<I2C_CR1_STOP);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <I2C_SetStopCondition+0x50>)
 8001970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <I2C_SetStopCondition+0x50>)
 800197a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800197e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001982:	601a      	str	r2, [r3, #0]
	I2CPeripheral[copy_eI2C_channel]->I2C_CR1 |= (copy_eStopCondition<<I2C_CR1_STOP);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <I2C_SetStopCondition+0x50>)
 8001988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	79bb      	ldrb	r3, [r7, #6]
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	4618      	mov	r0, r3
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4905      	ldr	r1, [pc, #20]	; (80019ac <I2C_SetStopCondition+0x50>)
 8001998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800199c:	4302      	orrs	r2, r0
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	2000002c 	.word	0x2000002c

080019b0 <I2C_AckEnable>:

static void I2C_AckEnable(I2C_HandleTypeDef_t* hi2c,I2C_ACK_Enable copy_eAckEnable)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_ACK);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <I2C_AckEnable+0x5c>)
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <I2C_AckEnable+0x5c>)
 80019d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019da:	601a      	str	r2, [r3, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eAckEnable<<I2C_CR1_ACK);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <I2C_AckEnable+0x5c>)
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	029b      	lsls	r3, r3, #10
 80019ee:	4619      	mov	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <I2C_AckEnable+0x5c>)
 80019f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	2000002c 	.word	0x2000002c

08001a10 <I2C_SetI2CFreq>:
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 &=~ (0b1<<I2C_CR1_SWRST);
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR1 |= (copy_eSWReset<<I2C_CR1_SWRST);
}

static void I2C_SetI2CFreq(I2C_HandleTypeDef_t* hi2c,uint32_t copy_efreq)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 &=~ (0b111111<<I2C_CR2_Freq0_5);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <I2C_SetI2CFreq+0x58>)
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <I2C_SetI2CFreq+0x58>)
 8001a30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a34:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001a38:	605a      	str	r2, [r3, #4]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 |= (copy_efreq<<I2C_CR2_Freq0_5);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <I2C_SetI2CFreq+0x58>)
 8001a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <I2C_SetI2CFreq+0x58>)
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000002c 	.word	0x2000002c

08001a6c <I2C_I2cDMAEnable>:
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 |= (copy_eInterruptEnable<<I2C_CR2_ITBUFEN);
}


static void I2C_I2cDMAEnable(I2C_HandleTypeDef_t* hi2c,I2C_DMAEnable copy_eInterruptEnable)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 &=~ (0b1<<I2C_CR2_DMAEN);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <I2C_I2cDMAEnable+0x5c>)
 8001a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <I2C_I2cDMAEnable+0x5c>)
 8001a8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a96:	605a      	str	r2, [r3, #4]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CR2 |= (copy_eInterruptEnable<<I2C_CR2_DMAEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <I2C_I2cDMAEnable+0x5c>)
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	02db      	lsls	r3, r3, #11
 8001aaa:	4619      	mov	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <I2C_I2cDMAEnable+0x5c>)
 8001ab4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	2000002c 	.word	0x2000002c

08001acc <I2C_SetDataRegister>:
{
	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 &=~ (0b1111111<<I2C_OAR1_ADD7_1);
	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 |= (copy_eInterfaceAdd<<I2C_OAR1_ADD7_1);
}
static void I2C_SetDataRegister(I2C_HandleTypeDef_t* hi2c,uint8_t copy_u8Data)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
	I2CPeripheral[hi2c->I2C_ID]->I2C_DR = copy_u8Data;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <I2C_SetDataRegister+0x28>)
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	611a      	str	r2, [r3, #16]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	2000002c 	.word	0x2000002c

08001af8 <I2C_SetI2CMasterModer>:

	* copy_pu8Data=I2CPeripheral[hi2c->I2C_ID]->I2C_DR ;
}

static void I2C_SetI2CMasterModer(I2C_HandleTypeDef_t* hi2c,I2C_Select_Master_Mode copy_eMasterMode)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]

	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR &=~ (0b1<<I2C_CCR_MASTERMODE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <I2C_SetI2CMasterModer+0x5c>)
 8001b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <I2C_SetI2CMasterModer+0x5c>)
 8001b1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b22:	61da      	str	r2, [r3, #28]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR |= (copy_eMasterMode<<I2C_CCR_MASTERMODE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <I2C_SetI2CMasterModer+0x5c>)
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	03db      	lsls	r3, r3, #15
 8001b36:	4619      	mov	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <I2C_SetI2CMasterModer+0x5c>)
 8001b40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	61da      	str	r2, [r3, #28]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	2000002c 	.word	0x2000002c

08001b58 <I2C_SetCCRRegister>:
static void I2C_SetCCRRegister(I2C_HandleTypeDef_t* hi2c,uint32_t copy_u32Data)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR &=~ (0b111111111111<<0);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	4611      	mov	r1, r2
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001b78:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001b7c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001b80:	f023 030f 	bic.w	r3, r3, #15
 8001b84:	61d3      	str	r3, [r2, #28]
	I2CPeripheral[hi2c->I2C_ID]->I2C_CCR |= (copy_u32Data<<0);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b92:	69d9      	ldr	r1, [r3, #28]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	61da      	str	r2, [r3, #28]

	I2CPeripheral[hi2c->I2C_ID]->I2C_TRISE &=~ (0b111111<<0);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001bbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bc0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001bc4:	621a      	str	r2, [r3, #32]
	I2CPeripheral[hi2c->I2C_ID]->I2C_TRISE |= (0x2B<<0);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <I2C_SetCCRRegister+0x9c>)
 8001bdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001be0:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8001be4:	621a      	str	r2, [r3, #32]


}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000002c 	.word	0x2000002c

08001bf8 <I2C_ClearAddrBit>:

static void I2C_ClearAddrBit(I2C_HandleTypeDef_t* hi2c)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	uint32_t temp1=0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
	uint32_t temp2=0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]

	temp1=I2CPeripheral[hi2c->I2C_ID]->I2C_SR1 ;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <I2C_ClearAddrBit+0x3c>)
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	60fb      	str	r3, [r7, #12]
	temp2=I2CPeripheral[hi2c->I2C_ID]->I2C_SR2 ;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <I2C_ClearAddrBit+0x3c>)
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	60bb      	str	r3, [r7, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	2000002c 	.word	0x2000002c

08001c38 <I2C_SetAddress>:


static void I2C_SetAddress(I2C_HandleTypeDef_t* hi2c,uint8_t copy_u8Data)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]

//	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 &=~ (0b11111111<<1);
//	I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 |= (copy_u8Data<<1);
		I2CPeripheral[hi2c->I2C_ID]->I2C_OAR1 |= (0x4000);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <I2C_SetAddress+0x38>)
 8001c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <I2C_SetAddress+0x38>)
 8001c5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c62:	609a      	str	r2, [r3, #8]

}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	2000002c 	.word	0x2000002c

08001c74 <NVIC_vEnableInterrupt>:
#include "NVIC_int.h"

#include "Utils.h"

void NVIC_vEnableInterrupt(Interrupt_t copy_eInterrupt)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_eInterrupt/32]= 0b1 << copy_eInterrupt % 32 ;
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	425a      	negs	r2, r3
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	bf58      	it	pl
 8001c8e:	4253      	negpl	r3, r2
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	2301      	movs	r3, #1
 8001c96:	fa03 f102 	lsl.w	r1, r3, r2
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <NVIC_vEnableInterrupt+0x48>)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	da00      	bge.n	8001ca6 <NVIC_vEnableInterrupt+0x32>
 8001ca4:	331f      	adds	r3, #31
 8001ca6:	115b      	asrs	r3, r3, #5
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <RCC_AHB1EnableCLK>:
#include "ErrType.h"
#include "Utils.h"
#include "stdio.h"

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->AHB1ENR,peripheral);
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <RCC_AHB1EnableCLK+0x2c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	79fa      	ldrb	r2, [r7, #7]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <RCC_AHB1EnableCLK+0x2c>)
 8001cda:	430b      	orrs	r3, r1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <RCC_APB1EnableCLK>:
	CLEAR_BIT(RCC->AHB1ENR,peripheral);

}

void RCC_APB1EnableCLK(PeripheralAPB1_t peripheral)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->APB1ENR,peripheral);
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <RCC_APB1EnableCLK+0x2c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4611      	mov	r1, r2
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <RCC_APB1EnableCLK+0x2c>)
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40

}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <main>:
		.PIN_OSpeed=HIGH_SPEED

};

int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af02      	add	r7, sp, #8
	RCC_AHB1EnableCLK(RCC_AHB1ENR_DMA1EN);
 8001d26:	2015      	movs	r0, #21
 8001d28:	f7ff ffca 	bl	8001cc0 <RCC_AHB1EnableCLK>
	RCC_APB1EnableCLK(RCC_APB1ENR_I2C1EN);
 8001d2c:	2015      	movs	r0, #21
 8001d2e:	f7ff ffdf 	bl	8001cf0 <RCC_APB1EnableCLK>


	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOBEN);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff ffc4 	bl	8001cc0 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(RCC_AHB1ENR_GPIOCEN);
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f7ff ffc1 	bl	8001cc0 <RCC_AHB1EnableCLK>

	//Enable DMA interrupts
	NVIC_vEnableInterrupt(NVIC_DMA1_Stream7);
 8001d3e:	202f      	movs	r0, #47	; 0x2f
 8001d40:	f7ff ff98 	bl	8001c74 <NVIC_vEnableInterrupt>
	NVIC_vEnableInterrupt(NVIC_DMA1_Stream0);
 8001d44:	200b      	movs	r0, #11
 8001d46:	f7ff ff95 	bl	8001c74 <NVIC_vEnableInterrupt>

	DMA_vInit(&DMA_I2C1_TX);
 8001d4a:	4811      	ldr	r0, [pc, #68]	; (8001d90 <main+0x70>)
 8001d4c:	f7fe fa5a 	bl	8000204 <DMA_vInit>
	DMA_vInit(&DMA_I2C1_RX);
 8001d50:	4810      	ldr	r0, [pc, #64]	; (8001d94 <main+0x74>)
 8001d52:	f7fe fa57 	bl	8000204 <DMA_vInit>

	GPIO_u8PinInit(&PinSCK);
 8001d56:	4810      	ldr	r0, [pc, #64]	; (8001d98 <main+0x78>)
 8001d58:	f7ff fb6c 	bl	8001434 <GPIO_u8PinInit>
	GPIO_u8PinInit(&PinSDA);
 8001d5c:	480f      	ldr	r0, [pc, #60]	; (8001d9c <main+0x7c>)
 8001d5e:	f7ff fb69 	bl	8001434 <GPIO_u8PinInit>

	I2C_vInit(&ourI2C);
 8001d62:	480f      	ldr	r0, [pc, #60]	; (8001da0 <main+0x80>)
 8001d64:	f7ff fc94 	bl	8001690 <I2C_vInit>
	/* Loop forever */
	uint8_t da[]={01,40,00,80,90};
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <main+0x84>)
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d72:	6018      	str	r0, [r3, #0]
 8001d74:	3304      	adds	r3, #4
 8001d76:	7019      	strb	r1, [r3, #0]
	uint8_t Ra[4]={0};
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
//	I2C_SendDataToSlave_DMA(&ourI2C, &DMA_I2C1_TX,(uint8_t)0b01101000,5,da);
//	RTC_Programming(&ourI2C,&DMA_I2C1_TX);
//	 I2C_SendDataToSlaveSynch(&ourI2C, 0b01101000,2,da);

//	 I2C_SendDataToSlaveSynch(&ourI2C, 0b01101000,1,da);
	 I2C_SendDataToSlave_DMA(&ourI2C, &DMA_I2C1_TX,0b01101000,1,da);
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2301      	movs	r3, #1
 8001d84:	2268      	movs	r2, #104	; 0x68
 8001d86:	4902      	ldr	r1, [pc, #8]	; (8001d90 <main+0x70>)
 8001d88:	4805      	ldr	r0, [pc, #20]	; (8001da0 <main+0x80>)
 8001d8a:	f7ff fca3 	bl	80016d4 <I2C_SendDataToSlave_DMA>

//	 I2C_ReceiveDataFromSlave_DMA(&ourI2C, &DMA_I2C1_RX,0b01101000,1,Ra);

	for(;;)
 8001d8e:	e7fe      	b.n	8001d8e <main+0x6e>
 8001d90:	20000038 	.word	0x20000038
 8001d94:	20000060 	.word	0x20000060
 8001d98:	2000008c 	.word	0x2000008c
 8001d9c:	20000098 	.word	0x20000098
 8001da0:	20000088 	.word	0x20000088
 8001da4:	08001e5c 	.word	0x08001e5c

08001da8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001da8:	480d      	ldr	r0, [pc, #52]	; (8001de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001daa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480c      	ldr	r0, [pc, #48]	; (8001de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <LoopForever+0xe>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <LoopForever+0x16>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dd6:	f000 f811 	bl	8001dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dda:	f7ff ffa1 	bl	8001d20 <main>

08001dde <LoopForever>:

LoopForever:
  b LoopForever
 8001dde:	e7fe      	b.n	8001dde <LoopForever>
  ldr   r0, =_estack
 8001de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001dec:	08001e6c 	.word	0x08001e6c
  ldr r2, =_sbss
 8001df0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001df4:	20000240 	.word	0x20000240

08001df8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC_IRQHandler>
	...

08001dfc <__libc_init_array>:
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	4d0d      	ldr	r5, [pc, #52]	; (8001e34 <__libc_init_array+0x38>)
 8001e00:	4c0d      	ldr	r4, [pc, #52]	; (8001e38 <__libc_init_array+0x3c>)
 8001e02:	1b64      	subs	r4, r4, r5
 8001e04:	10a4      	asrs	r4, r4, #2
 8001e06:	2600      	movs	r6, #0
 8001e08:	42a6      	cmp	r6, r4
 8001e0a:	d109      	bne.n	8001e20 <__libc_init_array+0x24>
 8001e0c:	4d0b      	ldr	r5, [pc, #44]	; (8001e3c <__libc_init_array+0x40>)
 8001e0e:	4c0c      	ldr	r4, [pc, #48]	; (8001e40 <__libc_init_array+0x44>)
 8001e10:	f000 f818 	bl	8001e44 <_init>
 8001e14:	1b64      	subs	r4, r4, r5
 8001e16:	10a4      	asrs	r4, r4, #2
 8001e18:	2600      	movs	r6, #0
 8001e1a:	42a6      	cmp	r6, r4
 8001e1c:	d105      	bne.n	8001e2a <__libc_init_array+0x2e>
 8001e1e:	bd70      	pop	{r4, r5, r6, pc}
 8001e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e24:	4798      	blx	r3
 8001e26:	3601      	adds	r6, #1
 8001e28:	e7ee      	b.n	8001e08 <__libc_init_array+0xc>
 8001e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e2e:	4798      	blx	r3
 8001e30:	3601      	adds	r6, #1
 8001e32:	e7f2      	b.n	8001e1a <__libc_init_array+0x1e>
 8001e34:	08001e64 	.word	0x08001e64
 8001e38:	08001e64 	.word	0x08001e64
 8001e3c:	08001e64 	.word	0x08001e64
 8001e40:	08001e68 	.word	0x08001e68

08001e44 <_init>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	bf00      	nop
 8001e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4a:	bc08      	pop	{r3}
 8001e4c:	469e      	mov	lr, r3
 8001e4e:	4770      	bx	lr

08001e50 <_fini>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	bf00      	nop
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr
